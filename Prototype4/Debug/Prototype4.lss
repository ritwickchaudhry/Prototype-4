
Prototype4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00001f44  00001fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800208  00800208  00001fe0  2**0
                  ALLOC
  3 .stab         000044e8  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e97  00000000  00000000  000064c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00007360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011f5  00000000  00000000  00007400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000347  00000000  00000000  000085f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a2  00000000  00000000  0000893c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00008fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  00009534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000116f  00000000  00000000  000099cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__ctors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_5>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_6>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_25>
      68:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      6c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      70:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      7c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      80:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      84:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      88:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      8c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      90:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      94:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      98:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      9c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      a0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      a4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      a8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      ac:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      b0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      b4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      b8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      bc:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      c0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      c4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      c8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      cc:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      d0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      d4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      d8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      dc:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      e0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	sts	0x46, r19
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	lds	r19, 0xbc
     126:	aa aa       	sts	0x9a, r26
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 07       	cpc	r19, r31
     130:	63 42       	sbci	r22, 0x23	; 35
     132:	36 b7       	in	r19, 0x36	; 54
     134:	9b d8       	rcall	.-3786   	; 0xfffff26c <__eeprom_end+0xff7ef26c>
     136:	a7 1a       	sub	r10, r23
     138:	39 68       	ori	r19, 0x89	; 137
     13a:	56 18       	sub	r5, r6
     13c:	ae ba       	out	0x1e, r10	; 30
     13e:	ab 55       	subi	r26, 0x5B	; 91
     140:	8c 1d       	adc	r24, r12
     142:	3c b7       	in	r19, 0x3c	; 60
     144:	cc 57       	subi	r28, 0x7C	; 124
     146:	63 bd       	out	0x23, r22	; 35
     148:	6d ed       	ldi	r22, 0xDD	; 221
     14a:	fd 75       	andi	r31, 0x5D	; 93
     14c:	3e f6       	brtc	.-114    	; 0xdc <__SREG__+0x9d>
     14e:	17 72       	andi	r17, 0x27	; 39
     150:	31 bf       	out	0x31, r19	; 49
     152:	00 00       	nop
     154:	00 80       	ld	r0, Z
     156:	3f 08       	sbc	r3, r15
     158:	00 00       	nop
     15a:	00 be       	out	0x30, r0	; 48
     15c:	92 24       	eor	r9, r2
     15e:	49 12       	cpse	r4, r25
     160:	3e ab       	sts	0x5e, r19
     162:	aa aa       	sts	0x9a, r26
     164:	2a be       	out	0x3a, r2	; 58
     166:	cd cc       	rjmp	.-1638   	; 0xfffffb02 <__eeprom_end+0xff7efb02>
     168:	cc 4c       	sbci	r28, 0xCC	; 204
     16a:	3e 00       	.word	0x003e	; ????
     16c:	00 00       	nop
     16e:	80 be       	out	0x30, r8	; 48
     170:	ab aa       	sts	0x9b, r26
     172:	aa aa       	sts	0x9a, r26
     174:	3e 00       	.word	0x003e	; ????
     176:	00 00       	nop
     178:	00 bf       	out	0x30, r16	; 48
     17a:	00 00       	nop
     17c:	00 80       	ld	r0, Z
     17e:	3f 00       	.word	0x003f	; ????
     180:	00 00       	nop
     182:	00 00       	nop
     184:	08 41       	sbci	r16, 0x18	; 24
     186:	78 d3       	rcall	.+1776   	; 0x878 <Right_Rotation_Degrees+0x20>
     188:	bb 43       	sbci	r27, 0x3B	; 59
     18a:	87 d1       	rcall	.+782    	; 0x49a <lcd_print+0xf4>
     18c:	13 3d       	cpi	r17, 0xD3	; 211
     18e:	19 0e       	add	r1, r25
     190:	3c c3       	rjmp	.+1656   	; 0x80a <Left_Rotation_Degrees+0x198>
     192:	bd 42       	sbci	r27, 0x2D	; 45
     194:	82 ad       	sts	0x62, r24
     196:	2b 3e       	cpi	r18, 0xEB	; 235
     198:	68 ec       	ldi	r22, 0xC8	; 200
     19a:	82 76       	andi	r24, 0x62	; 98
     19c:	be d9       	rcall	.-3204   	; 0xfffff51a <__eeprom_end+0xff7ef51a>
     19e:	8f e1       	ldi	r24, 0x1F	; 31
     1a0:	a9 3e       	cpi	r26, 0xE9	; 233
     1a2:	4c 80       	ldd	r4, Y+4	; 0x04
     1a4:	ef ff       	.word	0xffef	; ????
     1a6:	be 01       	movw	r22, r28
     1a8:	c4 ff       	sbrs	r28, 4
     1aa:	7f 3f       	cpi	r23, 0xFF	; 255
     1ac:	00 00       	nop
     1ae:	00 00       	nop
	...

000001b2 <__ctors_end>:
     1b2:	11 24       	eor	r1, r1
     1b4:	1f be       	out	0x3f, r1	; 63
     1b6:	cf ef       	ldi	r28, 0xFF	; 255
     1b8:	d1 e2       	ldi	r29, 0x21	; 33
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	cd bf       	out	0x3d, r28	; 61
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0c bf       	out	0x3c, r16	; 60

000001c2 <__do_copy_data>:
     1c2:	12 e0       	ldi	r17, 0x02	; 2
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b2 e0       	ldi	r27, 0x02	; 2
     1c8:	e4 e4       	ldi	r30, 0x44	; 68
     1ca:	ff e1       	ldi	r31, 0x1F	; 31
     1cc:	00 e0       	ldi	r16, 0x00	; 0
     1ce:	0b bf       	out	0x3b, r16	; 59
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x14>
     1d2:	07 90       	elpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	a8 30       	cpi	r26, 0x08	; 8
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0x10>

000001dc <__do_clear_bss>:
     1dc:	12 e0       	ldi	r17, 0x02	; 2
     1de:	a8 e0       	ldi	r26, 0x08	; 8
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	ad 32       	cpi	r26, 0x2D	; 45
     1e8:	b1 07       	cpc	r27, r17
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>
     1ec:	0e 94 04 0b 	call	0x1608	; 0x1608 <main>
     1f0:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_exit>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f8:	86 e6       	ldi	r24, 0x66	; 102
     1fa:	9e e0       	ldi	r25, 0x0E	; 14
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_set_4bit+0x4>
     200:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     202:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     204:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     206:	80 e3       	ldi	r24, 0x30	; 48
     208:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     20a:	42 9a       	sbi	0x08, 2	; 8
     20c:	ef ef       	ldi	r30, 0xFF	; 255
     20e:	f7 e4       	ldi	r31, 0x47	; 71
     210:	31 97       	sbiw	r30, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <lcd_set_4bit+0x18>
     214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_set_4bit+0x1e>
     216:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     218:	42 98       	cbi	0x08, 2	; 8
     21a:	e6 e6       	ldi	r30, 0x66	; 102
     21c:	fe e0       	ldi	r31, 0x0E	; 14
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <lcd_set_4bit+0x26>
     222:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     224:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     226:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     228:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     22a:	42 9a       	sbi	0x08, 2	; 8
     22c:	ef ef       	ldi	r30, 0xFF	; 255
     22e:	f7 e4       	ldi	r31, 0x47	; 71
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <lcd_set_4bit+0x38>
     234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_set_4bit+0x3e>
     236:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     238:	42 98       	cbi	0x08, 2	; 8
     23a:	e6 e6       	ldi	r30, 0x66	; 102
     23c:	fe e0       	ldi	r31, 0x0E	; 14
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <lcd_set_4bit+0x46>
     242:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     246:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     248:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     24a:	42 9a       	sbi	0x08, 2	; 8
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	97 e4       	ldi	r25, 0x47	; 71
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <lcd_set_4bit+0x58>
     254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_set_4bit+0x5e>
     256:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     258:	42 98       	cbi	0x08, 2	; 8
     25a:	e6 e6       	ldi	r30, 0x66	; 102
     25c:	fe e0       	ldi	r31, 0x0E	; 14
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_set_4bit+0x66>
     262:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     264:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     266:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     268:	80 e2       	ldi	r24, 0x20	; 32
     26a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     26c:	42 9a       	sbi	0x08, 2	; 8
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	97 e4       	ldi	r25, 0x47	; 71
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <lcd_set_4bit+0x7a>
     276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_set_4bit+0x80>
     278:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     27a:	42 98       	cbi	0x08, 2	; 8

	
}
     27c:	08 95       	ret

0000027e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     27e:	98 b1       	in	r25, 0x08	; 8
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     284:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     286:	28 2f       	mov	r18, r24
     288:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     28a:	92 2b       	or	r25, r18
     28c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     28e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     290:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     292:	42 9a       	sbi	0x08, 2	; 8
     294:	ef ef       	ldi	r30, 0xFF	; 255
     296:	f7 e4       	ldi	r31, 0x47	; 71
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_wr_command+0x1a>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_wr_command+0x20>
     29e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2a0:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     2a2:	98 b1       	in	r25, 0x08	; 8
     2a4:	9f 70       	andi	r25, 0x0F	; 15
     2a6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     2a8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     2aa:	82 95       	swap	r24
     2ac:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     2ae:	89 2b       	or	r24, r25
     2b0:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     2b2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2b4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2b6:	42 9a       	sbi	0x08, 2	; 8
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	97 e4       	ldi	r25, 0x47	; 71
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_wr_command+0x3e>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_wr_command+0x44>
     2c2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2c4:	42 98       	cbi	0x08, 2	; 8
}
     2c6:	08 95       	ret

000002c8 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     2c8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_set_4bit>
     2cc:	86 e6       	ldi	r24, 0x66	; 102
     2ce:	9e e0       	ldi	r25, 0x0E	; 14
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_init+0x8>
     2d4:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     2d6:	88 e2       	ldi	r24, 0x28	; 40
     2d8:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x01);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x06);
     2e2:	86 e0       	ldi	r24, 0x06	; 6
     2e4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x0E);
     2e8:	8e e0       	ldi	r24, 0x0E	; 14
     2ea:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x80);
     2ee:	80 e8       	ldi	r24, 0x80	; 128
     2f0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
		
}
     2f4:	08 95       	ret

000002f6 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2f6:	98 b1       	in	r25, 0x08	; 8
     2f8:	9f 70       	andi	r25, 0x0F	; 15
     2fa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2fc:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2fe:	28 2f       	mov	r18, r24
     300:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     302:	92 2b       	or	r25, r18
     304:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     306:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     308:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     30a:	42 9a       	sbi	0x08, 2	; 8
     30c:	ef ef       	ldi	r30, 0xFF	; 255
     30e:	f7 e4       	ldi	r31, 0x47	; 71
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <lcd_wr_char+0x1a>
     314:	00 c0       	rjmp	.+0      	; 0x316 <lcd_wr_char+0x20>
     316:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     318:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     31a:	98 b1       	in	r25, 0x08	; 8
     31c:	9f 70       	andi	r25, 0x0F	; 15
     31e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     320:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     322:	82 95       	swap	r24
     324:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     326:	89 2b       	or	r24, r25
     328:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     32a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     32c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     32e:	42 9a       	sbi	0x08, 2	; 8
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	97 e4       	ldi	r25, 0x47	; 71
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_wr_char+0x3e>
     338:	00 c0       	rjmp	.+0      	; 0x33a <lcd_wr_char+0x44>
     33a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     33c:	42 98       	cbi	0x08, 2	; 8
}
     33e:	08 95       	ret

00000340 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     340:	80 e8       	ldi	r24, 0x80	; 128
     342:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
}
     346:	08 95       	ret

00000348 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	ec 01       	movw	r28, r24
	while(*str != '\0')
     34e:	88 81       	ld	r24, Y
     350:	88 23       	and	r24, r24
     352:	31 f0       	breq	.+12     	; 0x360 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     354:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     356:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     35a:	89 91       	ld	r24, Y+
     35c:	88 23       	and	r24, r24
     35e:	d9 f7       	brne	.-10     	; 0x356 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	79 f0       	breq	.+30     	; 0x388 <lcd_cursor+0x22>
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	18 f4       	brcc	.+6      	; 0x374 <lcd_cursor+0xe>
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	c9 f4       	brne	.+50     	; 0x3a4 <lcd_cursor+0x3e>
     372:	05 c0       	rjmp	.+10     	; 0x37e <lcd_cursor+0x18>
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	69 f0       	breq	.+26     	; 0x392 <lcd_cursor+0x2c>
     378:	84 30       	cpi	r24, 0x04	; 4
     37a:	a1 f4       	brne	.+40     	; 0x3a4 <lcd_cursor+0x3e>
     37c:	0f c0       	rjmp	.+30     	; 0x39c <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     37e:	86 2f       	mov	r24, r22
     380:	81 58       	subi	r24, 0x81	; 129
     382:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     386:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     388:	86 2f       	mov	r24, r22
     38a:	81 54       	subi	r24, 0x41	; 65
     38c:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     390:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     392:	86 2f       	mov	r24, r22
     394:	8d 56       	subi	r24, 0x6D	; 109
     396:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     39a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     39c:	86 2f       	mov	r24, r22
     39e:	8d 52       	subi	r24, 0x2D	; 45
     3a0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     3a4:	08 95       	ret

000003a6 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	8a 01       	movw	r16, r20
     3b0:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     3b2:	88 23       	and	r24, r24
     3b4:	11 f0       	breq	.+4      	; 0x3ba <lcd_print+0x14>
     3b6:	66 23       	and	r22, r22
     3b8:	19 f4       	brne	.+6      	; 0x3c0 <lcd_print+0x1a>
	{
		lcd_home();
     3ba:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_home>
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     3c0:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     3c4:	c5 30       	cpi	r28, 0x05	; 5
     3c6:	d1 05       	cpc	r29, r1
     3c8:	71 f4       	brne	.+28     	; 0x3e6 <lcd_print+0x40>
	{
		million=value/10000+48;
     3ca:	c8 01       	movw	r24, r16
     3cc:	60 e1       	ldi	r22, 0x10	; 16
     3ce:	77 e2       	ldi	r23, 0x27	; 39
     3d0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     3d4:	cb 01       	movw	r24, r22
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 21 02 	sts	0x0221, r25
     3dc:	80 93 20 02 	sts	0x0220, r24
		lcd_wr_char(million);
     3e0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     3e6:	c4 30       	cpi	r28, 0x04	; 4
     3e8:	d1 05       	cpc	r29, r1
     3ea:	b9 f4       	brne	.+46     	; 0x41a <lcd_print+0x74>
	{
		temp = value/1000;
     3ec:	c8 01       	movw	r24, r16
     3ee:	68 ee       	ldi	r22, 0xE8	; 232
     3f0:	73 e0       	ldi	r23, 0x03	; 3
     3f2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     3f6:	cb 01       	movw	r24, r22
     3f8:	70 93 23 02 	sts	0x0223, r23
     3fc:	60 93 22 02 	sts	0x0222, r22
		thousand = temp%10 + 48;
     400:	6a e0       	ldi	r22, 0x0A	; 10
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     408:	c0 96       	adiw	r24, 0x30	; 48
     40a:	90 93 2c 02 	sts	0x022C, r25
     40e:	80 93 2b 02 	sts	0x022B, r24
		lcd_wr_char(thousand);
     412:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
		flag=1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	01 c0       	rjmp	.+2      	; 0x41c <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     41a:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     41c:	c3 30       	cpi	r28, 0x03	; 3
     41e:	d1 05       	cpc	r29, r1
     420:	11 f0       	breq	.+4      	; 0x426 <lcd_print+0x80>
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	b1 f4       	brne	.+44     	; 0x452 <lcd_print+0xac>
	{
		temp = value/100;
     426:	c8 01       	movw	r24, r16
     428:	64 e6       	ldi	r22, 0x64	; 100
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     430:	cb 01       	movw	r24, r22
     432:	70 93 23 02 	sts	0x0223, r23
     436:	60 93 22 02 	sts	0x0222, r22
		hundred = temp%10 + 48;
     43a:	6a e0       	ldi	r22, 0x0A	; 10
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     442:	c0 96       	adiw	r24, 0x30	; 48
     444:	90 93 28 02 	sts	0x0228, r25
     448:	80 93 27 02 	sts	0x0227, r24
		lcd_wr_char(hundred);
     44c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
		flag=1;
     450:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     452:	c2 30       	cpi	r28, 0x02	; 2
     454:	d1 05       	cpc	r29, r1
     456:	11 f0       	breq	.+4      	; 0x45c <lcd_print+0xb6>
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	b1 f4       	brne	.+44     	; 0x488 <lcd_print+0xe2>
	{
		temp = value/10;
     45c:	2a e0       	ldi	r18, 0x0A	; 10
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	c8 01       	movw	r24, r16
     462:	b9 01       	movw	r22, r18
     464:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     468:	cb 01       	movw	r24, r22
     46a:	70 93 23 02 	sts	0x0223, r23
     46e:	60 93 22 02 	sts	0x0222, r22
		tens = temp%10 + 48;
     472:	b9 01       	movw	r22, r18
     474:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     478:	c0 96       	adiw	r24, 0x30	; 48
     47a:	90 93 25 02 	sts	0x0225, r25
     47e:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(tens);
     482:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
		flag=1;
     486:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     488:	c1 30       	cpi	r28, 0x01	; 1
     48a:	d1 05       	cpc	r29, r1
     48c:	11 f0       	breq	.+4      	; 0x492 <lcd_print+0xec>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	61 f4       	brne	.+24     	; 0x4aa <lcd_print+0x104>
	{
		unit = value%10 + 48;
     492:	c8 01       	movw	r24, r16
     494:	6a e0       	ldi	r22, 0x0A	; 10
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__udivmodhi4>
     49c:	c0 96       	adiw	r24, 0x30	; 48
     49e:	90 93 2a 02 	sts	0x022A, r25
     4a2:	80 93 29 02 	sts	0x0229, r24
		lcd_wr_char(unit);
     4a6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
	}
	if(digits>5)
     4aa:	c6 30       	cpi	r28, 0x06	; 6
     4ac:	d1 05       	cpc	r29, r1
     4ae:	1c f0       	brlt	.+6      	; 0x4b6 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     4b0:	85 e4       	ldi	r24, 0x45	; 69
     4b2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
	}
	
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <Left_Encoder_Pin_Configuration>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void Left_Encoder_Pin_Configuration(void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     4c0:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     4c2:	74 9a       	sbi	0x0e, 4	; 14
}
     4c4:	08 95       	ret

000004c6 <Right_Encoder_Pin_Configuration>:


//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void Right_Encoder_Pin_Configuration(void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     4c6:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     4c8:	75 9a       	sbi	0x0e, 5	; 14
}
     4ca:	08 95       	ret

000004cc <Left_Wheel_Interrupt_Pin>:


void Left_Wheel_Interrupt_Pin(void) //Interrupt 4 enable for the Left Wheel
{
    cli(); //Clears the global interrupt
     4cc:	f8 94       	cli
    EICRB = EICRB | 0x02; // Interrupt 4 is set to trigger at each falling edge only
     4ce:	ea e6       	ldi	r30, 0x6A	; 106
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     4d8:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     4da:	78 94       	sei
}
     4dc:	08 95       	ret

000004de <Right_Wheel_Interrupt_Pin>:


void Right_Wheel_Interrupt_Pin(void) //Interrupt 5 enable for the Right Wheel
{
    cli(); //Clears the global interrupt
     4de:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     4e0:	ea e6       	ldi	r30, 0x6A	; 106
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	88 60       	ori	r24, 0x08	; 8
     4e8:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     4ea:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     4ec:	78 94       	sei
}
     4ee:	08 95       	ret

000004f0 <__vector_5>:

//Function for interrupt for the Left Wheel
ISR(INT4_vect)
{
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
    Shaft_Counter_Left_Wheel ++;//It Increases the Left Wheel Counter Shaft value when the Left Wheel Interrupt increases. 
     4fe:	80 91 1c 02 	lds	r24, 0x021C
     502:	90 91 1d 02 	lds	r25, 0x021D
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 1d 02 	sts	0x021D, r25
     50c:	80 93 1c 02 	sts	0x021C, r24
}
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <__vector_6>:

//Function for interrupt for the Left Wheel
ISR(INT5_vect)
{
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	0f 92       	push	r0
     526:	11 24       	eor	r1, r1
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
    Shaft_Counter_Right_Wheel ++;//It Increases the Right Wheel Counter Shaft value when the Right Wheel Interrupt increases.
     52c:	80 91 1e 02 	lds	r24, 0x021E
     530:	90 91 1f 02 	lds	r25, 0x021F
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	90 93 1f 02 	sts	0x021F, r25
     53a:	80 93 1e 02 	sts	0x021E, r24
}
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <Motion_Configurations>:

//Function To Configure all the Motion Configurations.
void Motion_Configurations()
{
    DDRA = 0x0F;//The Last 4 pins of the register A are set as output
     54c:	8f e0       	ldi	r24, 0x0F	; 15
     54e:	81 b9       	out	0x01, r24	; 1
    PORTA = 0x00;//Both wheels at stop;
     550:	12 b8       	out	0x02, r1	; 2
    DDRL = 0x18;//For Enabling Motor Driver IC
     552:	88 e1       	ldi	r24, 0x18	; 24
     554:	80 93 0a 01 	sts	0x010A, r24
    PORTL = 0x18;
     558:	80 93 0b 01 	sts	0x010B, r24

}
     55c:	08 95       	ret

0000055e <ADC_enable>:


void ADC_enable()
{
    DDRF = 0x00;
     55e:	10 ba       	out	0x10, r1	; 16
    DDRK = 0x00;
     560:	10 92 07 01 	sts	0x0107, r1
    ADCSRA = 0x86;
     564:	86 e8       	ldi	r24, 0x86	; 134
     566:	80 93 7a 00 	sts	0x007A, r24
    ADCSRB = 0x00;
     56a:	10 92 7b 00 	sts	0x007B, r1
    ADMUX = 0x20;
     56e:	80 e2       	ldi	r24, 0x20	; 32
     570:	80 93 7c 00 	sts	0x007C, r24
    ACSR = 0x80;
     574:	80 e8       	ldi	r24, 0x80	; 128
     576:	80 bf       	out	0x30, r24	; 48
}
     578:	08 95       	ret

0000057a <init_devices>:


void init_devices()
{
    DDRC = 0xF7;
     57a:	87 ef       	ldi	r24, 0xF7	; 247
     57c:	87 b9       	out	0x07, r24	; 7
    PORTC = 0x28;
     57e:	88 e2       	ldi	r24, 0x28	; 40
     580:	88 b9       	out	0x08, r24	; 8
}
     582:	08 95       	ret

00000584 <uart0_init>:


void uart0_init(void)
{
    UCSR0B = 0x00; //disable while setting baud rate
     584:	e1 ec       	ldi	r30, 0xC1	; 193
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	10 82       	st	Z, r1
    UCSR0A = 0x00;
     58a:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0C = 0x06;
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	80 93 c2 00 	sts	0x00C2, r24
    UBRR0L = 0x5F; //set baud rate lo
     594:	8f e5       	ldi	r24, 0x5F	; 95
     596:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = 0x00; //set baud rate hi
     59a:	10 92 c5 00 	sts	0x00C5, r1
    UCSR0B = 0x98;
     59e:	88 e9       	ldi	r24, 0x98	; 152
     5a0:	80 83       	st	Z, r24
}
     5a2:	08 95       	ret

000005a4 <initialize>:


void initialize()
{
    Motion_Configurations();
     5a4:	0e 94 a6 02 	call	0x54c	; 0x54c <Motion_Configurations>
    ADC_enable();
     5a8:	0e 94 af 02 	call	0x55e	; 0x55e <ADC_enable>
    init_devices();
     5ac:	0e 94 bd 02 	call	0x57a	; 0x57a <init_devices>

    cli();
     5b0:	f8 94       	cli

    Left_Encoder_Pin_Configuration();
     5b2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Left_Encoder_Pin_Configuration>
    Right_Encoder_Pin_Configuration();
     5b6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <Right_Encoder_Pin_Configuration>
    Right_Wheel_Interrupt_Pin();
     5ba:	0e 94 6f 02 	call	0x4de	; 0x4de <Right_Wheel_Interrupt_Pin>
    Left_Wheel_Interrupt_Pin();
     5be:	0e 94 66 02 	call	0x4cc	; 0x4cc <Left_Wheel_Interrupt_Pin>

    sei();
     5c2:	78 94       	sei

}
     5c4:	08 95       	ret

000005c6 <init_xbee>:


void init_xbee()
{
    cli();
     5c6:	f8 94       	cli
    uart0_init(); //Initialize UART1 for serial communication
     5c8:	0e 94 c2 02 	call	0x584	; 0x584 <uart0_init>
    sei();
     5cc:	78 94       	sei
}
     5ce:	08 95       	ret

000005d0 <Read_Sensor>:

unsigned char Read_Sensor(unsigned char channel)
{
    unsigned char reading;

    if(channel>7)
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	18 f0       	brcs	.+6      	; 0x5da <Read_Sensor+0xa>
    {
        ADCSRB = 0x08;
     5d4:	98 e0       	ldi	r25, 0x08	; 8
     5d6:	90 93 7b 00 	sts	0x007B, r25
    }

    channel = channel & 0x07;
     5da:	87 70       	andi	r24, 0x07	; 7

    ADMUX= 0x20 | channel;
     5dc:	80 62       	ori	r24, 0x20	; 32
     5de:	80 93 7c 00 	sts	0x007C, r24

    ADCSRA = ADCSRA | 0x40; //Set start conversion bit
     5e2:	ea e7       	ldi	r30, 0x7A	; 122
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	80 83       	st	Z, r24

    while((ADCSRA&0x10)==0) {} //Wait for ADC conversion to complete
     5ec:	80 81       	ld	r24, Z
     5ee:	84 ff       	sbrs	r24, 4
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <Read_Sensor+0x1c>

    reading=ADCH;
     5f2:	80 91 79 00 	lds	r24, 0x0079

    ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     5f6:	ea e7       	ldi	r30, 0x7A	; 122
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	90 81       	ld	r25, Z
     5fc:	90 61       	ori	r25, 0x10	; 16
     5fe:	90 83       	st	Z, r25

    ADCSRB = 0x00;
     600:	10 92 7b 00 	sts	0x007B, r1

    return reading;

}
     604:	08 95       	ret

00000606 <forward_motion>:



void forward_motion()
{
    PORTA = 0x06;
     606:	86 e0       	ldi	r24, 0x06	; 6
     608:	82 b9       	out	0x02, r24	; 2
}
     60a:	08 95       	ret

0000060c <backward_motion>:

void backward_motion()
{
    PORTA = 0x09;
     60c:	89 e0       	ldi	r24, 0x09	; 9
     60e:	82 b9       	out	0x02, r24	; 2
}
     610:	08 95       	ret

00000612 <left_motion>:

void left_motion()                            // Motion functions: moving the bot forward, reverse, left and right
{
    PORTA = 0x05;
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	82 b9       	out	0x02, r24	; 2
}
     616:	08 95       	ret

00000618 <right_motion>:

void right_motion()
{
    PORTA = 0x0A;
     618:	8a e0       	ldi	r24, 0x0A	; 10
     61a:	82 b9       	out	0x02, r24	; 2
}
     61c:	08 95       	ret

0000061e <stop_motion>:

void stop_motion()
{
    PORTA = 0x00;
     61e:	12 b8       	out	0x02, r1	; 2
}
     620:	08 95       	ret

00000622 <velocity>:



void velocity (unsigned char left_motor, unsigned char right_motor)
{
    OCR5AL = (unsigned char)left_motor;
     622:	80 93 28 01 	sts	0x0128, r24
    OCR5BL = (unsigned char)right_motor;
     626:	60 93 2a 01 	sts	0x012A, r22
}
     62a:	08 95       	ret

0000062c <get_angle>:



double get_angle()                               // Return the angle turned by the bot
{
    double angle = 4.090*(Shaft_Counter_Right_Wheel + Shaft_Counter_Left_Wheel)/2;
     62c:	60 91 1e 02 	lds	r22, 0x021E
     630:	70 91 1f 02 	lds	r23, 0x021F
     634:	80 91 1c 02 	lds	r24, 0x021C
     638:	90 91 1d 02 	lds	r25, 0x021D
     63c:	68 0f       	add	r22, r24
     63e:	79 1f       	adc	r23, r25
     640:	88 27       	eor	r24, r24
     642:	77 fd       	sbrc	r23, 7
     644:	80 95       	com	r24
     646:	98 2f       	mov	r25, r24
     648:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     64c:	28 e4       	ldi	r18, 0x48	; 72
     64e:	31 ee       	ldi	r19, 0xE1	; 225
     650:	42 e8       	ldi	r20, 0x82	; 130
     652:	50 e4       	ldi	r21, 0x40	; 64
     654:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	5f e3       	ldi	r21, 0x3F	; 63
     660:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    return angle;
}
     664:	46 2f       	mov	r20, r22
     666:	57 2f       	mov	r21, r23
     668:	68 2f       	mov	r22, r24
     66a:	79 2f       	mov	r23, r25
     66c:	cb 01       	movw	r24, r22
     66e:	ba 01       	movw	r22, r20
     670:	08 95       	ret

00000672 <Left_Rotation_Degrees>:



void Left_Rotation_Degrees(int Degrees)
{
     672:	6f 92       	push	r6
     674:	7f 92       	push	r7
     676:	8f 92       	push	r8
     678:	9f 92       	push	r9
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	8c 01       	movw	r16, r24
    init_x = current_x;
     690:	80 91 18 02 	lds	r24, 0x0218
     694:	90 91 19 02 	lds	r25, 0x0219
     698:	a0 91 1a 02 	lds	r26, 0x021A
     69c:	b0 91 1b 02 	lds	r27, 0x021B
     6a0:	80 93 0c 02 	sts	0x020C, r24
     6a4:	90 93 0d 02 	sts	0x020D, r25
     6a8:	a0 93 0e 02 	sts	0x020E, r26
     6ac:	b0 93 0f 02 	sts	0x020F, r27
    init_y = current_y;
     6b0:	80 91 14 02 	lds	r24, 0x0214
     6b4:	90 91 15 02 	lds	r25, 0x0215
     6b8:	a0 91 16 02 	lds	r26, 0x0216
     6bc:	b0 91 17 02 	lds	r27, 0x0217
     6c0:	80 93 08 02 	sts	0x0208, r24
     6c4:	90 93 09 02 	sts	0x0209, r25
     6c8:	a0 93 0a 02 	sts	0x020A, r26
     6cc:	b0 93 0b 02 	sts	0x020B, r27
    /*************************
    88 pulses for 360 degrees rotation 4.090 degrees per count

    *************************/

    left_motion(); //Turn left
     6d0:	0e 94 09 03 	call	0x612	; 0x612 <left_motion>

    float Reqd_Shaft_Counter = (float) Degrees/ 4.090; // division by resolution to get shaft count
     6d4:	b8 01       	movw	r22, r16
     6d6:	88 27       	eor	r24, r24
     6d8:	77 fd       	sbrc	r23, 7
     6da:	80 95       	com	r24
     6dc:	98 2f       	mov	r25, r24
     6de:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     6e2:	28 e4       	ldi	r18, 0x48	; 72
     6e4:	31 ee       	ldi	r19, 0xE1	; 225
     6e6:	42 e8       	ldi	r20, 0x82	; 130
     6e8:	50 e4       	ldi	r21, 0x40	; 64
     6ea:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3>
    Reqd_Shaft_Counter = (unsigned int) Reqd_Shaft_Counter;
     6ee:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     6fa:	c6 2f       	mov	r28, r22
     6fc:	d7 2f       	mov	r29, r23
     6fe:	b8 2e       	mov	r11, r24
     700:	a9 2e       	mov	r10, r25
    Shaft_Counter_Left_Wheel = 0;
     702:	10 92 1d 02 	sts	0x021D, r1
     706:	10 92 1c 02 	sts	0x021C, r1
    Shaft_Counter_Right_Wheel = 0;
     70a:	10 92 1f 02 	sts	0x021F, r1
     70e:	10 92 1e 02 	sts	0x021E, r1
    double initial_theta = current_theta;                      // Rotate bot to the left by a specified angle
     712:	c0 90 10 02 	lds	r12, 0x0210
     716:	d0 90 11 02 	lds	r13, 0x0211
     71a:	e0 90 12 02 	lds	r14, 0x0212
     71e:	f0 90 13 02 	lds	r15, 0x0213
            lcd_print(1,2,(-1 * current_theta),4);
        }
        else
        {
            lcd_cursor(1,1);
            lcd_string("+");
     722:	0f 2e       	mov	r0, r31
     724:	f2 e0       	ldi	r31, 0x02	; 2
     726:	8f 2e       	mov	r8, r31
     728:	f2 e0       	ldi	r31, 0x02	; 2
     72a:	9f 2e       	mov	r9, r31
     72c:	f0 2d       	mov	r31, r0
    {
        current_theta = initial_theta - get_angle();
        if(current_theta<0)
        {
            lcd_cursor(1,1);
            lcd_string("-");
     72e:	0f 2e       	mov	r0, r31
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	6f 2e       	mov	r6, r31
     734:	f2 e0       	ldi	r31, 0x02	; 2
     736:	7f 2e       	mov	r7, r31
     738:	f0 2d       	mov	r31, r0
    double initial_theta = current_theta;                      // Rotate bot to the left by a specified angle
    // The angle rotated is measured using data from the shaft encoders

    while (1)
    {
        current_theta = initial_theta - get_angle();
     73a:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__subsf3>
     74a:	26 2f       	mov	r18, r22
     74c:	37 2f       	mov	r19, r23
     74e:	f8 2f       	mov	r31, r24
     750:	e9 2f       	mov	r30, r25
     752:	46 2f       	mov	r20, r22
     754:	57 2f       	mov	r21, r23
     756:	68 2f       	mov	r22, r24
     758:	79 2f       	mov	r23, r25
     75a:	40 93 10 02 	sts	0x0210, r20
     75e:	50 93 11 02 	sts	0x0211, r21
     762:	60 93 12 02 	sts	0x0212, r22
     766:	70 93 13 02 	sts	0x0213, r23
        if(current_theta<0)
     76a:	82 2f       	mov	r24, r18
     76c:	93 2f       	mov	r25, r19
     76e:	af 2f       	mov	r26, r31
     770:	be 2f       	mov	r27, r30
     772:	bc 01       	movw	r22, r24
     774:	cd 01       	movw	r24, r26
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	a9 01       	movw	r20, r18
     77c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
     780:	88 23       	and	r24, r24
     782:	f4 f4       	brge	.+60     	; 0x7c0 <Left_Rotation_Degrees+0x14e>
        {
            lcd_cursor(1,1);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
     78c:	c3 01       	movw	r24, r6
     78e:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,2,(-1 * current_theta),4);
     792:	80 91 10 02 	lds	r24, 0x0210
     796:	90 91 11 02 	lds	r25, 0x0211
     79a:	a0 91 12 02 	lds	r26, 0x0212
     79e:	b0 91 13 02 	lds	r27, 0x0213
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	90 58       	subi	r25, 0x80	; 128
     7a8:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     7ac:	8b 01       	movw	r16, r22
     7ae:	9c 01       	movw	r18, r24
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	a8 01       	movw	r20, r16
     7b6:	24 e0       	ldi	r18, 0x04	; 4
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
     7be:	1a c0       	rjmp	.+52     	; 0x7f4 <Left_Rotation_Degrees+0x182>
        }
        else
        {
            lcd_cursor(1,1);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
     7c8:	c4 01       	movw	r24, r8
     7ca:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,2,current_theta,4);
     7ce:	60 91 10 02 	lds	r22, 0x0210
     7d2:	70 91 11 02 	lds	r23, 0x0211
     7d6:	80 91 12 02 	lds	r24, 0x0212
     7da:	90 91 13 02 	lds	r25, 0x0213
     7de:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     7e2:	8b 01       	movw	r16, r22
     7e4:	9c 01       	movw	r18, r24
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	62 e0       	ldi	r22, 0x02	; 2
     7ea:	a8 01       	movw	r20, r16
     7ec:	24 e0       	ldi	r18, 0x04	; 4
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
        if((Shaft_Counter_Right_Wheel+Shaft_Counter_Left_Wheel)/2 >= Reqd_Shaft_Counter)
     7f4:	60 91 1e 02 	lds	r22, 0x021E
     7f8:	70 91 1f 02 	lds	r23, 0x021F
     7fc:	80 91 1c 02 	lds	r24, 0x021C
     800:	90 91 1d 02 	lds	r25, 0x021D
     804:	68 0f       	add	r22, r24
     806:	79 1f       	adc	r23, r25
     808:	77 23       	and	r23, r23
     80a:	14 f4       	brge	.+4      	; 0x810 <Left_Rotation_Degrees+0x19e>
     80c:	6f 5f       	subi	r22, 0xFF	; 255
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	75 95       	asr	r23
     812:	67 95       	ror	r22
     814:	88 27       	eor	r24, r24
     816:	77 fd       	sbrc	r23, 7
     818:	80 95       	com	r24
     81a:	98 2f       	mov	r25, r24
     81c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     820:	0c 2f       	mov	r16, r28
     822:	1d 2f       	mov	r17, r29
     824:	2b 2d       	mov	r18, r11
     826:	3a 2d       	mov	r19, r10
     828:	a9 01       	movw	r20, r18
     82a:	98 01       	movw	r18, r16
     82c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
     830:	88 23       	and	r24, r24
     832:	0c f4       	brge	.+2      	; 0x836 <Left_Rotation_Degrees+0x1c4>
     834:	82 cf       	rjmp	.-252    	; 0x73a <Left_Rotation_Degrees+0xc8>
            break;
    }
    stop_motion();
     836:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	7f 90       	pop	r7
     854:	6f 90       	pop	r6
     856:	08 95       	ret

00000858 <Right_Rotation_Degrees>:



void Right_Rotation_Degrees(int Degrees)
{
     858:	6f 92       	push	r6
     85a:	7f 92       	push	r7
     85c:	8f 92       	push	r8
     85e:	9f 92       	push	r9
     860:	af 92       	push	r10
     862:	bf 92       	push	r11
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	8c 01       	movw	r16, r24
    init_x = current_x;
     876:	80 91 18 02 	lds	r24, 0x0218
     87a:	90 91 19 02 	lds	r25, 0x0219
     87e:	a0 91 1a 02 	lds	r26, 0x021A
     882:	b0 91 1b 02 	lds	r27, 0x021B
     886:	80 93 0c 02 	sts	0x020C, r24
     88a:	90 93 0d 02 	sts	0x020D, r25
     88e:	a0 93 0e 02 	sts	0x020E, r26
     892:	b0 93 0f 02 	sts	0x020F, r27
    init_y = current_y;
     896:	80 91 14 02 	lds	r24, 0x0214
     89a:	90 91 15 02 	lds	r25, 0x0215
     89e:	a0 91 16 02 	lds	r26, 0x0216
     8a2:	b0 91 17 02 	lds	r27, 0x0217
     8a6:	80 93 08 02 	sts	0x0208, r24
     8aa:	90 93 09 02 	sts	0x0209, r25
     8ae:	a0 93 0a 02 	sts	0x020A, r26
     8b2:	b0 93 0b 02 	sts	0x020B, r27
    /*******************
    88 pulses for 360 degrees rotation 4.090 degrees per count

    ********************/

    right_motion(); //Turn right
     8b6:	0e 94 0c 03 	call	0x618	; 0x618 <right_motion>

    float Reqd_Shaft_Counter = (float) Degrees/ 4.090; // division by resolution to get shaft count
     8ba:	b8 01       	movw	r22, r16
     8bc:	88 27       	eor	r24, r24
     8be:	77 fd       	sbrc	r23, 7
     8c0:	80 95       	com	r24
     8c2:	98 2f       	mov	r25, r24
     8c4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     8c8:	28 e4       	ldi	r18, 0x48	; 72
     8ca:	31 ee       	ldi	r19, 0xE1	; 225
     8cc:	42 e8       	ldi	r20, 0x82	; 130
     8ce:	50 e4       	ldi	r21, 0x40	; 64
     8d0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3>
    Reqd_Shaft_Counter = (unsigned int) Reqd_Shaft_Counter;
     8d4:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     8e0:	c6 2f       	mov	r28, r22
     8e2:	d7 2f       	mov	r29, r23
     8e4:	b8 2e       	mov	r11, r24
     8e6:	a9 2e       	mov	r10, r25
    Shaft_Counter_Left_Wheel = 0;
     8e8:	10 92 1d 02 	sts	0x021D, r1
     8ec:	10 92 1c 02 	sts	0x021C, r1
    Shaft_Counter_Right_Wheel = 0;
     8f0:	10 92 1f 02 	sts	0x021F, r1
     8f4:	10 92 1e 02 	sts	0x021E, r1
    double initial_theta = current_theta;
     8f8:	c0 90 10 02 	lds	r12, 0x0210
     8fc:	d0 90 11 02 	lds	r13, 0x0211
     900:	e0 90 12 02 	lds	r14, 0x0212
     904:	f0 90 13 02 	lds	r15, 0x0213
            lcd_print(1,2,(-1 * current_theta),4);
        }
        else
        {
            lcd_cursor(1,1);
            lcd_string("+");
     908:	0f 2e       	mov	r0, r31
     90a:	f2 e0       	ldi	r31, 0x02	; 2
     90c:	8f 2e       	mov	r8, r31
     90e:	f2 e0       	ldi	r31, 0x02	; 2
     910:	9f 2e       	mov	r9, r31
     912:	f0 2d       	mov	r31, r0
    {
        current_theta = initial_theta + get_angle();
        if(current_theta<0)
        {
            lcd_cursor(1,1);
            lcd_string("-");
     914:	0f 2e       	mov	r0, r31
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	6f 2e       	mov	r6, r31
     91a:	f2 e0       	ldi	r31, 0x02	; 2
     91c:	7f 2e       	mov	r7, r31
     91e:	f0 2d       	mov	r31, r0
    double initial_theta = current_theta;
    // Rotate bot to the right by a specified angle
    // The angle rotated is measured using data from the shaft encoders
    while (1)
    {
        current_theta = initial_theta + get_angle();
     920:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
     92c:	26 2f       	mov	r18, r22
     92e:	37 2f       	mov	r19, r23
     930:	f8 2f       	mov	r31, r24
     932:	e9 2f       	mov	r30, r25
     934:	46 2f       	mov	r20, r22
     936:	57 2f       	mov	r21, r23
     938:	68 2f       	mov	r22, r24
     93a:	79 2f       	mov	r23, r25
     93c:	40 93 10 02 	sts	0x0210, r20
     940:	50 93 11 02 	sts	0x0211, r21
     944:	60 93 12 02 	sts	0x0212, r22
     948:	70 93 13 02 	sts	0x0213, r23
        if(current_theta<0)
     94c:	82 2f       	mov	r24, r18
     94e:	93 2f       	mov	r25, r19
     950:	af 2f       	mov	r26, r31
     952:	be 2f       	mov	r27, r30
     954:	bc 01       	movw	r22, r24
     956:	cd 01       	movw	r24, r26
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	a9 01       	movw	r20, r18
     95e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
     962:	88 23       	and	r24, r24
     964:	f4 f4       	brge	.+60     	; 0x9a2 <Right_Rotation_Degrees+0x14a>
        {
            lcd_cursor(1,1);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
     96e:	c3 01       	movw	r24, r6
     970:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,2,(-1 * current_theta),4);
     974:	80 91 10 02 	lds	r24, 0x0210
     978:	90 91 11 02 	lds	r25, 0x0211
     97c:	a0 91 12 02 	lds	r26, 0x0212
     980:	b0 91 13 02 	lds	r27, 0x0213
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	90 58       	subi	r25, 0x80	; 128
     98a:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     98e:	8b 01       	movw	r16, r22
     990:	9c 01       	movw	r18, r24
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	62 e0       	ldi	r22, 0x02	; 2
     996:	a8 01       	movw	r20, r16
     998:	24 e0       	ldi	r18, 0x04	; 4
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
     9a0:	1a c0       	rjmp	.+52     	; 0x9d6 <Right_Rotation_Degrees+0x17e>
        }
        else
        {
            lcd_cursor(1,1);
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
     9aa:	c4 01       	movw	r24, r8
     9ac:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,2,current_theta,4);
     9b0:	60 91 10 02 	lds	r22, 0x0210
     9b4:	70 91 11 02 	lds	r23, 0x0211
     9b8:	80 91 12 02 	lds	r24, 0x0212
     9bc:	90 91 13 02 	lds	r25, 0x0213
     9c0:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     9c4:	8b 01       	movw	r16, r22
     9c6:	9c 01       	movw	r18, r24
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	62 e0       	ldi	r22, 0x02	; 2
     9cc:	a8 01       	movw	r20, r16
     9ce:	24 e0       	ldi	r18, 0x04	; 4
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
        if((Shaft_Counter_Right_Wheel+Shaft_Counter_Left_Wheel)/2 >= Reqd_Shaft_Counter)
     9d6:	60 91 1e 02 	lds	r22, 0x021E
     9da:	70 91 1f 02 	lds	r23, 0x021F
     9de:	80 91 1c 02 	lds	r24, 0x021C
     9e2:	90 91 1d 02 	lds	r25, 0x021D
     9e6:	68 0f       	add	r22, r24
     9e8:	79 1f       	adc	r23, r25
     9ea:	77 23       	and	r23, r23
     9ec:	14 f4       	brge	.+4      	; 0x9f2 <Right_Rotation_Degrees+0x19a>
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	75 95       	asr	r23
     9f4:	67 95       	ror	r22
     9f6:	88 27       	eor	r24, r24
     9f8:	77 fd       	sbrc	r23, 7
     9fa:	80 95       	com	r24
     9fc:	98 2f       	mov	r25, r24
     9fe:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     a02:	0c 2f       	mov	r16, r28
     a04:	1d 2f       	mov	r17, r29
     a06:	2b 2d       	mov	r18, r11
     a08:	3a 2d       	mov	r19, r10
     a0a:	a9 01       	movw	r20, r18
     a0c:	98 01       	movw	r18, r16
     a0e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
     a12:	88 23       	and	r24, r24
     a14:	0c f4       	brge	.+2      	; 0xa18 <Right_Rotation_Degrees+0x1c0>
     a16:	84 cf       	rjmp	.-248    	; 0x920 <Right_Rotation_Degrees+0xc8>
            break;
    }
    stop_motion();
     a18:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>

}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	9f 90       	pop	r9
     a32:	8f 90       	pop	r8
     a34:	7f 90       	pop	r7
     a36:	6f 90       	pop	r6
     a38:	08 95       	ret

00000a3a <convert>:



unsigned int convert(unsigned char reading)                   // Convert the character reading from the ADC to intger value
{
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
    int dist;
    dist = (int)(10.00*(2799.6*(1.00/(pow(reading,1.1546)))));
     a3e:	68 2f       	mov	r22, r24
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     a4a:	2f ee       	ldi	r18, 0xEF	; 239
     a4c:	39 ec       	ldi	r19, 0xC9	; 201
     a4e:	43 e9       	ldi	r20, 0x93	; 147
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <pow>
     a56:	b6 2f       	mov	r27, r22
     a58:	a7 2f       	mov	r26, r23
     a5a:	38 2f       	mov	r19, r24
     a5c:	29 2f       	mov	r18, r25
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e8       	ldi	r24, 0x80	; 128
     a64:	9f e3       	ldi	r25, 0x3F	; 63
     a66:	42 2f       	mov	r20, r18
     a68:	0b 2f       	mov	r16, r27
     a6a:	1a 2f       	mov	r17, r26
     a6c:	23 2f       	mov	r18, r19
     a6e:	34 2f       	mov	r19, r20
     a70:	a9 01       	movw	r20, r18
     a72:	98 01       	movw	r18, r16
     a74:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3>
     a78:	2a e9       	ldi	r18, 0x9A	; 154
     a7a:	39 ef       	ldi	r19, 0xF9	; 249
     a7c:	4e e2       	ldi	r20, 0x2E	; 46
     a7e:	55 e4       	ldi	r21, 0x45	; 69
     a80:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e2       	ldi	r20, 0x20	; 32
     a8a:	51 e4       	ldi	r21, 0x41	; 65
     a8c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     a90:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fixsfsi>
    return dist;

}
     a94:	86 2f       	mov	r24, r22
     a96:	97 2f       	mov	r25, r23
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <coordinate_calculation>:



void coordinate_calculation(double r)
{
     a9e:	8f 92       	push	r8
     aa0:	9f 92       	push	r9
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
    current_x =  init_x + r*sin(current_theta*pi/180.0);             // Calculate coordinates of the bot. Changing coordinates to cartesian system from polar coordinates 
     aba:	60 91 10 02 	lds	r22, 0x0210
     abe:	70 91 11 02 	lds	r23, 0x0211
     ac2:	80 91 12 02 	lds	r24, 0x0212
     ac6:	90 91 13 02 	lds	r25, 0x0213
     aca:	2c e7       	ldi	r18, 0x7C	; 124
     acc:	3f e0       	ldi	r19, 0x0F	; 15
     ace:	49 e4       	ldi	r20, 0x49	; 73
     ad0:	50 e4       	ldi	r21, 0x40	; 64
     ad2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	44 e3       	ldi	r20, 0x34	; 52
     adc:	53 e4       	ldi	r21, 0x43	; 67
     ade:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3>
     ae2:	d6 2f       	mov	r29, r22
     ae4:	c7 2f       	mov	r28, r23
     ae6:	18 2f       	mov	r17, r24
     ae8:	09 2f       	mov	r16, r25
     aea:	86 2f       	mov	r24, r22
     aec:	9c 2f       	mov	r25, r28
     aee:	a1 2f       	mov	r26, r17
     af0:	b0 2f       	mov	r27, r16
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <sin>
     afa:	a7 01       	movw	r20, r14
     afc:	96 01       	movw	r18, r12
     afe:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     b02:	20 91 0c 02 	lds	r18, 0x020C
     b06:	30 91 0d 02 	lds	r19, 0x020D
     b0a:	40 91 0e 02 	lds	r20, 0x020E
     b0e:	50 91 0f 02 	lds	r21, 0x020F
     b12:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
     b16:	b6 2e       	mov	r11, r22
     b18:	a7 2e       	mov	r10, r23
     b1a:	98 2e       	mov	r9, r24
     b1c:	89 2e       	mov	r8, r25
     b1e:	86 2f       	mov	r24, r22
     b20:	9a 2d       	mov	r25, r10
     b22:	a9 2d       	mov	r26, r9
     b24:	b8 2d       	mov	r27, r8
     b26:	80 93 18 02 	sts	0x0218, r24
     b2a:	90 93 19 02 	sts	0x0219, r25
     b2e:	a0 93 1a 02 	sts	0x021A, r26
     b32:	b0 93 1b 02 	sts	0x021B, r27
    current_y =  init_y + r*cos(current_theta*pi/180.0);
     b36:	8d 2f       	mov	r24, r29
     b38:	9c 2f       	mov	r25, r28
     b3a:	a1 2f       	mov	r26, r17
     b3c:	b0 2f       	mov	r27, r16
     b3e:	bc 01       	movw	r22, r24
     b40:	cd 01       	movw	r24, r26
     b42:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <cos>
     b46:	a7 01       	movw	r20, r14
     b48:	96 01       	movw	r18, r12
     b4a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     b4e:	20 91 08 02 	lds	r18, 0x0208
     b52:	30 91 09 02 	lds	r19, 0x0209
     b56:	40 91 0a 02 	lds	r20, 0x020A
     b5a:	50 91 0b 02 	lds	r21, 0x020B
     b5e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	80 93 14 02 	sts	0x0214, r24
     b6a:	90 93 15 02 	sts	0x0215, r25
     b6e:	a0 93 16 02 	sts	0x0216, r26
     b72:	b0 93 17 02 	sts	0x0217, r27
    if(current_x >= 0)
     b76:	8b 2d       	mov	r24, r11
     b78:	9a 2d       	mov	r25, r10
     b7a:	a9 2d       	mov	r26, r9
     b7c:	b8 2d       	mov	r27, r8
     b7e:	bc 01       	movw	r22, r24
     b80:	cd 01       	movw	r24, r26
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	a9 01       	movw	r20, r18
     b88:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
     b8c:	88 23       	and	r24, r24
     b8e:	dc f0       	brlt	.+54     	; 0xbc6 <coordinate_calculation+0x128>
    {
        lcd_cursor(1,13);											 //Printing the x-coordinate on the LCD
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	6d e0       	ldi	r22, 0x0D	; 13
     b94:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("+");
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(1,13,current_x,4);
     ba0:	60 91 18 02 	lds	r22, 0x0218
     ba4:	70 91 19 02 	lds	r23, 0x0219
     ba8:	80 91 1a 02 	lds	r24, 0x021A
     bac:	90 91 1b 02 	lds	r25, 0x021B
     bb0:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     bb4:	8b 01       	movw	r16, r22
     bb6:	9c 01       	movw	r18, r24
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	6d e0       	ldi	r22, 0x0D	; 13
     bbc:	a8 01       	movw	r20, r16
     bbe:	24 e0       	ldi	r18, 0x04	; 4
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }
    if(current_x < 0)
     bc6:	60 91 18 02 	lds	r22, 0x0218
     bca:	70 91 19 02 	lds	r23, 0x0219
     bce:	80 91 1a 02 	lds	r24, 0x021A
     bd2:	90 91 1b 02 	lds	r25, 0x021B
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	a9 01       	movw	r20, r18
     bdc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
     be0:	88 23       	and	r24, r24
     be2:	f4 f4       	brge	.+60     	; 0xc20 <coordinate_calculation+0x182>
    {
        lcd_cursor(1,13);
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	6d e0       	ldi	r22, 0x0D	; 13
     be8:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("-");
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(1,13,(-1 * current_x),4);
     bf4:	80 91 18 02 	lds	r24, 0x0218
     bf8:	90 91 19 02 	lds	r25, 0x0219
     bfc:	a0 91 1a 02 	lds	r26, 0x021A
     c00:	b0 91 1b 02 	lds	r27, 0x021B
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	90 58       	subi	r25, 0x80	; 128
     c0a:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     c0e:	8b 01       	movw	r16, r22
     c10:	9c 01       	movw	r18, r24
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	6d e0       	ldi	r22, 0x0D	; 13
     c16:	a8 01       	movw	r20, r16
     c18:	24 e0       	ldi	r18, 0x04	; 4
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }
    if(current_y >= 0)												 //Printing the y-coordinate on the LCD
     c20:	60 91 14 02 	lds	r22, 0x0214
     c24:	70 91 15 02 	lds	r23, 0x0215
     c28:	80 91 16 02 	lds	r24, 0x0216
     c2c:	90 91 17 02 	lds	r25, 0x0217
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	a9 01       	movw	r20, r18
     c36:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
     c3a:	88 23       	and	r24, r24
     c3c:	dc f0       	brlt	.+54     	; 0xc74 <coordinate_calculation+0x1d6>
    {
        lcd_cursor(2,13);
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	6d e0       	ldi	r22, 0x0D	; 13
     c42:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("+");
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(2,13,current_y,4);
     c4e:	60 91 14 02 	lds	r22, 0x0214
     c52:	70 91 15 02 	lds	r23, 0x0215
     c56:	80 91 16 02 	lds	r24, 0x0216
     c5a:	90 91 17 02 	lds	r25, 0x0217
     c5e:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     c62:	8b 01       	movw	r16, r22
     c64:	9c 01       	movw	r18, r24
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	6d e0       	ldi	r22, 0x0D	; 13
     c6a:	a8 01       	movw	r20, r16
     c6c:	24 e0       	ldi	r18, 0x04	; 4
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }
    if(current_y < 0)
     c74:	60 91 14 02 	lds	r22, 0x0214
     c78:	70 91 15 02 	lds	r23, 0x0215
     c7c:	80 91 16 02 	lds	r24, 0x0216
     c80:	90 91 17 02 	lds	r25, 0x0217
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	a9 01       	movw	r20, r18
     c8a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
     c8e:	88 23       	and	r24, r24
     c90:	f4 f4       	brge	.+60     	; 0xcce <coordinate_calculation+0x230>
    {
        lcd_cursor(2,13);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	6d e0       	ldi	r22, 0x0D	; 13
     c96:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("-");
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(2,13,(-1 * current_y),4);
     ca2:	80 91 14 02 	lds	r24, 0x0214
     ca6:	90 91 15 02 	lds	r25, 0x0215
     caa:	a0 91 16 02 	lds	r26, 0x0216
     cae:	b0 91 17 02 	lds	r27, 0x0217
     cb2:	bc 01       	movw	r22, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	90 58       	subi	r25, 0x80	; 128
     cb8:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     cbc:	8b 01       	movw	r16, r22
     cbe:	9c 01       	movw	r18, r24
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	6d e0       	ldi	r22, 0x0D	; 13
     cc4:	a8 01       	movw	r20, r16
     cc6:	24 e0       	ldi	r18, 0x04	; 4
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }

}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	08 95       	ret

00000ce8 <get_dist>:



double get_dist()
{
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
      88 pulses for 360 degree rotation  =>  88 pulses for 2*pi*7.6 = 47.8 cm
    Thus, 0.54 cm per count

    *********************************************/

    double distance_travelled_till_yet = 0.54*(Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)/2;           // Calculate distance covered using data from the shaft encoders
     cf8:	60 91 1c 02 	lds	r22, 0x021C
     cfc:	70 91 1d 02 	lds	r23, 0x021D
     d00:	80 91 1e 02 	lds	r24, 0x021E
     d04:	90 91 1f 02 	lds	r25, 0x021F
     d08:	68 0f       	add	r22, r24
     d0a:	79 1f       	adc	r23, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	77 fd       	sbrc	r23, 7
     d10:	80 95       	com	r24
     d12:	98 2f       	mov	r25, r24
     d14:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
     d18:	21 e7       	ldi	r18, 0x71	; 113
     d1a:	3d e3       	ldi	r19, 0x3D	; 61
     d1c:	4a e0       	ldi	r20, 0x0A	; 10
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     d30:	06 2f       	mov	r16, r22
     d32:	17 2f       	mov	r17, r23
     d34:	d8 2f       	mov	r29, r24
     d36:	c9 2f       	mov	r28, r25

    coordinate_calculation(distance_travelled_till_yet);                    // Also update coordinates of the bot
     d38:	86 2f       	mov	r24, r22
     d3a:	91 2f       	mov	r25, r17
     d3c:	ad 2f       	mov	r26, r29
     d3e:	bc 2f       	mov	r27, r28
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 4f 05 	call	0xa9e	; 0xa9e <coordinate_calculation>

    lcd_print(1,2,distance_travelled_till_yet,5);
     d48:	80 2f       	mov	r24, r16
     d4a:	91 2f       	mov	r25, r17
     d4c:	ad 2f       	mov	r26, r29
     d4e:	bc 2f       	mov	r27, r28
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     d58:	6b 01       	movw	r12, r22
     d5a:	7c 01       	movw	r14, r24
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	62 e0       	ldi	r22, 0x02	; 2
     d60:	a6 01       	movw	r20, r12
     d62:	25 e0       	ldi	r18, 0x05	; 5
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>

    return distance_travelled_till_yet;
}
     d6a:	80 2f       	mov	r24, r16
     d6c:	91 2f       	mov	r25, r17
     d6e:	ad 2f       	mov	r26, r29
     d70:	bc 2f       	mov	r27, r28
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <check_dist_travelled>:



void check_dist_travelled(unsigned int dist)
{
     d88:	8f 92       	push	r8
     d8a:	9f 92       	push	r9
     d8c:	af 92       	push	r10
     d8e:	bf 92       	push	r11
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
    Shaft_Counter_Left_Wheel = 0;
     d9e:	10 92 1d 02 	sts	0x021D, r1
     da2:	10 92 1c 02 	sts	0x021C, r1

    Shaft_Counter_Right_Wheel = 0;                      // Keep track of the distance traveled by the bot from the starting point
     da6:	10 92 1f 02 	sts	0x021F, r1
     daa:	10 92 1e 02 	sts	0x021E, r1
        if (distance<reference_distance)
        {
            avoiding_obstacle(distance);
        }

        if (get_dist()>dist)
     dae:	4c 01       	movw	r8, r24
     db0:	aa 24       	eor	r10, r10
     db2:	bb 24       	eor	r11, r11

    Shaft_Counter_Right_Wheel = 0;                      // Keep track of the distance traveled by the bot from the starting point
    // Also continuously keep checking for obstacles
    while (1)
    {
        unsigned char reading=Read_Sensor(11);
     db4:	8b e0       	ldi	r24, 0x0B	; 11
     db6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Read_Sensor>
        double distance =convert(reading);
     dba:	0e 94 1d 05 	call	0xa3a	; 0xa3a <convert>
     dbe:	bc 01       	movw	r22, r24
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     dc8:	16 2f       	mov	r17, r22
     dca:	d7 2f       	mov	r29, r23
     dcc:	c8 2f       	mov	r28, r24
     dce:	c9 2e       	mov	r12, r25
        if (distance<reference_distance)
     dd0:	86 2f       	mov	r24, r22
     dd2:	9d 2f       	mov	r25, r29
     dd4:	ac 2f       	mov	r26, r28
     dd6:	bc 2d       	mov	r27, r12
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	20 91 04 02 	lds	r18, 0x0204
     de0:	30 91 05 02 	lds	r19, 0x0205
     de4:	40 91 06 02 	lds	r20, 0x0206
     de8:	50 91 07 02 	lds	r21, 0x0207
     dec:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
     df0:	88 23       	and	r24, r24
     df2:	44 f4       	brge	.+16     	; 0xe04 <check_dist_travelled+0x7c>
        {
            avoiding_obstacle(distance);
     df4:	81 2f       	mov	r24, r17
     df6:	9d 2f       	mov	r25, r29
     df8:	ac 2f       	mov	r26, r28
     dfa:	bc 2d       	mov	r27, r12
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	0e 94 33 08 	call	0x1066	; 0x1066 <avoiding_obstacle>
        }

        if (get_dist()>dist)
     e04:	0e 94 74 06 	call	0xce8	; 0xce8 <get_dist>
     e08:	6b 01       	movw	r12, r22
     e0a:	7c 01       	movw	r14, r24
     e0c:	c5 01       	movw	r24, r10
     e0e:	b4 01       	movw	r22, r8
     e10:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
     e14:	9b 01       	movw	r18, r22
     e16:	ac 01       	movw	r20, r24
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
     e20:	18 16       	cp	r1, r24
     e22:	44 f6       	brge	.-112    	; 0xdb4 <check_dist_travelled+0x2c>
            break;

    }

    stop_motion();
     e24:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	9f 90       	pop	r9
     e3c:	8f 90       	pop	r8
     e3e:	08 95       	ret

00000e40 <move_forward>:



void move_forward(unsigned int dist)
{
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ec 01       	movw	r28, r24
    forward_motion();                     // Move the bot forward till it covers the specified distance
     e46:	0e 94 03 03 	call	0x606	; 0x606 <forward_motion>
    check_dist_travelled(dist);
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 94 c4 06 	call	0xd88	; 0xd88 <check_dist_travelled>
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <line_move>:



void line_move(double dist, double angle)               // Move the bot along the line previously calculated
{
     e56:	4f 92       	push	r4
     e58:	5f 92       	push	r5
     e5a:	6f 92       	push	r6
     e5c:	7f 92       	push	r7
     e5e:	8f 92       	push	r8
     e60:	9f 92       	push	r9
     e62:	af 92       	push	r10
     e64:	bf 92       	push	r11
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	2b 01       	movw	r4, r22
     e78:	3c 01       	movw	r6, r24
     e7a:	49 01       	movw	r8, r18
     e7c:	5a 01       	movw	r10, r20
    if((angle - current_theta)>0)
     e7e:	c0 90 10 02 	lds	r12, 0x0210
     e82:	d0 90 11 02 	lds	r13, 0x0211
     e86:	e0 90 12 02 	lds	r14, 0x0212
     e8a:	f0 90 13 02 	lds	r15, 0x0213
     e8e:	ca 01       	movw	r24, r20
     e90:	b9 01       	movw	r22, r18
     e92:	a7 01       	movw	r20, r14
     e94:	96 01       	movw	r18, r12
     e96:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__subsf3>
     e9a:	06 2f       	mov	r16, r22
     e9c:	17 2f       	mov	r17, r23
     e9e:	d8 2f       	mov	r29, r24
     ea0:	c9 2f       	mov	r28, r25
     ea2:	86 2f       	mov	r24, r22
     ea4:	91 2f       	mov	r25, r17
     ea6:	ad 2f       	mov	r26, r29
     ea8:	bc 2f       	mov	r27, r28
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	a9 01       	movw	r20, r18
     eb4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
     eb8:	18 16       	cp	r1, r24
     eba:	6c f4       	brge	.+26     	; 0xed6 <line_move+0x80>
        Right_Rotation_Degrees(angle - current_theta);
     ebc:	80 2f       	mov	r24, r16
     ebe:	91 2f       	mov	r25, r17
     ec0:	ad 2f       	mov	r26, r29
     ec2:	bc 2f       	mov	r27, r28
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fixsfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	0e 94 2c 04 	call	0x858	; 0x858 <Right_Rotation_Degrees>
     ed4:	19 c0       	rjmp	.+50     	; 0xf08 <line_move+0xb2>

    else if((angle - current_theta)<0)
     ed6:	80 2f       	mov	r24, r16
     ed8:	91 2f       	mov	r25, r17
     eda:	ad 2f       	mov	r26, r29
     edc:	bc 2f       	mov	r27, r28
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	a9 01       	movw	r20, r18
     ee8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
     eec:	88 23       	and	r24, r24
     eee:	64 f4       	brge	.+24     	; 0xf08 <line_move+0xb2>
        Left_Rotation_Degrees(current_theta-angle);
     ef0:	c7 01       	movw	r24, r14
     ef2:	b6 01       	movw	r22, r12
     ef4:	a5 01       	movw	r20, r10
     ef6:	94 01       	movw	r18, r8
     ef8:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__subsf3>
     efc:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fixsfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	0e 94 39 03 	call	0x672	; 0x672 <Left_Rotation_Degrees>

    move_forward((unsigned int)dist);
     f08:	c3 01       	movw	r24, r6
     f0a:	b2 01       	movw	r22, r4
     f0c:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	0e 94 20 07 	call	0xe40	; 0xe40 <move_forward>

}
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	cf 90       	pop	r12
     f28:	bf 90       	pop	r11
     f2a:	af 90       	pop	r10
     f2c:	9f 90       	pop	r9
     f2e:	8f 90       	pop	r8
     f30:	7f 90       	pop	r7
     f32:	6f 90       	pop	r6
     f34:	5f 90       	pop	r5
     f36:	4f 90       	pop	r4
     f38:	08 95       	ret

00000f3a <line_calc>:



void line_calc(double xfinal,double yfinal)
{
     f3a:	4f 92       	push	r4
     f3c:	5f 92       	push	r5
     f3e:	6f 92       	push	r6
     f40:	7f 92       	push	r7
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	29 01       	movw	r4, r18
     f58:	3a 01       	movw	r6, r20
    double slopeangle, dist;

    slopeangle = atan2(xfinal - current_x , yfinal - current_y) * (180/pi);           // Calculate the slope of line and distance to be moved along it
     f5a:	20 91 18 02 	lds	r18, 0x0218
     f5e:	30 91 19 02 	lds	r19, 0x0219
     f62:	40 91 1a 02 	lds	r20, 0x021A
     f66:	50 91 1b 02 	lds	r21, 0x021B
     f6a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__subsf3>
     f6e:	d6 2e       	mov	r13, r22
     f70:	c7 2e       	mov	r12, r23
     f72:	b8 2e       	mov	r11, r24
     f74:	a9 2e       	mov	r10, r25
     f76:	c3 01       	movw	r24, r6
     f78:	b2 01       	movw	r22, r4
     f7a:	20 91 14 02 	lds	r18, 0x0214
     f7e:	30 91 15 02 	lds	r19, 0x0215
     f82:	40 91 16 02 	lds	r20, 0x0216
     f86:	50 91 17 02 	lds	r21, 0x0217
     f8a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__subsf3>
     f8e:	d6 2f       	mov	r29, r22
     f90:	c7 2f       	mov	r28, r23
     f92:	f8 2e       	mov	r15, r24
     f94:	e9 2e       	mov	r14, r25
     f96:	8d 2d       	mov	r24, r13
     f98:	9c 2d       	mov	r25, r12
     f9a:	ab 2d       	mov	r26, r11
     f9c:	ba 2d       	mov	r27, r10
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0d 2f       	mov	r16, r29
     fa4:	1c 2f       	mov	r17, r28
     fa6:	2f 2d       	mov	r18, r15
     fa8:	3e 2d       	mov	r19, r14
     faa:	a9 01       	movw	r20, r18
     fac:	98 01       	movw	r18, r16
     fae:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <atan2>
     fb2:	2b 01       	movw	r4, r22
     fb4:	3c 01       	movw	r6, r24
    dist = sqrt(pow(yfinal-current_y,2) + pow(xfinal-current_x,2));
     fb6:	3f 2d       	mov	r19, r15
     fb8:	8d 2f       	mov	r24, r29
     fba:	9c 2f       	mov	r25, r28
     fbc:	af 2d       	mov	r26, r15
     fbe:	be 2d       	mov	r27, r14
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	23 2f       	mov	r18, r19
     fc6:	3b 2f       	mov	r19, r27
     fc8:	a9 01       	movw	r20, r18
     fca:	98 01       	movw	r18, r16
     fcc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     fd0:	d6 2f       	mov	r29, r22
     fd2:	c7 2f       	mov	r28, r23
     fd4:	f8 2e       	mov	r15, r24
     fd6:	e9 2e       	mov	r14, r25
     fd8:	3b 2d       	mov	r19, r11
     fda:	8d 2d       	mov	r24, r13
     fdc:	9c 2d       	mov	r25, r12
     fde:	ab 2d       	mov	r26, r11
     fe0:	ba 2d       	mov	r27, r10
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0d 2d       	mov	r16, r13
     fe8:	1c 2d       	mov	r17, r12
     fea:	23 2f       	mov	r18, r19
     fec:	3b 2f       	mov	r19, r27
     fee:	a9 01       	movw	r20, r18
     ff0:	98 01       	movw	r18, r16
     ff2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
     ff6:	b6 2f       	mov	r27, r22
     ff8:	a7 2f       	mov	r26, r23
     ffa:	38 2f       	mov	r19, r24
     ffc:	29 2f       	mov	r18, r25
     ffe:	4d 2f       	mov	r20, r29
    1000:	5c 2f       	mov	r21, r28
    1002:	6f 2d       	mov	r22, r15
    1004:	7e 2d       	mov	r23, r14
    1006:	cb 01       	movw	r24, r22
    1008:	ba 01       	movw	r22, r20
    100a:	42 2f       	mov	r20, r18
    100c:	0b 2f       	mov	r16, r27
    100e:	1a 2f       	mov	r17, r26
    1010:	23 2f       	mov	r18, r19
    1012:	34 2f       	mov	r19, r20
    1014:	a9 01       	movw	r20, r18
    1016:	98 01       	movw	r18, r16
    1018:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
    101c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <sqrt>
    1020:	6b 01       	movw	r12, r22
    1022:	7c 01       	movw	r14, r24

    velocity (100,100);
    1024:	84 e6       	ldi	r24, 0x64	; 100
    1026:	64 e6       	ldi	r22, 0x64	; 100
    1028:	0e 94 11 03 	call	0x622	; 0x622 <velocity>

void line_calc(double xfinal,double yfinal)
{
    double slopeangle, dist;

    slopeangle = atan2(xfinal - current_x , yfinal - current_y) * (180/pi);           // Calculate the slope of line and distance to be moved along it
    102c:	c3 01       	movw	r24, r6
    102e:	b2 01       	movw	r22, r4
    1030:	2d e4       	ldi	r18, 0x4D	; 77
    1032:	3f e2       	ldi	r19, 0x2F	; 47
    1034:	45 e6       	ldi	r20, 0x65	; 101
    1036:	52 e4       	ldi	r21, 0x42	; 66
    1038:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    dist = sqrt(pow(yfinal-current_y,2) + pow(xfinal-current_x,2));

    velocity (100,100);

    line_move(dist, slopeangle);
    1040:	c7 01       	movw	r24, r14
    1042:	b6 01       	movw	r22, r12
    1044:	0e 94 2b 07 	call	0xe56	; 0xe56 <line_move>

}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	7f 90       	pop	r7
    105e:	6f 90       	pop	r6
    1060:	5f 90       	pop	r5
    1062:	4f 90       	pop	r4
    1064:	08 95       	ret

00001066 <avoiding_obstacle>:



void avoiding_obstacle(double distance)
{
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    init_x = current_x;
    1076:	00 91 18 02 	lds	r16, 0x0218
    107a:	10 91 19 02 	lds	r17, 0x0219
    107e:	20 91 1a 02 	lds	r18, 0x021A
    1082:	30 91 1b 02 	lds	r19, 0x021B
    1086:	00 93 0c 02 	sts	0x020C, r16
    108a:	10 93 0d 02 	sts	0x020D, r17
    108e:	20 93 0e 02 	sts	0x020E, r18
    1092:	30 93 0f 02 	sts	0x020F, r19
    init_y = current_y;
    1096:	00 91 14 02 	lds	r16, 0x0214
    109a:	10 91 15 02 	lds	r17, 0x0215
    109e:	20 91 16 02 	lds	r18, 0x0216
    10a2:	30 91 17 02 	lds	r19, 0x0217
    10a6:	00 93 08 02 	sts	0x0208, r16
    10aa:	10 93 09 02 	sts	0x0209, r17
    10ae:	20 93 0a 02 	sts	0x020A, r18
    10b2:	30 93 0b 02 	sts	0x020B, r19

    int counter=0;

    while((unsigned int)distance<reference_distance+30)
    10b6:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
    10c2:	6b 01       	movw	r12, r22
    10c4:	7c 01       	movw	r14, r24
    10c6:	60 91 04 02 	lds	r22, 0x0204
    10ca:	70 91 05 02 	lds	r23, 0x0205
    10ce:	80 91 06 02 	lds	r24, 0x0206
    10d2:	90 91 07 02 	lds	r25, 0x0207
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 ef       	ldi	r20, 0xF0	; 240
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
    10e2:	9b 01       	movw	r18, r22
    10e4:	ac 01       	movw	r20, r24
    10e6:	c7 01       	movw	r24, r14
    10e8:	b6 01       	movw	r22, r12
    10ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	84 f5       	brge	.+96     	; 0x1152 <avoiding_obstacle+0xec>
void avoiding_obstacle(double distance)
{
    init_x = current_x;
    init_y = current_y;

    int counter=0;
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
    10f4:	d0 e0       	ldi	r29, 0x00	; 0

    while((unsigned int)distance<reference_distance+30)
    {
        Left_Rotation_Degrees(25);                           // Turn the bot 25 degrees repeatedly till line of motion gets clear
    10f6:	89 e1       	ldi	r24, 0x19	; 25
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 39 03 	call	0x672	; 0x672 <Left_Rotation_Degrees>
        unsigned char reading=Read_Sensor(11);
    10fe:	8b e0       	ldi	r24, 0x0B	; 11
    1100:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Read_Sensor>
        distance =convert(reading);
    1104:	0e 94 1d 05 	call	0xa3a	; 0xa3a <convert>

        counter++;
    1108:	21 96       	adiw	r28, 0x01	; 1

    while((unsigned int)distance<reference_distance+30)
    {
        Left_Rotation_Degrees(25);                           // Turn the bot 25 degrees repeatedly till line of motion gets clear
        unsigned char reading=Read_Sensor(11);
        distance =convert(reading);
    110a:	bc 01       	movw	r22, r24
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
    init_x = current_x;
    init_y = current_y;

    int counter=0;

    while((unsigned int)distance<reference_distance+30)
    1114:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
    1120:	6b 01       	movw	r12, r22
    1122:	7c 01       	movw	r14, r24
    1124:	60 91 04 02 	lds	r22, 0x0204
    1128:	70 91 05 02 	lds	r23, 0x0205
    112c:	80 91 06 02 	lds	r24, 0x0206
    1130:	90 91 07 02 	lds	r25, 0x0207
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 ef       	ldi	r20, 0xF0	; 240
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	c7 01       	movw	r24, r14
    1146:	b6 01       	movw	r22, r12
    1148:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	9c f2       	brlt	.-90     	; 0x10f6 <avoiding_obstacle+0x90>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <avoiding_obstacle+0xf0>
void avoiding_obstacle(double distance)
{
    init_x = current_x;
    init_y = current_y;

    int counter=0;
    1152:	c0 e0       	ldi	r28, 0x00	; 0
    1154:	d0 e0       	ldi	r29, 0x00	; 0
        distance =convert(reading);

        counter++;
    }

    double move_dist = 10/cos(25*pi*counter/180) + 5;
    1156:	be 01       	movw	r22, r28
    1158:	88 27       	eor	r24, r24
    115a:	77 fd       	sbrc	r23, 7
    115c:	80 95       	com	r24
    115e:	98 2f       	mov	r25, r24
    1160:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
    1164:	29 e1       	ldi	r18, 0x19	; 25
    1166:	34 e1       	ldi	r19, 0x14	; 20
    1168:	4d e9       	ldi	r20, 0x9D	; 157
    116a:	52 e4       	ldi	r21, 0x42	; 66
    116c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	44 e3       	ldi	r20, 0x34	; 52
    1176:	53 e4       	ldi	r21, 0x43	; 67
    1178:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3>
    117c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <cos>
    1180:	9b 01       	movw	r18, r22
    1182:	ac 01       	movw	r20, r24
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	91 e4       	ldi	r25, 0x41	; 65
    118c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3>
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 ea       	ldi	r20, 0xA0	; 160
    1196:	50 e4       	ldi	r21, 0x40	; 64
    1198:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>

    line_move(move_dist,current_theta);                 // Move the bot forward till obstacle is cleared
    119c:	20 91 10 02 	lds	r18, 0x0210
    11a0:	30 91 11 02 	lds	r19, 0x0211
    11a4:	40 91 12 02 	lds	r20, 0x0212
    11a8:	50 91 13 02 	lds	r21, 0x0213
    11ac:	0e 94 2b 07 	call	0xe56	; 0xe56 <line_move>

    line_calc(0,0);                                   // Recalculate the line to be traversed
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	cb 01       	movw	r24, r22
    11b6:	9b 01       	movw	r18, r22
    11b8:	ac 01       	movw	r20, r24
    11ba:	0e 94 9d 07 	call	0xf3a	; 0xf3a <line_calc>
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	08 95       	ret

000011d0 <backtracking>:



void backtracking()
{
    sei();
    11d0:	78 94       	sei
    line_calc(0,0);
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	cb 01       	movw	r24, r22
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <line_calc>
    cli();
    11e0:	f8 94       	cli
}
    11e2:	08 95       	ret

000011e4 <__vector_25>:




SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	0f 92       	push	r0
    11ec:	0b b6       	in	r0, 0x3b	; 59
    11ee:	0f 92       	push	r0
    11f0:	11 24       	eor	r1, r1
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31

    data = UDR0; 				//making copy of data from UDR0 in 'data' variable
    1216:	e6 ec       	ldi	r30, 0xC6	; 198
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	80 93 26 02 	sts	0x0226, r24

    UDR0 = data; 				//echo data back to PC
    1220:	80 83       	st	Z, r24

    Shaft_Counter_Left_Wheel = 0;
    1222:	10 92 1d 02 	sts	0x021D, r1
    1226:	10 92 1c 02 	sts	0x021C, r1

    Shaft_Counter_Right_Wheel = 0;
    122a:	10 92 1f 02 	sts	0x021F, r1
    122e:	10 92 1e 02 	sts	0x021E, r1

    unsigned char reading=Read_Sensor(11);
    1232:	8b e0       	ldi	r24, 0x0B	; 11
    1234:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Read_Sensor>
    double distance =convert(reading);
    1238:	0e 94 1d 05 	call	0xa3a	; 0xa3a <convert>
		Then the new coordinates are calculated using the coordinate_calculation function in which distance travelled from the previous
		node is mentioned
		A new node is formed after that which is further used for any further motions.
		*/

    if(data == 0x38 && distance>reference_distance) //ASCII value of 8
    123c:	20 91 26 02 	lds	r18, 0x0226
    1240:	28 33       	cpi	r18, 0x38	; 56
    1242:	09 f0       	breq	.+2      	; 0x1246 <__vector_25+0x62>
    1244:	5e c0       	rjmp	.+188    	; 0x1302 <__vector_25+0x11e>
    Shaft_Counter_Left_Wheel = 0;

    Shaft_Counter_Right_Wheel = 0;

    unsigned char reading=Read_Sensor(11);
    double distance =convert(reading);
    1246:	bc 01       	movw	r22, r24
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__floatunsisf>
		Then the new coordinates are calculated using the coordinate_calculation function in which distance travelled from the previous
		node is mentioned
		A new node is formed after that which is further used for any further motions.
		*/

    if(data == 0x38 && distance>reference_distance) //ASCII value of 8
    1250:	20 91 04 02 	lds	r18, 0x0204
    1254:	30 91 05 02 	lds	r19, 0x0205
    1258:	40 91 06 02 	lds	r20, 0x0206
    125c:	50 91 07 02 	lds	r21, 0x0207
    1260:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
    1264:	18 16       	cp	r1, r24
    1266:	0c f0       	brlt	.+2      	; 0x126a <__vector_25+0x86>
    1268:	4c c0       	rjmp	.+152    	; 0x1302 <__vector_25+0x11e>
    {
        forward_motion(); // Forward motion starts.
    126a:	0e 94 03 03 	call	0x606	; 0x606 <forward_motion>

        init_x = current_x;
    126e:	80 91 18 02 	lds	r24, 0x0218
    1272:	90 91 19 02 	lds	r25, 0x0219
    1276:	a0 91 1a 02 	lds	r26, 0x021A
    127a:	b0 91 1b 02 	lds	r27, 0x021B
    127e:	80 93 0c 02 	sts	0x020C, r24
    1282:	90 93 0d 02 	sts	0x020D, r25
    1286:	a0 93 0e 02 	sts	0x020E, r26
    128a:	b0 93 0f 02 	sts	0x020F, r27
        init_y = current_y;
    128e:	80 91 14 02 	lds	r24, 0x0214
    1292:	90 91 15 02 	lds	r25, 0x0215
    1296:	a0 91 16 02 	lds	r26, 0x0216
    129a:	b0 91 17 02 	lds	r27, 0x0217
    129e:	80 93 08 02 	sts	0x0208, r24
    12a2:	90 93 09 02 	sts	0x0209, r25
    12a6:	a0 93 0a 02 	sts	0x020A, r26
    12aa:	b0 93 0b 02 	sts	0x020B, r27

        sei();
    12ae:	78 94       	sei
    12b0:	89 e9       	ldi	r24, 0x99	; 153
    12b2:	99 e9       	ldi	r25, 0x99	; 153
    12b4:	a3 e0       	ldi	r26, 0x03	; 3
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	90 40       	sbci	r25, 0x00	; 0
    12ba:	a0 40       	sbci	r26, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <__vector_25+0xd2>
    12be:	00 00       	nop
        _delay_ms(80);
        stop_motion();
    12c0:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    12c4:	af ef       	ldi	r26, 0xFF	; 255
    12c6:	bf e8       	ldi	r27, 0x8F	; 143
    12c8:	11 97       	sbiw	r26, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <__vector_25+0xe4>
    12cc:	00 c0       	rjmp	.+0      	; 0x12ce <__vector_25+0xea>
    12ce:	00 00       	nop
		_delay_ms(10);
        double dist_travelled = (Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)*0.54;
    12d0:	60 91 1c 02 	lds	r22, 0x021C
    12d4:	70 91 1d 02 	lds	r23, 0x021D
    12d8:	80 91 1e 02 	lds	r24, 0x021E
    12dc:	90 91 1f 02 	lds	r25, 0x021F
        cli();
    12e0:	f8 94       	cli

        sei();
        _delay_ms(80);
        stop_motion();
		_delay_ms(10);
        double dist_travelled = (Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)*0.54;
    12e2:	68 0f       	add	r22, r24
    12e4:	79 1f       	adc	r23, r25
    12e6:	88 27       	eor	r24, r24
    12e8:	77 fd       	sbrc	r23, 7
    12ea:	80 95       	com	r24
    12ec:	98 2f       	mov	r25, r24
    12ee:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
    12f2:	21 e7       	ldi	r18, 0x71	; 113
    12f4:	3d e3       	ldi	r19, 0x3D	; 61
    12f6:	4a e0       	ldi	r20, 0x0A	; 10
    12f8:	5f e3       	ldi	r21, 0x3F	; 63
    12fa:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
        cli();

        coordinate_calculation(dist_travelled);
    12fe:	0e 94 4f 05 	call	0xa9e	; 0xa9e <coordinate_calculation>
    }


    if(data == 0x32) //ASCII value of 2
    1302:	80 91 26 02 	lds	r24, 0x0226
    1306:	82 33       	cpi	r24, 0x32	; 50
    1308:	09 f0       	breq	.+2      	; 0x130c <__vector_25+0x128>
    130a:	57 c0       	rjmp	.+174    	; 0x13ba <__vector_25+0x1d6>
    {
        backward_motion(); //Backward Motion starts
    130c:	0e 94 06 03 	call	0x60c	; 0x60c <backward_motion>

        sei();
    1310:	78 94       	sei
    1312:	89 e9       	ldi	r24, 0x99	; 153
    1314:	99 e9       	ldi	r25, 0x99	; 153
    1316:	a3 e0       	ldi	r26, 0x03	; 3
    1318:	81 50       	subi	r24, 0x01	; 1
    131a:	90 40       	sbci	r25, 0x00	; 0
    131c:	a0 40       	sbci	r26, 0x00	; 0
    131e:	e1 f7       	brne	.-8      	; 0x1318 <__vector_25+0x134>
    1320:	00 00       	nop
        _delay_ms(80);

        stop_motion();
    1322:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    1326:	af ef       	ldi	r26, 0xFF	; 255
    1328:	bf e8       	ldi	r27, 0x8F	; 143
    132a:	11 97       	sbiw	r26, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <__vector_25+0x146>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <__vector_25+0x14c>
    1330:	00 00       	nop

        _delay_ms(10);

        double dist_travelled = ((Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)/2)*0.54*2;
    1332:	60 91 1c 02 	lds	r22, 0x021C
    1336:	70 91 1d 02 	lds	r23, 0x021D
    133a:	80 91 1e 02 	lds	r24, 0x021E
    133e:	90 91 1f 02 	lds	r25, 0x021F
        cli();
    1342:	f8 94       	cli

        stop_motion();

        _delay_ms(10);

        double dist_travelled = ((Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)/2)*0.54*2;
    1344:	68 0f       	add	r22, r24
    1346:	79 1f       	adc	r23, r25
    1348:	77 23       	and	r23, r23
    134a:	14 f4       	brge	.+4      	; 0x1350 <__vector_25+0x16c>
    134c:	6f 5f       	subi	r22, 0xFF	; 255
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	75 95       	asr	r23
    1352:	67 95       	ror	r22
    1354:	88 27       	eor	r24, r24
    1356:	77 fd       	sbrc	r23, 7
    1358:	80 95       	com	r24
    135a:	98 2f       	mov	r25, r24
    135c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__floatsisf>
    1360:	21 e7       	ldi	r18, 0x71	; 113
    1362:	3d e3       	ldi	r19, 0x3D	; 61
    1364:	4a e0       	ldi	r20, 0x0A	; 10
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
        cli();

        coordinate_calculation(-dist_travelled);
    1374:	90 58       	subi	r25, 0x80	; 128
    1376:	0e 94 4f 05 	call	0xa9e	; 0xa9e <coordinate_calculation>

        init_x = current_x;
    137a:	80 91 18 02 	lds	r24, 0x0218
    137e:	90 91 19 02 	lds	r25, 0x0219
    1382:	a0 91 1a 02 	lds	r26, 0x021A
    1386:	b0 91 1b 02 	lds	r27, 0x021B
    138a:	80 93 0c 02 	sts	0x020C, r24
    138e:	90 93 0d 02 	sts	0x020D, r25
    1392:	a0 93 0e 02 	sts	0x020E, r26
    1396:	b0 93 0f 02 	sts	0x020F, r27
        init_y = current_y;
    139a:	80 91 14 02 	lds	r24, 0x0214
    139e:	90 91 15 02 	lds	r25, 0x0215
    13a2:	a0 91 16 02 	lds	r26, 0x0216
    13a6:	b0 91 17 02 	lds	r27, 0x0217
    13aa:	80 93 08 02 	sts	0x0208, r24
    13ae:	90 93 09 02 	sts	0x0209, r25
    13b2:	a0 93 0a 02 	sts	0x020A, r26
    13b6:	b0 93 0b 02 	sts	0x020B, r27
		After 50 ms the motor is stopped but still a delay of 10 ms is provided to let the motor die down completely.
		The required turned angle is called on from the get_angle function and the calibrated value is subtracted/added to the current theta.
		Thus the value of the global variable current_theta is updated.
		*/

    if(data == 0x34) //ASCII value of 4
    13ba:	80 91 26 02 	lds	r24, 0x0226
    13be:	84 33       	cpi	r24, 0x34	; 52
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <__vector_25+0x1e0>
    13c2:	81 c0       	rjmp	.+258    	; 0x14c6 <__vector_25+0x2e2>
    {
        left_motion();  // Left Motion starts.
    13c4:	0e 94 09 03 	call	0x612	; 0x612 <left_motion>
        sei();
    13c8:	78 94       	sei
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	9f e3       	ldi	r25, 0x3F	; 63
    13ce:	a2 e0       	ldi	r26, 0x02	; 2
    13d0:	81 50       	subi	r24, 0x01	; 1
    13d2:	90 40       	sbci	r25, 0x00	; 0
    13d4:	a0 40       	sbci	r26, 0x00	; 0
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <__vector_25+0x1ec>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <__vector_25+0x1f6>
    13da:	00 00       	nop
        _delay_ms(50);
        stop_motion();
    13dc:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    13e0:	af ef       	ldi	r26, 0xFF	; 255
    13e2:	bf e8       	ldi	r27, 0x8F	; 143
    13e4:	11 97       	sbiw	r26, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <__vector_25+0x200>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <__vector_25+0x206>
    13ea:	00 00       	nop
        _delay_ms(10);
		current_theta-=(get_angle()*3);
    13ec:	c0 90 10 02 	lds	r12, 0x0210
    13f0:	d0 90 11 02 	lds	r13, 0x0211
    13f4:	e0 90 12 02 	lds	r14, 0x0212
    13f8:	f0 90 13 02 	lds	r15, 0x0213
    13fc:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e4       	ldi	r20, 0x40	; 64
    1406:	50 e4       	ldi	r21, 0x40	; 64
    1408:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    140c:	9b 01       	movw	r18, r22
    140e:	ac 01       	movw	r20, r24
    1410:	c7 01       	movw	r24, r14
    1412:	b6 01       	movw	r22, r12
    1414:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__subsf3>
    1418:	26 2f       	mov	r18, r22
    141a:	37 2f       	mov	r19, r23
    141c:	f8 2f       	mov	r31, r24
    141e:	e9 2f       	mov	r30, r25
    1420:	46 2f       	mov	r20, r22
    1422:	57 2f       	mov	r21, r23
    1424:	68 2f       	mov	r22, r24
    1426:	79 2f       	mov	r23, r25
    1428:	40 93 10 02 	sts	0x0210, r20
    142c:	50 93 11 02 	sts	0x0211, r21
    1430:	60 93 12 02 	sts	0x0212, r22
    1434:	70 93 13 02 	sts	0x0213, r23
        //cli();
		if(current_theta>=0)
    1438:	82 2f       	mov	r24, r18
    143a:	93 2f       	mov	r25, r19
    143c:	af 2f       	mov	r26, r31
    143e:	be 2f       	mov	r27, r30
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
    144e:	88 23       	and	r24, r24
    1450:	e4 f0       	brlt	.+56     	; 0x148a <__vector_25+0x2a6>
        {
            lcd_cursor(1,2);
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	92 e0       	ldi	r25, 0x02	; 2
    145e:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,current_theta,4);
    1462:	60 91 10 02 	lds	r22, 0x0210
    1466:	70 91 11 02 	lds	r23, 0x0211
    146a:	80 91 12 02 	lds	r24, 0x0212
    146e:	90 91 13 02 	lds	r25, 0x0213
    1472:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
    1476:	8b 01       	movw	r16, r22
    1478:	9c 01       	movw	r18, r24
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	63 e0       	ldi	r22, 0x03	; 3
    147e:	a8 01       	movw	r20, r16
    1480:	24 e0       	ldi	r18, 0x04	; 4
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    1488:	1e c0       	rjmp	.+60     	; 0x14c6 <__vector_25+0x2e2>
        }
        else
        {
            lcd_cursor(1,2);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	62 e0       	ldi	r22, 0x02	; 2
    148e:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3, (-1 * current_theta),4);
    149a:	80 91 10 02 	lds	r24, 0x0210
    149e:	90 91 11 02 	lds	r25, 0x0211
    14a2:	a0 91 12 02 	lds	r26, 0x0212
    14a6:	b0 91 13 02 	lds	r27, 0x0213
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	90 58       	subi	r25, 0x80	; 128
    14b0:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
    14b4:	8b 01       	movw	r16, r22
    14b6:	9c 01       	movw	r18, r24
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	63 e0       	ldi	r22, 0x03	; 3
    14bc:	a8 01       	movw	r20, r16
    14be:	24 e0       	ldi	r18, 0x04	; 4
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
    }


    if(data == 0x36) //ASCII value of 6
    14c6:	80 91 26 02 	lds	r24, 0x0226
    14ca:	86 33       	cpi	r24, 0x36	; 54
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <__vector_25+0x2ec>
    14ce:	7d c0       	rjmp	.+250    	; 0x15ca <__vector_25+0x3e6>
    {

        right_motion();  // Right motion starts.
    14d0:	0e 94 0c 03 	call	0x618	; 0x618 <right_motion>
        sei();
    14d4:	78 94       	sei
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
    14d8:	9f e3       	ldi	r25, 0x3F	; 63
    14da:	a2 e0       	ldi	r26, 0x02	; 2
    14dc:	81 50       	subi	r24, 0x01	; 1
    14de:	90 40       	sbci	r25, 0x00	; 0
    14e0:	a0 40       	sbci	r26, 0x00	; 0
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <__vector_25+0x2f8>
    14e4:	00 c0       	rjmp	.+0      	; 0x14e6 <__vector_25+0x302>
    14e6:	00 00       	nop
        _delay_ms(50); 
        stop_motion(); 
    14e8:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    14ec:	af ef       	ldi	r26, 0xFF	; 255
    14ee:	bf e8       	ldi	r27, 0x8F	; 143
    14f0:	11 97       	sbiw	r26, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <__vector_25+0x30c>
    14f4:	00 c0       	rjmp	.+0      	; 0x14f6 <__vector_25+0x312>
    14f6:	00 00       	nop
        _delay_ms(10);
		current_theta+=(get_angle()*3);
    14f8:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e4       	ldi	r20, 0x40	; 64
    1502:	50 e4       	ldi	r21, 0x40	; 64
    1504:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__mulsf3>
    1508:	20 91 10 02 	lds	r18, 0x0210
    150c:	30 91 11 02 	lds	r19, 0x0211
    1510:	40 91 12 02 	lds	r20, 0x0212
    1514:	50 91 13 02 	lds	r21, 0x0213
    1518:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__addsf3>
    151c:	26 2f       	mov	r18, r22
    151e:	37 2f       	mov	r19, r23
    1520:	f8 2f       	mov	r31, r24
    1522:	e9 2f       	mov	r30, r25
    1524:	46 2f       	mov	r20, r22
    1526:	57 2f       	mov	r21, r23
    1528:	68 2f       	mov	r22, r24
    152a:	79 2f       	mov	r23, r25
    152c:	40 93 10 02 	sts	0x0210, r20
    1530:	50 93 11 02 	sts	0x0211, r21
    1534:	60 93 12 02 	sts	0x0212, r22
    1538:	70 93 13 02 	sts	0x0213, r23
		The LCD cannot print negative values so that is taken care of
		by the positive and negative signs that are displayed on the LCD
		in case of the respective positive and negative values.		
		*/
		
        if(current_theta>=0)
    153c:	82 2f       	mov	r24, r18
    153e:	93 2f       	mov	r25, r19
    1540:	af 2f       	mov	r26, r31
    1542:	be 2f       	mov	r27, r30
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	a9 01       	movw	r20, r18
    154e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__gesf2>
    1552:	88 23       	and	r24, r24
    1554:	e4 f0       	brlt	.+56     	; 0x158e <__vector_25+0x3aa>
        {
            lcd_cursor(1,2);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,current_theta,4);
    1566:	60 91 10 02 	lds	r22, 0x0210
    156a:	70 91 11 02 	lds	r23, 0x0211
    156e:	80 91 12 02 	lds	r24, 0x0212
    1572:	90 91 13 02 	lds	r25, 0x0213
    1576:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
    157a:	8b 01       	movw	r16, r22
    157c:	9c 01       	movw	r18, r24
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	63 e0       	ldi	r22, 0x03	; 3
    1582:	a8 01       	movw	r20, r16
    1584:	24 e0       	ldi	r18, 0x04	; 4
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    158c:	1e c0       	rjmp	.+60     	; 0x15ca <__vector_25+0x3e6>
        }
        else
        {
            lcd_cursor(1,2);
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	62 e0       	ldi	r22, 0x02	; 2
    1592:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3, (-1 * current_theta),4);
    159e:	80 91 10 02 	lds	r24, 0x0210
    15a2:	90 91 11 02 	lds	r25, 0x0211
    15a6:	a0 91 12 02 	lds	r26, 0x0212
    15aa:	b0 91 13 02 	lds	r27, 0x0213
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	90 58       	subi	r25, 0x80	; 128
    15b4:	0e 94 46 0c 	call	0x188c	; 0x188c <__fixunssfsi>
    15b8:	8b 01       	movw	r16, r22
    15ba:	9c 01       	movw	r18, r24
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	63 e0       	ldi	r22, 0x03	; 3
    15c0:	a8 01       	movw	r20, r16
    15c2:	24 e0       	ldi	r18, 0x04	; 4
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
    }


    if(data == 0x37) //ASCII value of 7
    15ca:	80 91 26 02 	lds	r24, 0x0226
    15ce:	87 33       	cpi	r24, 0x37	; 55
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <__vector_25+0x3f2>
    {
        backtracking();		//The Backtracking function is called which tells the bot to return to (0,0) coordinates in real space.
    15d2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <backtracking>
    }


}
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	0f 90       	pop	r0
    15fc:	0b be       	out	0x3b, r0	; 59
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <main>:



int main()
{
    initialize();              // Initializes all the ports
    1608:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <initialize>
    lcd_init();				   // Initializes the LCD
    160c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_init>
    init_xbee();			   // Initializes the X-Bee
    1610:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <init_xbee>
    1614:	ff cf       	rjmp	.-2      	; 0x1614 <main+0xc>

00001616 <__subsf3>:
    1616:	50 58       	subi	r21, 0x80	; 128

00001618 <__addsf3>:
    1618:	bb 27       	eor	r27, r27
    161a:	aa 27       	eor	r26, r26
    161c:	0e d0       	rcall	.+28     	; 0x163a <__addsf3x>
    161e:	27 c2       	rjmp	.+1102   	; 0x1a6e <__fp_round>
    1620:	f0 d1       	rcall	.+992    	; 0x1a02 <__fp_pscA>
    1622:	30 f0       	brcs	.+12     	; 0x1630 <__addsf3+0x18>
    1624:	f5 d1       	rcall	.+1002   	; 0x1a10 <__fp_pscB>
    1626:	20 f0       	brcs	.+8      	; 0x1630 <__addsf3+0x18>
    1628:	31 f4       	brne	.+12     	; 0x1636 <__addsf3+0x1e>
    162a:	9f 3f       	cpi	r25, 0xFF	; 255
    162c:	11 f4       	brne	.+4      	; 0x1632 <__addsf3+0x1a>
    162e:	1e f4       	brtc	.+6      	; 0x1636 <__addsf3+0x1e>
    1630:	c0 c1       	rjmp	.+896    	; 0x19b2 <__fp_nan>
    1632:	0e f4       	brtc	.+2      	; 0x1636 <__addsf3+0x1e>
    1634:	e0 95       	com	r30
    1636:	e7 fb       	bst	r30, 7
    1638:	b6 c1       	rjmp	.+876    	; 0x19a6 <__fp_inf>

0000163a <__addsf3x>:
    163a:	e9 2f       	mov	r30, r25
    163c:	3a d2       	rcall	.+1140   	; 0x1ab2 <__fp_split3>
    163e:	80 f3       	brcs	.-32     	; 0x1620 <__addsf3+0x8>
    1640:	ba 17       	cp	r27, r26
    1642:	62 07       	cpc	r22, r18
    1644:	73 07       	cpc	r23, r19
    1646:	84 07       	cpc	r24, r20
    1648:	95 07       	cpc	r25, r21
    164a:	18 f0       	brcs	.+6      	; 0x1652 <__addsf3x+0x18>
    164c:	71 f4       	brne	.+28     	; 0x166a <__addsf3x+0x30>
    164e:	9e f5       	brtc	.+102    	; 0x16b6 <__addsf3x+0x7c>
    1650:	52 c2       	rjmp	.+1188   	; 0x1af6 <__fp_zero>
    1652:	0e f4       	brtc	.+2      	; 0x1656 <__addsf3x+0x1c>
    1654:	e0 95       	com	r30
    1656:	0b 2e       	mov	r0, r27
    1658:	ba 2f       	mov	r27, r26
    165a:	a0 2d       	mov	r26, r0
    165c:	0b 01       	movw	r0, r22
    165e:	b9 01       	movw	r22, r18
    1660:	90 01       	movw	r18, r0
    1662:	0c 01       	movw	r0, r24
    1664:	ca 01       	movw	r24, r20
    1666:	a0 01       	movw	r20, r0
    1668:	11 24       	eor	r1, r1
    166a:	ff 27       	eor	r31, r31
    166c:	59 1b       	sub	r21, r25
    166e:	99 f0       	breq	.+38     	; 0x1696 <__addsf3x+0x5c>
    1670:	59 3f       	cpi	r21, 0xF9	; 249
    1672:	50 f4       	brcc	.+20     	; 0x1688 <__addsf3x+0x4e>
    1674:	50 3e       	cpi	r21, 0xE0	; 224
    1676:	68 f1       	brcs	.+90     	; 0x16d2 <__addsf3x+0x98>
    1678:	1a 16       	cp	r1, r26
    167a:	f0 40       	sbci	r31, 0x00	; 0
    167c:	a2 2f       	mov	r26, r18
    167e:	23 2f       	mov	r18, r19
    1680:	34 2f       	mov	r19, r20
    1682:	44 27       	eor	r20, r20
    1684:	58 5f       	subi	r21, 0xF8	; 248
    1686:	f3 cf       	rjmp	.-26     	; 0x166e <__addsf3x+0x34>
    1688:	46 95       	lsr	r20
    168a:	37 95       	ror	r19
    168c:	27 95       	ror	r18
    168e:	a7 95       	ror	r26
    1690:	f0 40       	sbci	r31, 0x00	; 0
    1692:	53 95       	inc	r21
    1694:	c9 f7       	brne	.-14     	; 0x1688 <__addsf3x+0x4e>
    1696:	7e f4       	brtc	.+30     	; 0x16b6 <__addsf3x+0x7c>
    1698:	1f 16       	cp	r1, r31
    169a:	ba 0b       	sbc	r27, r26
    169c:	62 0b       	sbc	r22, r18
    169e:	73 0b       	sbc	r23, r19
    16a0:	84 0b       	sbc	r24, r20
    16a2:	ba f0       	brmi	.+46     	; 0x16d2 <__addsf3x+0x98>
    16a4:	91 50       	subi	r25, 0x01	; 1
    16a6:	a1 f0       	breq	.+40     	; 0x16d0 <__addsf3x+0x96>
    16a8:	ff 0f       	add	r31, r31
    16aa:	bb 1f       	adc	r27, r27
    16ac:	66 1f       	adc	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 1f       	adc	r24, r24
    16b2:	c2 f7       	brpl	.-16     	; 0x16a4 <__addsf3x+0x6a>
    16b4:	0e c0       	rjmp	.+28     	; 0x16d2 <__addsf3x+0x98>
    16b6:	ba 0f       	add	r27, r26
    16b8:	62 1f       	adc	r22, r18
    16ba:	73 1f       	adc	r23, r19
    16bc:	84 1f       	adc	r24, r20
    16be:	48 f4       	brcc	.+18     	; 0x16d2 <__addsf3x+0x98>
    16c0:	87 95       	ror	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	b7 95       	ror	r27
    16c8:	f7 95       	ror	r31
    16ca:	9e 3f       	cpi	r25, 0xFE	; 254
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <__addsf3x+0x96>
    16ce:	b3 cf       	rjmp	.-154    	; 0x1636 <__addsf3+0x1e>
    16d0:	93 95       	inc	r25
    16d2:	88 0f       	add	r24, r24
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <__addsf3x+0x9e>
    16d6:	99 27       	eor	r25, r25
    16d8:	ee 0f       	add	r30, r30
    16da:	97 95       	ror	r25
    16dc:	87 95       	ror	r24
    16de:	08 95       	ret
    16e0:	90 d1       	rcall	.+800    	; 0x1a02 <__fp_pscA>
    16e2:	58 f0       	brcs	.+22     	; 0x16fa <__addsf3x+0xc0>
    16e4:	80 e8       	ldi	r24, 0x80	; 128
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <__addsf3x+0xb2>
    16ea:	9e ef       	ldi	r25, 0xFE	; 254
    16ec:	91 d1       	rcall	.+802    	; 0x1a10 <__fp_pscB>
    16ee:	28 f0       	brcs	.+10     	; 0x16fa <__addsf3x+0xc0>
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	51 e0       	ldi	r21, 0x01	; 1
    16f4:	59 f4       	brne	.+22     	; 0x170c <atan2+0xe>
    16f6:	5e ef       	ldi	r21, 0xFE	; 254
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <atan2+0xe>
    16fa:	5b c1       	rjmp	.+694    	; 0x19b2 <__fp_nan>
    16fc:	fc c1       	rjmp	.+1016   	; 0x1af6 <__fp_zero>

000016fe <atan2>:
    16fe:	e9 2f       	mov	r30, r25
    1700:	e0 78       	andi	r30, 0x80	; 128
    1702:	d7 d1       	rcall	.+942    	; 0x1ab2 <__fp_split3>
    1704:	68 f3       	brcs	.-38     	; 0x16e0 <__addsf3x+0xa6>
    1706:	09 2e       	mov	r0, r25
    1708:	05 2a       	or	r0, r21
    170a:	c1 f3       	breq	.-16     	; 0x16fc <__addsf3x+0xc2>
    170c:	26 17       	cp	r18, r22
    170e:	37 07       	cpc	r19, r23
    1710:	48 07       	cpc	r20, r24
    1712:	59 07       	cpc	r21, r25
    1714:	38 f0       	brcs	.+14     	; 0x1724 <atan2+0x26>
    1716:	0e 2e       	mov	r0, r30
    1718:	07 f8       	bld	r0, 7
    171a:	e0 25       	eor	r30, r0
    171c:	69 f0       	breq	.+26     	; 0x1738 <atan2+0x3a>
    171e:	e0 25       	eor	r30, r0
    1720:	e0 64       	ori	r30, 0x40	; 64
    1722:	0a c0       	rjmp	.+20     	; 0x1738 <atan2+0x3a>
    1724:	ef 63       	ori	r30, 0x3F	; 63
    1726:	07 f8       	bld	r0, 7
    1728:	00 94       	com	r0
    172a:	07 fa       	bst	r0, 7
    172c:	db 01       	movw	r26, r22
    172e:	b9 01       	movw	r22, r18
    1730:	9d 01       	movw	r18, r26
    1732:	dc 01       	movw	r26, r24
    1734:	ca 01       	movw	r24, r20
    1736:	ad 01       	movw	r20, r26
    1738:	ef 93       	push	r30
    173a:	4a d0       	rcall	.+148    	; 0x17d0 <__divsf3_pse>
    173c:	98 d1       	rcall	.+816    	; 0x1a6e <__fp_round>
    173e:	0a d0       	rcall	.+20     	; 0x1754 <atan>
    1740:	5f 91       	pop	r21
    1742:	55 23       	and	r21, r21
    1744:	31 f0       	breq	.+12     	; 0x1752 <atan2+0x54>
    1746:	2b ed       	ldi	r18, 0xDB	; 219
    1748:	3f e0       	ldi	r19, 0x0F	; 15
    174a:	49 e4       	ldi	r20, 0x49	; 73
    174c:	50 fd       	sbrc	r21, 0
    174e:	49 ec       	ldi	r20, 0xC9	; 201
    1750:	63 cf       	rjmp	.-314    	; 0x1618 <__addsf3>
    1752:	08 95       	ret

00001754 <atan>:
    1754:	df 93       	push	r29
    1756:	dd 27       	eor	r29, r29
    1758:	b9 2f       	mov	r27, r25
    175a:	bf 77       	andi	r27, 0x7F	; 127
    175c:	40 e8       	ldi	r20, 0x80	; 128
    175e:	5f e3       	ldi	r21, 0x3F	; 63
    1760:	16 16       	cp	r1, r22
    1762:	17 06       	cpc	r1, r23
    1764:	48 07       	cpc	r20, r24
    1766:	5b 07       	cpc	r21, r27
    1768:	10 f4       	brcc	.+4      	; 0x176e <atan+0x1a>
    176a:	d9 2f       	mov	r29, r25
    176c:	cf d1       	rcall	.+926    	; 0x1b0c <inverse>
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	7f 93       	push	r23
    1774:	6f 93       	push	r22
    1776:	c8 d2       	rcall	.+1424   	; 0x1d08 <square>
    1778:	e4 ee       	ldi	r30, 0xE4	; 228
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	1d d1       	rcall	.+570    	; 0x19b8 <__fp_powser>
    177e:	77 d1       	rcall	.+750    	; 0x1a6e <__fp_round>
    1780:	2f 91       	pop	r18
    1782:	3f 91       	pop	r19
    1784:	4f 91       	pop	r20
    1786:	5f 91       	pop	r21
    1788:	d4 d1       	rcall	.+936    	; 0x1b32 <__mulsf3x>
    178a:	dd 23       	and	r29, r29
    178c:	49 f0       	breq	.+18     	; 0x17a0 <atan+0x4c>
    178e:	90 58       	subi	r25, 0x80	; 128
    1790:	a2 ea       	ldi	r26, 0xA2	; 162
    1792:	2a ed       	ldi	r18, 0xDA	; 218
    1794:	3f e0       	ldi	r19, 0x0F	; 15
    1796:	49 ec       	ldi	r20, 0xC9	; 201
    1798:	5f e3       	ldi	r21, 0x3F	; 63
    179a:	d0 78       	andi	r29, 0x80	; 128
    179c:	5d 27       	eor	r21, r29
    179e:	4d df       	rcall	.-358    	; 0x163a <__addsf3x>
    17a0:	df 91       	pop	r29
    17a2:	65 c1       	rjmp	.+714    	; 0x1a6e <__fp_round>

000017a4 <__cmpsf2>:
    17a4:	dc d0       	rcall	.+440    	; 0x195e <__fp_cmp>
    17a6:	08 f4       	brcc	.+2      	; 0x17aa <__cmpsf2+0x6>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	08 95       	ret

000017ac <cos>:
    17ac:	39 d1       	rcall	.+626    	; 0x1a20 <__fp_rempio2>
    17ae:	e3 95       	inc	r30
    17b0:	6f c1       	rjmp	.+734    	; 0x1a90 <__fp_sinus>

000017b2 <__divsf3>:
    17b2:	0c d0       	rcall	.+24     	; 0x17cc <__divsf3x>
    17b4:	5c c1       	rjmp	.+696    	; 0x1a6e <__fp_round>
    17b6:	2c d1       	rcall	.+600    	; 0x1a10 <__fp_pscB>
    17b8:	40 f0       	brcs	.+16     	; 0x17ca <__divsf3+0x18>
    17ba:	23 d1       	rcall	.+582    	; 0x1a02 <__fp_pscA>
    17bc:	30 f0       	brcs	.+12     	; 0x17ca <__divsf3+0x18>
    17be:	21 f4       	brne	.+8      	; 0x17c8 <__divsf3+0x16>
    17c0:	5f 3f       	cpi	r21, 0xFF	; 255
    17c2:	19 f0       	breq	.+6      	; 0x17ca <__divsf3+0x18>
    17c4:	f0 c0       	rjmp	.+480    	; 0x19a6 <__fp_inf>
    17c6:	51 11       	cpse	r21, r1
    17c8:	97 c1       	rjmp	.+814    	; 0x1af8 <__fp_szero>
    17ca:	f3 c0       	rjmp	.+486    	; 0x19b2 <__fp_nan>

000017cc <__divsf3x>:
    17cc:	72 d1       	rcall	.+740    	; 0x1ab2 <__fp_split3>
    17ce:	98 f3       	brcs	.-26     	; 0x17b6 <__divsf3+0x4>

000017d0 <__divsf3_pse>:
    17d0:	99 23       	and	r25, r25
    17d2:	c9 f3       	breq	.-14     	; 0x17c6 <__divsf3+0x14>
    17d4:	55 23       	and	r21, r21
    17d6:	b1 f3       	breq	.-20     	; 0x17c4 <__divsf3+0x12>
    17d8:	95 1b       	sub	r25, r21
    17da:	55 0b       	sbc	r21, r21
    17dc:	bb 27       	eor	r27, r27
    17de:	aa 27       	eor	r26, r26
    17e0:	62 17       	cp	r22, r18
    17e2:	73 07       	cpc	r23, r19
    17e4:	84 07       	cpc	r24, r20
    17e6:	38 f0       	brcs	.+14     	; 0x17f6 <__divsf3_pse+0x26>
    17e8:	9f 5f       	subi	r25, 0xFF	; 255
    17ea:	5f 4f       	sbci	r21, 0xFF	; 255
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	44 1f       	adc	r20, r20
    17f2:	aa 1f       	adc	r26, r26
    17f4:	a9 f3       	breq	.-22     	; 0x17e0 <__divsf3_pse+0x10>
    17f6:	33 d0       	rcall	.+102    	; 0x185e <__divsf3_pse+0x8e>
    17f8:	0e 2e       	mov	r0, r30
    17fa:	3a f0       	brmi	.+14     	; 0x180a <__divsf3_pse+0x3a>
    17fc:	e0 e8       	ldi	r30, 0x80	; 128
    17fe:	30 d0       	rcall	.+96     	; 0x1860 <__divsf3_pse+0x90>
    1800:	91 50       	subi	r25, 0x01	; 1
    1802:	50 40       	sbci	r21, 0x00	; 0
    1804:	e6 95       	lsr	r30
    1806:	00 1c       	adc	r0, r0
    1808:	ca f7       	brpl	.-14     	; 0x17fc <__divsf3_pse+0x2c>
    180a:	29 d0       	rcall	.+82     	; 0x185e <__divsf3_pse+0x8e>
    180c:	fe 2f       	mov	r31, r30
    180e:	27 d0       	rcall	.+78     	; 0x185e <__divsf3_pse+0x8e>
    1810:	66 0f       	add	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	88 1f       	adc	r24, r24
    1816:	bb 1f       	adc	r27, r27
    1818:	26 17       	cp	r18, r22
    181a:	37 07       	cpc	r19, r23
    181c:	48 07       	cpc	r20, r24
    181e:	ab 07       	cpc	r26, r27
    1820:	b0 e8       	ldi	r27, 0x80	; 128
    1822:	09 f0       	breq	.+2      	; 0x1826 <__divsf3_pse+0x56>
    1824:	bb 0b       	sbc	r27, r27
    1826:	80 2d       	mov	r24, r0
    1828:	bf 01       	movw	r22, r30
    182a:	ff 27       	eor	r31, r31
    182c:	93 58       	subi	r25, 0x83	; 131
    182e:	5f 4f       	sbci	r21, 0xFF	; 255
    1830:	2a f0       	brmi	.+10     	; 0x183c <__divsf3_pse+0x6c>
    1832:	9e 3f       	cpi	r25, 0xFE	; 254
    1834:	51 05       	cpc	r21, r1
    1836:	68 f0       	brcs	.+26     	; 0x1852 <__divsf3_pse+0x82>
    1838:	b6 c0       	rjmp	.+364    	; 0x19a6 <__fp_inf>
    183a:	5e c1       	rjmp	.+700    	; 0x1af8 <__fp_szero>
    183c:	5f 3f       	cpi	r21, 0xFF	; 255
    183e:	ec f3       	brlt	.-6      	; 0x183a <__divsf3_pse+0x6a>
    1840:	98 3e       	cpi	r25, 0xE8	; 232
    1842:	dc f3       	brlt	.-10     	; 0x183a <__divsf3_pse+0x6a>
    1844:	86 95       	lsr	r24
    1846:	77 95       	ror	r23
    1848:	67 95       	ror	r22
    184a:	b7 95       	ror	r27
    184c:	f7 95       	ror	r31
    184e:	9f 5f       	subi	r25, 0xFF	; 255
    1850:	c9 f7       	brne	.-14     	; 0x1844 <__divsf3_pse+0x74>
    1852:	88 0f       	add	r24, r24
    1854:	91 1d       	adc	r25, r1
    1856:	96 95       	lsr	r25
    1858:	87 95       	ror	r24
    185a:	97 f9       	bld	r25, 7
    185c:	08 95       	ret
    185e:	e1 e0       	ldi	r30, 0x01	; 1
    1860:	66 0f       	add	r22, r22
    1862:	77 1f       	adc	r23, r23
    1864:	88 1f       	adc	r24, r24
    1866:	bb 1f       	adc	r27, r27
    1868:	62 17       	cp	r22, r18
    186a:	73 07       	cpc	r23, r19
    186c:	84 07       	cpc	r24, r20
    186e:	ba 07       	cpc	r27, r26
    1870:	20 f0       	brcs	.+8      	; 0x187a <__divsf3_pse+0xaa>
    1872:	62 1b       	sub	r22, r18
    1874:	73 0b       	sbc	r23, r19
    1876:	84 0b       	sbc	r24, r20
    1878:	ba 0b       	sbc	r27, r26
    187a:	ee 1f       	adc	r30, r30
    187c:	88 f7       	brcc	.-30     	; 0x1860 <__divsf3_pse+0x90>
    187e:	e0 95       	com	r30
    1880:	08 95       	ret

00001882 <__fixsfsi>:
    1882:	04 d0       	rcall	.+8      	; 0x188c <__fixunssfsi>
    1884:	68 94       	set
    1886:	b1 11       	cpse	r27, r1
    1888:	37 c1       	rjmp	.+622    	; 0x1af8 <__fp_szero>
    188a:	08 95       	ret

0000188c <__fixunssfsi>:
    188c:	1a d1       	rcall	.+564    	; 0x1ac2 <__fp_splitA>
    188e:	88 f0       	brcs	.+34     	; 0x18b2 <__fixunssfsi+0x26>
    1890:	9f 57       	subi	r25, 0x7F	; 127
    1892:	90 f0       	brcs	.+36     	; 0x18b8 <__fixunssfsi+0x2c>
    1894:	b9 2f       	mov	r27, r25
    1896:	99 27       	eor	r25, r25
    1898:	b7 51       	subi	r27, 0x17	; 23
    189a:	a0 f0       	brcs	.+40     	; 0x18c4 <__fixunssfsi+0x38>
    189c:	d1 f0       	breq	.+52     	; 0x18d2 <__fixunssfsi+0x46>
    189e:	66 0f       	add	r22, r22
    18a0:	77 1f       	adc	r23, r23
    18a2:	88 1f       	adc	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	1a f0       	brmi	.+6      	; 0x18ae <__fixunssfsi+0x22>
    18a8:	ba 95       	dec	r27
    18aa:	c9 f7       	brne	.-14     	; 0x189e <__fixunssfsi+0x12>
    18ac:	12 c0       	rjmp	.+36     	; 0x18d2 <__fixunssfsi+0x46>
    18ae:	b1 30       	cpi	r27, 0x01	; 1
    18b0:	81 f0       	breq	.+32     	; 0x18d2 <__fixunssfsi+0x46>
    18b2:	21 d1       	rcall	.+578    	; 0x1af6 <__fp_zero>
    18b4:	b1 e0       	ldi	r27, 0x01	; 1
    18b6:	08 95       	ret
    18b8:	1e c1       	rjmp	.+572    	; 0x1af6 <__fp_zero>
    18ba:	67 2f       	mov	r22, r23
    18bc:	78 2f       	mov	r23, r24
    18be:	88 27       	eor	r24, r24
    18c0:	b8 5f       	subi	r27, 0xF8	; 248
    18c2:	39 f0       	breq	.+14     	; 0x18d2 <__fixunssfsi+0x46>
    18c4:	b9 3f       	cpi	r27, 0xF9	; 249
    18c6:	cc f3       	brlt	.-14     	; 0x18ba <__fixunssfsi+0x2e>
    18c8:	86 95       	lsr	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	b3 95       	inc	r27
    18d0:	d9 f7       	brne	.-10     	; 0x18c8 <__fixunssfsi+0x3c>
    18d2:	3e f4       	brtc	.+14     	; 0x18e2 <__fixunssfsi+0x56>
    18d4:	90 95       	com	r25
    18d6:	80 95       	com	r24
    18d8:	70 95       	com	r23
    18da:	61 95       	neg	r22
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	08 95       	ret

000018e4 <__floatunsisf>:
    18e4:	e8 94       	clt
    18e6:	09 c0       	rjmp	.+18     	; 0x18fa <__floatsisf+0x12>

000018e8 <__floatsisf>:
    18e8:	97 fb       	bst	r25, 7
    18ea:	3e f4       	brtc	.+14     	; 0x18fa <__floatsisf+0x12>
    18ec:	90 95       	com	r25
    18ee:	80 95       	com	r24
    18f0:	70 95       	com	r23
    18f2:	61 95       	neg	r22
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	8f 4f       	sbci	r24, 0xFF	; 255
    18f8:	9f 4f       	sbci	r25, 0xFF	; 255
    18fa:	99 23       	and	r25, r25
    18fc:	a9 f0       	breq	.+42     	; 0x1928 <__floatsisf+0x40>
    18fe:	f9 2f       	mov	r31, r25
    1900:	96 e9       	ldi	r25, 0x96	; 150
    1902:	bb 27       	eor	r27, r27
    1904:	93 95       	inc	r25
    1906:	f6 95       	lsr	r31
    1908:	87 95       	ror	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b7 95       	ror	r27
    1910:	f1 11       	cpse	r31, r1
    1912:	f8 cf       	rjmp	.-16     	; 0x1904 <__floatsisf+0x1c>
    1914:	fa f4       	brpl	.+62     	; 0x1954 <__floatsisf+0x6c>
    1916:	bb 0f       	add	r27, r27
    1918:	11 f4       	brne	.+4      	; 0x191e <__floatsisf+0x36>
    191a:	60 ff       	sbrs	r22, 0
    191c:	1b c0       	rjmp	.+54     	; 0x1954 <__floatsisf+0x6c>
    191e:	6f 5f       	subi	r22, 0xFF	; 255
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	8f 4f       	sbci	r24, 0xFF	; 255
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	16 c0       	rjmp	.+44     	; 0x1954 <__floatsisf+0x6c>
    1928:	88 23       	and	r24, r24
    192a:	11 f0       	breq	.+4      	; 0x1930 <__floatsisf+0x48>
    192c:	96 e9       	ldi	r25, 0x96	; 150
    192e:	11 c0       	rjmp	.+34     	; 0x1952 <__floatsisf+0x6a>
    1930:	77 23       	and	r23, r23
    1932:	21 f0       	breq	.+8      	; 0x193c <__floatsisf+0x54>
    1934:	9e e8       	ldi	r25, 0x8E	; 142
    1936:	87 2f       	mov	r24, r23
    1938:	76 2f       	mov	r23, r22
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <__floatsisf+0x5e>
    193c:	66 23       	and	r22, r22
    193e:	71 f0       	breq	.+28     	; 0x195c <__floatsisf+0x74>
    1940:	96 e8       	ldi	r25, 0x86	; 134
    1942:	86 2f       	mov	r24, r22
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	2a f0       	brmi	.+10     	; 0x1954 <__floatsisf+0x6c>
    194a:	9a 95       	dec	r25
    194c:	66 0f       	add	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	da f7       	brpl	.-10     	; 0x194a <__floatsisf+0x62>
    1954:	88 0f       	add	r24, r24
    1956:	96 95       	lsr	r25
    1958:	87 95       	ror	r24
    195a:	97 f9       	bld	r25, 7
    195c:	08 95       	ret

0000195e <__fp_cmp>:
    195e:	99 0f       	add	r25, r25
    1960:	00 08       	sbc	r0, r0
    1962:	55 0f       	add	r21, r21
    1964:	aa 0b       	sbc	r26, r26
    1966:	e0 e8       	ldi	r30, 0x80	; 128
    1968:	fe ef       	ldi	r31, 0xFE	; 254
    196a:	16 16       	cp	r1, r22
    196c:	17 06       	cpc	r1, r23
    196e:	e8 07       	cpc	r30, r24
    1970:	f9 07       	cpc	r31, r25
    1972:	c0 f0       	brcs	.+48     	; 0x19a4 <__fp_cmp+0x46>
    1974:	12 16       	cp	r1, r18
    1976:	13 06       	cpc	r1, r19
    1978:	e4 07       	cpc	r30, r20
    197a:	f5 07       	cpc	r31, r21
    197c:	98 f0       	brcs	.+38     	; 0x19a4 <__fp_cmp+0x46>
    197e:	62 1b       	sub	r22, r18
    1980:	73 0b       	sbc	r23, r19
    1982:	84 0b       	sbc	r24, r20
    1984:	95 0b       	sbc	r25, r21
    1986:	39 f4       	brne	.+14     	; 0x1996 <__fp_cmp+0x38>
    1988:	0a 26       	eor	r0, r26
    198a:	61 f0       	breq	.+24     	; 0x19a4 <__fp_cmp+0x46>
    198c:	23 2b       	or	r18, r19
    198e:	24 2b       	or	r18, r20
    1990:	25 2b       	or	r18, r21
    1992:	21 f4       	brne	.+8      	; 0x199c <__fp_cmp+0x3e>
    1994:	08 95       	ret
    1996:	0a 26       	eor	r0, r26
    1998:	09 f4       	brne	.+2      	; 0x199c <__fp_cmp+0x3e>
    199a:	a1 40       	sbci	r26, 0x01	; 1
    199c:	a6 95       	lsr	r26
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	81 1d       	adc	r24, r1
    19a2:	81 1d       	adc	r24, r1
    19a4:	08 95       	ret

000019a6 <__fp_inf>:
    19a6:	97 f9       	bld	r25, 7
    19a8:	9f 67       	ori	r25, 0x7F	; 127
    19aa:	80 e8       	ldi	r24, 0x80	; 128
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	08 95       	ret

000019b2 <__fp_nan>:
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	80 ec       	ldi	r24, 0xC0	; 192
    19b6:	08 95       	ret

000019b8 <__fp_powser>:
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	1f 93       	push	r17
    19be:	0f 93       	push	r16
    19c0:	ff 92       	push	r15
    19c2:	ef 92       	push	r14
    19c4:	df 92       	push	r13
    19c6:	7b 01       	movw	r14, r22
    19c8:	8c 01       	movw	r16, r24
    19ca:	68 94       	set
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <__fp_powser+0x20>
    19ce:	da 2e       	mov	r13, r26
    19d0:	ef 01       	movw	r28, r30
    19d2:	af d0       	rcall	.+350    	; 0x1b32 <__mulsf3x>
    19d4:	fe 01       	movw	r30, r28
    19d6:	e8 94       	clt
    19d8:	a5 91       	lpm	r26, Z+
    19da:	25 91       	lpm	r18, Z+
    19dc:	35 91       	lpm	r19, Z+
    19de:	45 91       	lpm	r20, Z+
    19e0:	55 91       	lpm	r21, Z+
    19e2:	ae f3       	brts	.-22     	; 0x19ce <__fp_powser+0x16>
    19e4:	ef 01       	movw	r28, r30
    19e6:	29 de       	rcall	.-942    	; 0x163a <__addsf3x>
    19e8:	fe 01       	movw	r30, r28
    19ea:	97 01       	movw	r18, r14
    19ec:	a8 01       	movw	r20, r16
    19ee:	da 94       	dec	r13
    19f0:	79 f7       	brne	.-34     	; 0x19d0 <__fp_powser+0x18>
    19f2:	df 90       	pop	r13
    19f4:	ef 90       	pop	r14
    19f6:	ff 90       	pop	r15
    19f8:	0f 91       	pop	r16
    19fa:	1f 91       	pop	r17
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <__fp_pscA>:
    1a02:	00 24       	eor	r0, r0
    1a04:	0a 94       	dec	r0
    1a06:	16 16       	cp	r1, r22
    1a08:	17 06       	cpc	r1, r23
    1a0a:	18 06       	cpc	r1, r24
    1a0c:	09 06       	cpc	r0, r25
    1a0e:	08 95       	ret

00001a10 <__fp_pscB>:
    1a10:	00 24       	eor	r0, r0
    1a12:	0a 94       	dec	r0
    1a14:	12 16       	cp	r1, r18
    1a16:	13 06       	cpc	r1, r19
    1a18:	14 06       	cpc	r1, r20
    1a1a:	05 06       	cpc	r0, r21
    1a1c:	08 95       	ret
    1a1e:	c9 cf       	rjmp	.-110    	; 0x19b2 <__fp_nan>

00001a20 <__fp_rempio2>:
    1a20:	50 d0       	rcall	.+160    	; 0x1ac2 <__fp_splitA>
    1a22:	e8 f3       	brcs	.-6      	; 0x1a1e <__fp_pscB+0xe>
    1a24:	e8 94       	clt
    1a26:	e0 e0       	ldi	r30, 0x00	; 0
    1a28:	bb 27       	eor	r27, r27
    1a2a:	9f 57       	subi	r25, 0x7F	; 127
    1a2c:	f0 f0       	brcs	.+60     	; 0x1a6a <__fp_rempio2+0x4a>
    1a2e:	2a ed       	ldi	r18, 0xDA	; 218
    1a30:	3f e0       	ldi	r19, 0x0F	; 15
    1a32:	49 ec       	ldi	r20, 0xC9	; 201
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <__fp_rempio2+0x22>
    1a36:	ee 0f       	add	r30, r30
    1a38:	bb 0f       	add	r27, r27
    1a3a:	66 1f       	adc	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	88 1f       	adc	r24, r24
    1a40:	28 f0       	brcs	.+10     	; 0x1a4c <__fp_rempio2+0x2c>
    1a42:	b2 3a       	cpi	r27, 0xA2	; 162
    1a44:	62 07       	cpc	r22, r18
    1a46:	73 07       	cpc	r23, r19
    1a48:	84 07       	cpc	r24, r20
    1a4a:	28 f0       	brcs	.+10     	; 0x1a56 <__fp_rempio2+0x36>
    1a4c:	b2 5a       	subi	r27, 0xA2	; 162
    1a4e:	62 0b       	sbc	r22, r18
    1a50:	73 0b       	sbc	r23, r19
    1a52:	84 0b       	sbc	r24, r20
    1a54:	e3 95       	inc	r30
    1a56:	9a 95       	dec	r25
    1a58:	72 f7       	brpl	.-36     	; 0x1a36 <__fp_rempio2+0x16>
    1a5a:	80 38       	cpi	r24, 0x80	; 128
    1a5c:	30 f4       	brcc	.+12     	; 0x1a6a <__fp_rempio2+0x4a>
    1a5e:	9a 95       	dec	r25
    1a60:	bb 0f       	add	r27, r27
    1a62:	66 1f       	adc	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	88 1f       	adc	r24, r24
    1a68:	d2 f7       	brpl	.-12     	; 0x1a5e <__fp_rempio2+0x3e>
    1a6a:	90 48       	sbci	r25, 0x80	; 128
    1a6c:	83 c1       	rjmp	.+774    	; 0x1d74 <__fp_mpack_finite>

00001a6e <__fp_round>:
    1a6e:	09 2e       	mov	r0, r25
    1a70:	03 94       	inc	r0
    1a72:	00 0c       	add	r0, r0
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <__fp_round+0xc>
    1a76:	88 23       	and	r24, r24
    1a78:	52 f0       	brmi	.+20     	; 0x1a8e <__fp_round+0x20>
    1a7a:	bb 0f       	add	r27, r27
    1a7c:	40 f4       	brcc	.+16     	; 0x1a8e <__fp_round+0x20>
    1a7e:	bf 2b       	or	r27, r31
    1a80:	11 f4       	brne	.+4      	; 0x1a86 <__fp_round+0x18>
    1a82:	60 ff       	sbrs	r22, 0
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <__fp_round+0x20>
    1a86:	6f 5f       	subi	r22, 0xFF	; 255
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	08 95       	ret

00001a90 <__fp_sinus>:
    1a90:	ef 93       	push	r30
    1a92:	e0 ff       	sbrs	r30, 0
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <__fp_sinus+0x12>
    1a96:	a2 ea       	ldi	r26, 0xA2	; 162
    1a98:	2a ed       	ldi	r18, 0xDA	; 218
    1a9a:	3f e0       	ldi	r19, 0x0F	; 15
    1a9c:	49 ec       	ldi	r20, 0xC9	; 201
    1a9e:	5f eb       	ldi	r21, 0xBF	; 191
    1aa0:	cc dd       	rcall	.-1128   	; 0x163a <__addsf3x>
    1aa2:	e5 df       	rcall	.-54     	; 0x1a6e <__fp_round>
    1aa4:	0f 90       	pop	r0
    1aa6:	03 94       	inc	r0
    1aa8:	01 fc       	sbrc	r0, 1
    1aaa:	90 58       	subi	r25, 0x80	; 128
    1aac:	e1 e1       	ldi	r30, 0x11	; 17
    1aae:	f1 e0       	ldi	r31, 0x01	; 1
    1ab0:	74 c1       	rjmp	.+744    	; 0x1d9a <__fp_powsodd>

00001ab2 <__fp_split3>:
    1ab2:	57 fd       	sbrc	r21, 7
    1ab4:	90 58       	subi	r25, 0x80	; 128
    1ab6:	44 0f       	add	r20, r20
    1ab8:	55 1f       	adc	r21, r21
    1aba:	59 f0       	breq	.+22     	; 0x1ad2 <__fp_splitA+0x10>
    1abc:	5f 3f       	cpi	r21, 0xFF	; 255
    1abe:	71 f0       	breq	.+28     	; 0x1adc <__fp_splitA+0x1a>
    1ac0:	47 95       	ror	r20

00001ac2 <__fp_splitA>:
    1ac2:	88 0f       	add	r24, r24
    1ac4:	97 fb       	bst	r25, 7
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	61 f0       	breq	.+24     	; 0x1ae2 <__fp_splitA+0x20>
    1aca:	9f 3f       	cpi	r25, 0xFF	; 255
    1acc:	79 f0       	breq	.+30     	; 0x1aec <__fp_splitA+0x2a>
    1ace:	87 95       	ror	r24
    1ad0:	08 95       	ret
    1ad2:	12 16       	cp	r1, r18
    1ad4:	13 06       	cpc	r1, r19
    1ad6:	14 06       	cpc	r1, r20
    1ad8:	55 1f       	adc	r21, r21
    1ada:	f2 cf       	rjmp	.-28     	; 0x1ac0 <__fp_split3+0xe>
    1adc:	46 95       	lsr	r20
    1ade:	f1 df       	rcall	.-30     	; 0x1ac2 <__fp_splitA>
    1ae0:	08 c0       	rjmp	.+16     	; 0x1af2 <__fp_splitA+0x30>
    1ae2:	16 16       	cp	r1, r22
    1ae4:	17 06       	cpc	r1, r23
    1ae6:	18 06       	cpc	r1, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	f1 cf       	rjmp	.-30     	; 0x1ace <__fp_splitA+0xc>
    1aec:	86 95       	lsr	r24
    1aee:	71 05       	cpc	r23, r1
    1af0:	61 05       	cpc	r22, r1
    1af2:	08 94       	sec
    1af4:	08 95       	ret

00001af6 <__fp_zero>:
    1af6:	e8 94       	clt

00001af8 <__fp_szero>:
    1af8:	bb 27       	eor	r27, r27
    1afa:	66 27       	eor	r22, r22
    1afc:	77 27       	eor	r23, r23
    1afe:	cb 01       	movw	r24, r22
    1b00:	97 f9       	bld	r25, 7
    1b02:	08 95       	ret

00001b04 <__gesf2>:
    1b04:	2c df       	rcall	.-424    	; 0x195e <__fp_cmp>
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <__gesf2+0x6>
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	08 95       	ret

00001b0c <inverse>:
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	ac 01       	movw	r20, r24
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	80 e8       	ldi	r24, 0x80	; 128
    1b16:	9f e3       	ldi	r25, 0x3F	; 63
    1b18:	4c ce       	rjmp	.-872    	; 0x17b2 <__divsf3>

00001b1a <__mulsf3>:
    1b1a:	0b d0       	rcall	.+22     	; 0x1b32 <__mulsf3x>
    1b1c:	a8 cf       	rjmp	.-176    	; 0x1a6e <__fp_round>
    1b1e:	71 df       	rcall	.-286    	; 0x1a02 <__fp_pscA>
    1b20:	28 f0       	brcs	.+10     	; 0x1b2c <__mulsf3+0x12>
    1b22:	76 df       	rcall	.-276    	; 0x1a10 <__fp_pscB>
    1b24:	18 f0       	brcs	.+6      	; 0x1b2c <__mulsf3+0x12>
    1b26:	95 23       	and	r25, r21
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <__mulsf3+0x12>
    1b2a:	3d cf       	rjmp	.-390    	; 0x19a6 <__fp_inf>
    1b2c:	42 cf       	rjmp	.-380    	; 0x19b2 <__fp_nan>
    1b2e:	11 24       	eor	r1, r1
    1b30:	e3 cf       	rjmp	.-58     	; 0x1af8 <__fp_szero>

00001b32 <__mulsf3x>:
    1b32:	bf df       	rcall	.-130    	; 0x1ab2 <__fp_split3>
    1b34:	a0 f3       	brcs	.-24     	; 0x1b1e <__mulsf3+0x4>

00001b36 <__mulsf3_pse>:
    1b36:	95 9f       	mul	r25, r21
    1b38:	d1 f3       	breq	.-12     	; 0x1b2e <__mulsf3+0x14>
    1b3a:	95 0f       	add	r25, r21
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	55 1f       	adc	r21, r21
    1b40:	62 9f       	mul	r22, r18
    1b42:	f0 01       	movw	r30, r0
    1b44:	72 9f       	mul	r23, r18
    1b46:	bb 27       	eor	r27, r27
    1b48:	f0 0d       	add	r31, r0
    1b4a:	b1 1d       	adc	r27, r1
    1b4c:	63 9f       	mul	r22, r19
    1b4e:	aa 27       	eor	r26, r26
    1b50:	f0 0d       	add	r31, r0
    1b52:	b1 1d       	adc	r27, r1
    1b54:	aa 1f       	adc	r26, r26
    1b56:	64 9f       	mul	r22, r20
    1b58:	66 27       	eor	r22, r22
    1b5a:	b0 0d       	add	r27, r0
    1b5c:	a1 1d       	adc	r26, r1
    1b5e:	66 1f       	adc	r22, r22
    1b60:	82 9f       	mul	r24, r18
    1b62:	22 27       	eor	r18, r18
    1b64:	b0 0d       	add	r27, r0
    1b66:	a1 1d       	adc	r26, r1
    1b68:	62 1f       	adc	r22, r18
    1b6a:	73 9f       	mul	r23, r19
    1b6c:	b0 0d       	add	r27, r0
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	62 1f       	adc	r22, r18
    1b72:	83 9f       	mul	r24, r19
    1b74:	a0 0d       	add	r26, r0
    1b76:	61 1d       	adc	r22, r1
    1b78:	22 1f       	adc	r18, r18
    1b7a:	74 9f       	mul	r23, r20
    1b7c:	33 27       	eor	r19, r19
    1b7e:	a0 0d       	add	r26, r0
    1b80:	61 1d       	adc	r22, r1
    1b82:	23 1f       	adc	r18, r19
    1b84:	84 9f       	mul	r24, r20
    1b86:	60 0d       	add	r22, r0
    1b88:	21 1d       	adc	r18, r1
    1b8a:	82 2f       	mov	r24, r18
    1b8c:	76 2f       	mov	r23, r22
    1b8e:	6a 2f       	mov	r22, r26
    1b90:	11 24       	eor	r1, r1
    1b92:	9f 57       	subi	r25, 0x7F	; 127
    1b94:	50 40       	sbci	r21, 0x00	; 0
    1b96:	8a f0       	brmi	.+34     	; 0x1bba <__mulsf3_pse+0x84>
    1b98:	e1 f0       	breq	.+56     	; 0x1bd2 <__mulsf3_pse+0x9c>
    1b9a:	88 23       	and	r24, r24
    1b9c:	4a f0       	brmi	.+18     	; 0x1bb0 <__mulsf3_pse+0x7a>
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	bb 1f       	adc	r27, r27
    1ba4:	66 1f       	adc	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	91 50       	subi	r25, 0x01	; 1
    1bac:	50 40       	sbci	r21, 0x00	; 0
    1bae:	a9 f7       	brne	.-22     	; 0x1b9a <__mulsf3_pse+0x64>
    1bb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	70 f0       	brcs	.+28     	; 0x1bd2 <__mulsf3_pse+0x9c>
    1bb6:	f7 ce       	rjmp	.-530    	; 0x19a6 <__fp_inf>
    1bb8:	9f cf       	rjmp	.-194    	; 0x1af8 <__fp_szero>
    1bba:	5f 3f       	cpi	r21, 0xFF	; 255
    1bbc:	ec f3       	brlt	.-6      	; 0x1bb8 <__mulsf3_pse+0x82>
    1bbe:	98 3e       	cpi	r25, 0xE8	; 232
    1bc0:	dc f3       	brlt	.-10     	; 0x1bb8 <__mulsf3_pse+0x82>
    1bc2:	86 95       	lsr	r24
    1bc4:	77 95       	ror	r23
    1bc6:	67 95       	ror	r22
    1bc8:	b7 95       	ror	r27
    1bca:	f7 95       	ror	r31
    1bcc:	e7 95       	ror	r30
    1bce:	9f 5f       	subi	r25, 0xFF	; 255
    1bd0:	c1 f7       	brne	.-16     	; 0x1bc2 <__mulsf3_pse+0x8c>
    1bd2:	fe 2b       	or	r31, r30
    1bd4:	88 0f       	add	r24, r24
    1bd6:	91 1d       	adc	r25, r1
    1bd8:	96 95       	lsr	r25
    1bda:	87 95       	ror	r24
    1bdc:	97 f9       	bld	r25, 7
    1bde:	08 95       	ret

00001be0 <pow>:
    1be0:	fa 01       	movw	r30, r20
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	30 96       	adiw	r30, 0x00	; 0
    1be8:	21 05       	cpc	r18, r1
    1bea:	31 05       	cpc	r19, r1
    1bec:	99 f1       	breq	.+102    	; 0x1c54 <pow+0x74>
    1bee:	61 15       	cp	r22, r1
    1bf0:	71 05       	cpc	r23, r1
    1bf2:	61 f4       	brne	.+24     	; 0x1c0c <pow+0x2c>
    1bf4:	80 38       	cpi	r24, 0x80	; 128
    1bf6:	bf e3       	ldi	r27, 0x3F	; 63
    1bf8:	9b 07       	cpc	r25, r27
    1bfa:	49 f1       	breq	.+82     	; 0x1c4e <pow+0x6e>
    1bfc:	68 94       	set
    1bfe:	90 38       	cpi	r25, 0x80	; 128
    1c00:	81 05       	cpc	r24, r1
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <pow+0x3c>
    1c04:	80 38       	cpi	r24, 0x80	; 128
    1c06:	bf ef       	ldi	r27, 0xFF	; 255
    1c08:	9b 07       	cpc	r25, r27
    1c0a:	41 f0       	breq	.+16     	; 0x1c1c <pow+0x3c>
    1c0c:	99 23       	and	r25, r25
    1c0e:	42 f5       	brpl	.+80     	; 0x1c60 <pow+0x80>
    1c10:	ff 3f       	cpi	r31, 0xFF	; 255
    1c12:	e1 05       	cpc	r30, r1
    1c14:	31 05       	cpc	r19, r1
    1c16:	21 05       	cpc	r18, r1
    1c18:	11 f1       	breq	.+68     	; 0x1c5e <pow+0x7e>
    1c1a:	e8 94       	clt
    1c1c:	08 94       	sec
    1c1e:	e7 95       	ror	r30
    1c20:	d9 01       	movw	r26, r18
    1c22:	aa 23       	and	r26, r26
    1c24:	29 f4       	brne	.+10     	; 0x1c30 <pow+0x50>
    1c26:	ab 2f       	mov	r26, r27
    1c28:	be 2f       	mov	r27, r30
    1c2a:	f8 5f       	subi	r31, 0xF8	; 248
    1c2c:	d0 f3       	brcs	.-12     	; 0x1c22 <pow+0x42>
    1c2e:	10 c0       	rjmp	.+32     	; 0x1c50 <pow+0x70>
    1c30:	ff 5f       	subi	r31, 0xFF	; 255
    1c32:	70 f4       	brcc	.+28     	; 0x1c50 <pow+0x70>
    1c34:	a6 95       	lsr	r26
    1c36:	e0 f7       	brcc	.-8      	; 0x1c30 <pow+0x50>
    1c38:	f7 39       	cpi	r31, 0x97	; 151
    1c3a:	50 f0       	brcs	.+20     	; 0x1c50 <pow+0x70>
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <pow+0x64>
    1c3e:	ff 3a       	cpi	r31, 0xAF	; 175
    1c40:	38 f4       	brcc	.+14     	; 0x1c50 <pow+0x70>
    1c42:	9f 77       	andi	r25, 0x7F	; 127
    1c44:	9f 93       	push	r25
    1c46:	0c d0       	rcall	.+24     	; 0x1c60 <pow+0x80>
    1c48:	0f 90       	pop	r0
    1c4a:	07 fc       	sbrc	r0, 7
    1c4c:	90 58       	subi	r25, 0x80	; 128
    1c4e:	08 95       	ret
    1c50:	3e f0       	brts	.+14     	; 0x1c60 <pow+0x80>
    1c52:	af ce       	rjmp	.-674    	; 0x19b2 <__fp_nan>
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	80 e8       	ldi	r24, 0x80	; 128
    1c5a:	9f e3       	ldi	r25, 0x3F	; 63
    1c5c:	08 95       	ret
    1c5e:	4f e7       	ldi	r20, 0x7F	; 127
    1c60:	9f 77       	andi	r25, 0x7F	; 127
    1c62:	5f 93       	push	r21
    1c64:	4f 93       	push	r20
    1c66:	3f 93       	push	r19
    1c68:	2f 93       	push	r18
    1c6a:	e3 d0       	rcall	.+454    	; 0x1e32 <log>
    1c6c:	2f 91       	pop	r18
    1c6e:	3f 91       	pop	r19
    1c70:	4f 91       	pop	r20
    1c72:	5f 91       	pop	r21
    1c74:	52 df       	rcall	.-348    	; 0x1b1a <__mulsf3>
    1c76:	50 c0       	rjmp	.+160    	; 0x1d18 <exp>

00001c78 <sin>:
    1c78:	9f 93       	push	r25
    1c7a:	d2 de       	rcall	.-604    	; 0x1a20 <__fp_rempio2>
    1c7c:	0f 90       	pop	r0
    1c7e:	07 fc       	sbrc	r0, 7
    1c80:	ee 5f       	subi	r30, 0xFE	; 254
    1c82:	06 cf       	rjmp	.-500    	; 0x1a90 <__fp_sinus>
    1c84:	11 f4       	brne	.+4      	; 0x1c8a <sin+0x12>
    1c86:	0e f4       	brtc	.+2      	; 0x1c8a <sin+0x12>
    1c88:	94 ce       	rjmp	.-728    	; 0x19b2 <__fp_nan>
    1c8a:	72 c0       	rjmp	.+228    	; 0x1d70 <__fp_mpack>

00001c8c <sqrt>:
    1c8c:	1a df       	rcall	.-460    	; 0x1ac2 <__fp_splitA>
    1c8e:	d0 f3       	brcs	.-12     	; 0x1c84 <sin+0xc>
    1c90:	99 23       	and	r25, r25
    1c92:	d9 f3       	breq	.-10     	; 0x1c8a <sin+0x12>
    1c94:	ce f3       	brts	.-14     	; 0x1c88 <sin+0x10>
    1c96:	9f 57       	subi	r25, 0x7F	; 127
    1c98:	55 0b       	sbc	r21, r21
    1c9a:	87 ff       	sbrs	r24, 7
    1c9c:	77 d0       	rcall	.+238    	; 0x1d8c <__fp_norm2>
    1c9e:	00 24       	eor	r0, r0
    1ca0:	a0 e6       	ldi	r26, 0x60	; 96
    1ca2:	40 ea       	ldi	r20, 0xA0	; 160
    1ca4:	90 01       	movw	r18, r0
    1ca6:	80 58       	subi	r24, 0x80	; 128
    1ca8:	56 95       	lsr	r21
    1caa:	97 95       	ror	r25
    1cac:	28 f4       	brcc	.+10     	; 0x1cb8 <sqrt+0x2c>
    1cae:	80 5c       	subi	r24, 0xC0	; 192
    1cb0:	66 0f       	add	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	20 f0       	brcs	.+8      	; 0x1cc0 <sqrt+0x34>
    1cb8:	26 17       	cp	r18, r22
    1cba:	37 07       	cpc	r19, r23
    1cbc:	48 07       	cpc	r20, r24
    1cbe:	30 f4       	brcc	.+12     	; 0x1ccc <sqrt+0x40>
    1cc0:	62 1b       	sub	r22, r18
    1cc2:	73 0b       	sbc	r23, r19
    1cc4:	84 0b       	sbc	r24, r20
    1cc6:	20 29       	or	r18, r0
    1cc8:	31 29       	or	r19, r1
    1cca:	4a 2b       	or	r20, r26
    1ccc:	a6 95       	lsr	r26
    1cce:	17 94       	ror	r1
    1cd0:	07 94       	ror	r0
    1cd2:	20 25       	eor	r18, r0
    1cd4:	31 25       	eor	r19, r1
    1cd6:	4a 27       	eor	r20, r26
    1cd8:	58 f7       	brcc	.-42     	; 0x1cb0 <sqrt+0x24>
    1cda:	66 0f       	add	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	20 f0       	brcs	.+8      	; 0x1cea <sqrt+0x5e>
    1ce2:	26 17       	cp	r18, r22
    1ce4:	37 07       	cpc	r19, r23
    1ce6:	48 07       	cpc	r20, r24
    1ce8:	30 f4       	brcc	.+12     	; 0x1cf6 <sqrt+0x6a>
    1cea:	62 0b       	sbc	r22, r18
    1cec:	73 0b       	sbc	r23, r19
    1cee:	84 0b       	sbc	r24, r20
    1cf0:	20 0d       	add	r18, r0
    1cf2:	31 1d       	adc	r19, r1
    1cf4:	41 1d       	adc	r20, r1
    1cf6:	a0 95       	com	r26
    1cf8:	81 f7       	brne	.-32     	; 0x1cda <sqrt+0x4e>
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	84 2f       	mov	r24, r20
    1cfe:	91 58       	subi	r25, 0x81	; 129
    1d00:	88 0f       	add	r24, r24
    1d02:	96 95       	lsr	r25
    1d04:	87 95       	ror	r24
    1d06:	08 95       	ret

00001d08 <square>:
    1d08:	9b 01       	movw	r18, r22
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	06 cf       	rjmp	.-500    	; 0x1b1a <__mulsf3>
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <square+0xe>
    1d10:	0e f0       	brts	.+2      	; 0x1d14 <square+0xc>
    1d12:	49 ce       	rjmp	.-878    	; 0x19a6 <__fp_inf>
    1d14:	f0 ce       	rjmp	.-544    	; 0x1af6 <__fp_zero>
    1d16:	4d ce       	rjmp	.-870    	; 0x19b2 <__fp_nan>

00001d18 <exp>:
    1d18:	d4 de       	rcall	.-600    	; 0x1ac2 <__fp_splitA>
    1d1a:	c8 f3       	brcs	.-14     	; 0x1d0e <square+0x6>
    1d1c:	96 38       	cpi	r25, 0x86	; 134
    1d1e:	c0 f7       	brcc	.-16     	; 0x1d10 <square+0x8>
    1d20:	07 f8       	bld	r0, 7
    1d22:	0f 92       	push	r0
    1d24:	e8 94       	clt
    1d26:	2b e3       	ldi	r18, 0x3B	; 59
    1d28:	3a ea       	ldi	r19, 0xAA	; 170
    1d2a:	48 eb       	ldi	r20, 0xB8	; 184
    1d2c:	5f e7       	ldi	r21, 0x7F	; 127
    1d2e:	03 df       	rcall	.-506    	; 0x1b36 <__mulsf3_pse>
    1d30:	0f 92       	push	r0
    1d32:	0f 92       	push	r0
    1d34:	0f 92       	push	r0
    1d36:	4d b7       	in	r20, 0x3d	; 61
    1d38:	5e b7       	in	r21, 0x3e	; 62
    1d3a:	0f 92       	push	r0
    1d3c:	ba d0       	rcall	.+372    	; 0x1eb2 <modf>
    1d3e:	ef e2       	ldi	r30, 0x2F	; 47
    1d40:	f1 e0       	ldi	r31, 0x01	; 1
    1d42:	3a de       	rcall	.-908    	; 0x19b8 <__fp_powser>
    1d44:	4f 91       	pop	r20
    1d46:	5f 91       	pop	r21
    1d48:	ef 91       	pop	r30
    1d4a:	ff 91       	pop	r31
    1d4c:	e5 95       	asr	r30
    1d4e:	ee 1f       	adc	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	49 f0       	breq	.+18     	; 0x1d66 <exp+0x4e>
    1d54:	fe 57       	subi	r31, 0x7E	; 126
    1d56:	e0 68       	ori	r30, 0x80	; 128
    1d58:	44 27       	eor	r20, r20
    1d5a:	ee 0f       	add	r30, r30
    1d5c:	44 1f       	adc	r20, r20
    1d5e:	fa 95       	dec	r31
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <exp+0x42>
    1d62:	41 95       	neg	r20
    1d64:	55 0b       	sbc	r21, r21
    1d66:	2c d0       	rcall	.+88     	; 0x1dc0 <ldexp>
    1d68:	0f 90       	pop	r0
    1d6a:	07 fe       	sbrs	r0, 7
    1d6c:	cf ce       	rjmp	.-610    	; 0x1b0c <inverse>
    1d6e:	08 95       	ret

00001d70 <__fp_mpack>:
    1d70:	9f 3f       	cpi	r25, 0xFF	; 255
    1d72:	31 f0       	breq	.+12     	; 0x1d80 <__fp_mpack_finite+0xc>

00001d74 <__fp_mpack_finite>:
    1d74:	91 50       	subi	r25, 0x01	; 1
    1d76:	20 f4       	brcc	.+8      	; 0x1d80 <__fp_mpack_finite+0xc>
    1d78:	87 95       	ror	r24
    1d7a:	77 95       	ror	r23
    1d7c:	67 95       	ror	r22
    1d7e:	b7 95       	ror	r27
    1d80:	88 0f       	add	r24, r24
    1d82:	91 1d       	adc	r25, r1
    1d84:	96 95       	lsr	r25
    1d86:	87 95       	ror	r24
    1d88:	97 f9       	bld	r25, 7
    1d8a:	08 95       	ret

00001d8c <__fp_norm2>:
    1d8c:	91 50       	subi	r25, 0x01	; 1
    1d8e:	50 40       	sbci	r21, 0x00	; 0
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	d2 f7       	brpl	.-12     	; 0x1d8c <__fp_norm2>
    1d98:	08 95       	ret

00001d9a <__fp_powsodd>:
    1d9a:	9f 93       	push	r25
    1d9c:	8f 93       	push	r24
    1d9e:	7f 93       	push	r23
    1da0:	6f 93       	push	r22
    1da2:	ff 93       	push	r31
    1da4:	ef 93       	push	r30
    1da6:	9b 01       	movw	r18, r22
    1da8:	ac 01       	movw	r20, r24
    1daa:	b7 de       	rcall	.-658    	; 0x1b1a <__mulsf3>
    1dac:	ef 91       	pop	r30
    1dae:	ff 91       	pop	r31
    1db0:	03 de       	rcall	.-1018   	; 0x19b8 <__fp_powser>
    1db2:	2f 91       	pop	r18
    1db4:	3f 91       	pop	r19
    1db6:	4f 91       	pop	r20
    1db8:	5f 91       	pop	r21
    1dba:	af ce       	rjmp	.-674    	; 0x1b1a <__mulsf3>
    1dbc:	f4 cd       	rjmp	.-1048   	; 0x19a6 <__fp_inf>
    1dbe:	d8 cf       	rjmp	.-80     	; 0x1d70 <__fp_mpack>

00001dc0 <ldexp>:
    1dc0:	80 de       	rcall	.-768    	; 0x1ac2 <__fp_splitA>
    1dc2:	e8 f3       	brcs	.-6      	; 0x1dbe <__fp_powsodd+0x24>
    1dc4:	99 23       	and	r25, r25
    1dc6:	d9 f3       	breq	.-10     	; 0x1dbe <__fp_powsodd+0x24>
    1dc8:	94 0f       	add	r25, r20
    1dca:	51 1d       	adc	r21, r1
    1dcc:	bb f3       	brvs	.-18     	; 0x1dbc <__fp_powsodd+0x22>
    1dce:	91 50       	subi	r25, 0x01	; 1
    1dd0:	50 40       	sbci	r21, 0x00	; 0
    1dd2:	94 f0       	brlt	.+36     	; 0x1df8 <ldexp+0x38>
    1dd4:	59 f0       	breq	.+22     	; 0x1dec <ldexp+0x2c>
    1dd6:	88 23       	and	r24, r24
    1dd8:	32 f0       	brmi	.+12     	; 0x1de6 <ldexp+0x26>
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	91 50       	subi	r25, 0x01	; 1
    1de2:	50 40       	sbci	r21, 0x00	; 0
    1de4:	c1 f7       	brne	.-16     	; 0x1dd6 <ldexp+0x16>
    1de6:	9e 3f       	cpi	r25, 0xFE	; 254
    1de8:	51 05       	cpc	r21, r1
    1dea:	44 f7       	brge	.-48     	; 0x1dbc <__fp_powsodd+0x22>
    1dec:	88 0f       	add	r24, r24
    1dee:	91 1d       	adc	r25, r1
    1df0:	96 95       	lsr	r25
    1df2:	87 95       	ror	r24
    1df4:	97 f9       	bld	r25, 7
    1df6:	08 95       	ret
    1df8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dfa:	ac f0       	brlt	.+42     	; 0x1e26 <ldexp+0x66>
    1dfc:	98 3e       	cpi	r25, 0xE8	; 232
    1dfe:	9c f0       	brlt	.+38     	; 0x1e26 <ldexp+0x66>
    1e00:	bb 27       	eor	r27, r27
    1e02:	86 95       	lsr	r24
    1e04:	77 95       	ror	r23
    1e06:	67 95       	ror	r22
    1e08:	b7 95       	ror	r27
    1e0a:	08 f4       	brcc	.+2      	; 0x1e0e <ldexp+0x4e>
    1e0c:	b1 60       	ori	r27, 0x01	; 1
    1e0e:	93 95       	inc	r25
    1e10:	c1 f7       	brne	.-16     	; 0x1e02 <ldexp+0x42>
    1e12:	bb 0f       	add	r27, r27
    1e14:	58 f7       	brcc	.-42     	; 0x1dec <ldexp+0x2c>
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <ldexp+0x5c>
    1e18:	60 ff       	sbrs	r22, 0
    1e1a:	e8 cf       	rjmp	.-48     	; 0x1dec <ldexp+0x2c>
    1e1c:	6f 5f       	subi	r22, 0xFF	; 255
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	8f 4f       	sbci	r24, 0xFF	; 255
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	e3 cf       	rjmp	.-58     	; 0x1dec <ldexp+0x2c>
    1e26:	68 ce       	rjmp	.-816    	; 0x1af8 <__fp_szero>
    1e28:	0e f0       	brts	.+2      	; 0x1e2c <ldexp+0x6c>
    1e2a:	a2 cf       	rjmp	.-188    	; 0x1d70 <__fp_mpack>
    1e2c:	c2 cd       	rjmp	.-1148   	; 0x19b2 <__fp_nan>
    1e2e:	68 94       	set
    1e30:	ba cd       	rjmp	.-1164   	; 0x19a6 <__fp_inf>

00001e32 <log>:
    1e32:	47 de       	rcall	.-882    	; 0x1ac2 <__fp_splitA>
    1e34:	c8 f3       	brcs	.-14     	; 0x1e28 <ldexp+0x68>
    1e36:	99 23       	and	r25, r25
    1e38:	d1 f3       	breq	.-12     	; 0x1e2e <ldexp+0x6e>
    1e3a:	c6 f3       	brts	.-16     	; 0x1e2c <ldexp+0x6c>
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	1f 93       	push	r17
    1e42:	0f 93       	push	r16
    1e44:	ff 92       	push	r15
    1e46:	c9 2f       	mov	r28, r25
    1e48:	dd 27       	eor	r29, r29
    1e4a:	88 23       	and	r24, r24
    1e4c:	2a f0       	brmi	.+10     	; 0x1e58 <log+0x26>
    1e4e:	21 97       	sbiw	r28, 0x01	; 1
    1e50:	66 0f       	add	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	88 1f       	adc	r24, r24
    1e56:	da f7       	brpl	.-10     	; 0x1e4e <log+0x1c>
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f eb       	ldi	r21, 0xBF	; 191
    1e60:	9f e3       	ldi	r25, 0x3F	; 63
    1e62:	88 39       	cpi	r24, 0x98	; 152
    1e64:	20 f0       	brcs	.+8      	; 0x1e6e <log+0x3c>
    1e66:	80 3e       	cpi	r24, 0xE0	; 224
    1e68:	30 f0       	brcs	.+12     	; 0x1e76 <log+0x44>
    1e6a:	21 96       	adiw	r28, 0x01	; 1
    1e6c:	8f 77       	andi	r24, 0x7F	; 127
    1e6e:	d4 db       	rcall	.-2136   	; 0x1618 <__addsf3>
    1e70:	e7 e5       	ldi	r30, 0x57	; 87
    1e72:	f1 e0       	ldi	r31, 0x01	; 1
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <log+0x4a>
    1e76:	d0 db       	rcall	.-2144   	; 0x1618 <__addsf3>
    1e78:	e4 e8       	ldi	r30, 0x84	; 132
    1e7a:	f1 e0       	ldi	r31, 0x01	; 1
    1e7c:	9d dd       	rcall	.-1222   	; 0x19b8 <__fp_powser>
    1e7e:	8b 01       	movw	r16, r22
    1e80:	be 01       	movw	r22, r28
    1e82:	ec 01       	movw	r28, r24
    1e84:	fb 2e       	mov	r15, r27
    1e86:	6f 57       	subi	r22, 0x7F	; 127
    1e88:	71 09       	sbc	r23, r1
    1e8a:	75 95       	asr	r23
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 0b       	sbc	r24, r24
    1e90:	99 0b       	sbc	r25, r25
    1e92:	2a dd       	rcall	.-1452   	; 0x18e8 <__floatsisf>
    1e94:	28 e1       	ldi	r18, 0x18	; 24
    1e96:	32 e7       	ldi	r19, 0x72	; 114
    1e98:	41 e3       	ldi	r20, 0x31	; 49
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	4a de       	rcall	.-876    	; 0x1b32 <__mulsf3x>
    1e9e:	af 2d       	mov	r26, r15
    1ea0:	98 01       	movw	r18, r16
    1ea2:	ae 01       	movw	r20, r28
    1ea4:	ff 90       	pop	r15
    1ea6:	0f 91       	pop	r16
    1ea8:	1f 91       	pop	r17
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	c5 db       	rcall	.-2166   	; 0x163a <__addsf3x>
    1eb0:	de cd       	rjmp	.-1092   	; 0x1a6e <__fp_round>

00001eb2 <modf>:
    1eb2:	fa 01       	movw	r30, r20
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	aa 0f       	add	r26, r26
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	9b 01       	movw	r18, r22
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	bf 57       	subi	r27, 0x7F	; 127
    1ec0:	28 f4       	brcc	.+10     	; 0x1ecc <modf+0x1a>
    1ec2:	22 27       	eor	r18, r18
    1ec4:	33 27       	eor	r19, r19
    1ec6:	44 27       	eor	r20, r20
    1ec8:	50 78       	andi	r21, 0x80	; 128
    1eca:	1f c0       	rjmp	.+62     	; 0x1f0a <modf+0x58>
    1ecc:	b7 51       	subi	r27, 0x17	; 23
    1ece:	88 f4       	brcc	.+34     	; 0x1ef2 <modf+0x40>
    1ed0:	ab 2f       	mov	r26, r27
    1ed2:	00 24       	eor	r0, r0
    1ed4:	46 95       	lsr	r20
    1ed6:	37 95       	ror	r19
    1ed8:	27 95       	ror	r18
    1eda:	01 1c       	adc	r0, r1
    1edc:	a3 95       	inc	r26
    1ede:	d2 f3       	brmi	.-12     	; 0x1ed4 <modf+0x22>
    1ee0:	00 20       	and	r0, r0
    1ee2:	69 f0       	breq	.+26     	; 0x1efe <modf+0x4c>
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	44 1f       	adc	r20, r20
    1eea:	b3 95       	inc	r27
    1eec:	da f3       	brmi	.-10     	; 0x1ee4 <modf+0x32>
    1eee:	0d d0       	rcall	.+26     	; 0x1f0a <modf+0x58>
    1ef0:	92 cb       	rjmp	.-2268   	; 0x1616 <__subsf3>
    1ef2:	61 30       	cpi	r22, 0x01	; 1
    1ef4:	71 05       	cpc	r23, r1
    1ef6:	a0 e8       	ldi	r26, 0x80	; 128
    1ef8:	8a 07       	cpc	r24, r26
    1efa:	b9 46       	sbci	r27, 0x69	; 105
    1efc:	30 f4       	brcc	.+12     	; 0x1f0a <modf+0x58>
    1efe:	9b 01       	movw	r18, r22
    1f00:	ac 01       	movw	r20, r24
    1f02:	66 27       	eor	r22, r22
    1f04:	77 27       	eor	r23, r23
    1f06:	88 27       	eor	r24, r24
    1f08:	90 78       	andi	r25, 0x80	; 128
    1f0a:	30 96       	adiw	r30, 0x00	; 0
    1f0c:	21 f0       	breq	.+8      	; 0x1f16 <modf+0x64>
    1f0e:	20 83       	st	Z, r18
    1f10:	31 83       	std	Z+1, r19	; 0x01
    1f12:	42 83       	std	Z+2, r20	; 0x02
    1f14:	53 83       	std	Z+3, r21	; 0x03
    1f16:	08 95       	ret

00001f18 <__udivmodhi4>:
    1f18:	aa 1b       	sub	r26, r26
    1f1a:	bb 1b       	sub	r27, r27
    1f1c:	51 e1       	ldi	r21, 0x11	; 17
    1f1e:	07 c0       	rjmp	.+14     	; 0x1f2e <__udivmodhi4_ep>

00001f20 <__udivmodhi4_loop>:
    1f20:	aa 1f       	adc	r26, r26
    1f22:	bb 1f       	adc	r27, r27
    1f24:	a6 17       	cp	r26, r22
    1f26:	b7 07       	cpc	r27, r23
    1f28:	10 f0       	brcs	.+4      	; 0x1f2e <__udivmodhi4_ep>
    1f2a:	a6 1b       	sub	r26, r22
    1f2c:	b7 0b       	sbc	r27, r23

00001f2e <__udivmodhi4_ep>:
    1f2e:	88 1f       	adc	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	5a 95       	dec	r21
    1f34:	a9 f7       	brne	.-22     	; 0x1f20 <__udivmodhi4_loop>
    1f36:	80 95       	com	r24
    1f38:	90 95       	com	r25
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	08 95       	ret

00001f40 <_exit>:
    1f40:	f8 94       	cli

00001f42 <__stop_program>:
    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <__stop_program>
