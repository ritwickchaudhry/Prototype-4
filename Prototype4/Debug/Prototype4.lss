
Prototype4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00001f16  00001faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800208  00800208  00001fb2  2**0
                  ALLOC
  3 .stab         000044e8  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e97  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00007338  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fb  00000000  00000000  000073d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000347  00000000  00000000  000085d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000671  00000000  00000000  0000891a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00008f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  000094cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000113b  00000000  00000000  00009970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__ctors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_5>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_6>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_25>
      68:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      6c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      70:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      7c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      80:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      84:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      88:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      8c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      90:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      94:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      98:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      9c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      a0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      a4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      a8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      ac:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      b0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      b4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      b8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      bc:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      c0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      c4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      c8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      cc:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      d0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      d4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      d8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      dc:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      e0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	sts	0x46, r19
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	lds	r19, 0xbc
     126:	aa aa       	sts	0x9a, r26
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 07       	cpc	r19, r31
     130:	63 42       	sbci	r22, 0x23	; 35
     132:	36 b7       	in	r19, 0x36	; 54
     134:	9b d8       	rcall	.-3786   	; 0xfffff26c <__eeprom_end+0xff7ef26c>
     136:	a7 1a       	sub	r10, r23
     138:	39 68       	ori	r19, 0x89	; 137
     13a:	56 18       	sub	r5, r6
     13c:	ae ba       	out	0x1e, r10	; 30
     13e:	ab 55       	subi	r26, 0x5B	; 91
     140:	8c 1d       	adc	r24, r12
     142:	3c b7       	in	r19, 0x3c	; 60
     144:	cc 57       	subi	r28, 0x7C	; 124
     146:	63 bd       	out	0x23, r22	; 35
     148:	6d ed       	ldi	r22, 0xDD	; 221
     14a:	fd 75       	andi	r31, 0x5D	; 93
     14c:	3e f6       	brtc	.-114    	; 0xdc <__SREG__+0x9d>
     14e:	17 72       	andi	r17, 0x27	; 39
     150:	31 bf       	out	0x31, r19	; 49
     152:	00 00       	nop
     154:	00 80       	ld	r0, Z
     156:	3f 08       	sbc	r3, r15
     158:	00 00       	nop
     15a:	00 be       	out	0x30, r0	; 48
     15c:	92 24       	eor	r9, r2
     15e:	49 12       	cpse	r4, r25
     160:	3e ab       	sts	0x5e, r19
     162:	aa aa       	sts	0x9a, r26
     164:	2a be       	out	0x3a, r2	; 58
     166:	cd cc       	rjmp	.-1638   	; 0xfffffb02 <__eeprom_end+0xff7efb02>
     168:	cc 4c       	sbci	r28, 0xCC	; 204
     16a:	3e 00       	.word	0x003e	; ????
     16c:	00 00       	nop
     16e:	80 be       	out	0x30, r8	; 48
     170:	ab aa       	sts	0x9b, r26
     172:	aa aa       	sts	0x9a, r26
     174:	3e 00       	.word	0x003e	; ????
     176:	00 00       	nop
     178:	00 bf       	out	0x30, r16	; 48
     17a:	00 00       	nop
     17c:	00 80       	ld	r0, Z
     17e:	3f 00       	.word	0x003f	; ????
     180:	00 00       	nop
     182:	00 00       	nop
     184:	08 41       	sbci	r16, 0x18	; 24
     186:	78 d3       	rcall	.+1776   	; 0x878 <Right_Rotation_Degrees+0x20>
     188:	bb 43       	sbci	r27, 0x3B	; 59
     18a:	87 d1       	rcall	.+782    	; 0x49a <lcd_print+0xf4>
     18c:	13 3d       	cpi	r17, 0xD3	; 211
     18e:	19 0e       	add	r1, r25
     190:	3c c3       	rjmp	.+1656   	; 0x80a <Left_Rotation_Degrees+0x198>
     192:	bd 42       	sbci	r27, 0x2D	; 45
     194:	82 ad       	sts	0x62, r24
     196:	2b 3e       	cpi	r18, 0xEB	; 235
     198:	68 ec       	ldi	r22, 0xC8	; 200
     19a:	82 76       	andi	r24, 0x62	; 98
     19c:	be d9       	rcall	.-3204   	; 0xfffff51a <__eeprom_end+0xff7ef51a>
     19e:	8f e1       	ldi	r24, 0x1F	; 31
     1a0:	a9 3e       	cpi	r26, 0xE9	; 233
     1a2:	4c 80       	ldd	r4, Y+4	; 0x04
     1a4:	ef ff       	.word	0xffef	; ????
     1a6:	be 01       	movw	r22, r28
     1a8:	c4 ff       	sbrs	r28, 4
     1aa:	7f 3f       	cpi	r23, 0xFF	; 255
     1ac:	00 00       	nop
     1ae:	00 00       	nop
	...

000001b2 <__ctors_end>:
     1b2:	11 24       	eor	r1, r1
     1b4:	1f be       	out	0x3f, r1	; 63
     1b6:	cf ef       	ldi	r28, 0xFF	; 255
     1b8:	d1 e2       	ldi	r29, 0x21	; 33
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	cd bf       	out	0x3d, r28	; 61
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0c bf       	out	0x3c, r16	; 60

000001c2 <__do_copy_data>:
     1c2:	12 e0       	ldi	r17, 0x02	; 2
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b2 e0       	ldi	r27, 0x02	; 2
     1c8:	e6 e1       	ldi	r30, 0x16	; 22
     1ca:	ff e1       	ldi	r31, 0x1F	; 31
     1cc:	00 e0       	ldi	r16, 0x00	; 0
     1ce:	0b bf       	out	0x3b, r16	; 59
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x14>
     1d2:	07 90       	elpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	a8 30       	cpi	r26, 0x08	; 8
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0x10>

000001dc <__do_clear_bss>:
     1dc:	12 e0       	ldi	r17, 0x02	; 2
     1de:	a8 e0       	ldi	r26, 0x08	; 8
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	ad 32       	cpi	r26, 0x2D	; 45
     1e8:	b1 07       	cpc	r27, r17
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>
     1ec:	0e 94 ed 0a 	call	0x15da	; 0x15da <main>
     1f0:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <_exit>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f8:	86 e6       	ldi	r24, 0x66	; 102
     1fa:	9e e0       	ldi	r25, 0x0E	; 14
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_set_4bit+0x4>
     200:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     202:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     204:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     206:	80 e3       	ldi	r24, 0x30	; 48
     208:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     20a:	42 9a       	sbi	0x08, 2	; 8
     20c:	ef ef       	ldi	r30, 0xFF	; 255
     20e:	f7 e4       	ldi	r31, 0x47	; 71
     210:	31 97       	sbiw	r30, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <lcd_set_4bit+0x18>
     214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_set_4bit+0x1e>
     216:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     218:	42 98       	cbi	0x08, 2	; 8
     21a:	e6 e6       	ldi	r30, 0x66	; 102
     21c:	fe e0       	ldi	r31, 0x0E	; 14
     21e:	31 97       	sbiw	r30, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <lcd_set_4bit+0x26>
     222:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     224:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     226:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     228:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     22a:	42 9a       	sbi	0x08, 2	; 8
     22c:	ef ef       	ldi	r30, 0xFF	; 255
     22e:	f7 e4       	ldi	r31, 0x47	; 71
     230:	31 97       	sbiw	r30, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <lcd_set_4bit+0x38>
     234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_set_4bit+0x3e>
     236:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     238:	42 98       	cbi	0x08, 2	; 8
     23a:	e6 e6       	ldi	r30, 0x66	; 102
     23c:	fe e0       	ldi	r31, 0x0E	; 14
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <lcd_set_4bit+0x46>
     242:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     246:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     248:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     24a:	42 9a       	sbi	0x08, 2	; 8
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	97 e4       	ldi	r25, 0x47	; 71
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <lcd_set_4bit+0x58>
     254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_set_4bit+0x5e>
     256:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     258:	42 98       	cbi	0x08, 2	; 8
     25a:	e6 e6       	ldi	r30, 0x66	; 102
     25c:	fe e0       	ldi	r31, 0x0E	; 14
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_set_4bit+0x66>
     262:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     264:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     266:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     268:	80 e2       	ldi	r24, 0x20	; 32
     26a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     26c:	42 9a       	sbi	0x08, 2	; 8
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	97 e4       	ldi	r25, 0x47	; 71
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <lcd_set_4bit+0x7a>
     276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_set_4bit+0x80>
     278:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     27a:	42 98       	cbi	0x08, 2	; 8

	
}
     27c:	08 95       	ret

0000027e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     27e:	98 b1       	in	r25, 0x08	; 8
     280:	9f 70       	andi	r25, 0x0F	; 15
     282:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     284:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     286:	28 2f       	mov	r18, r24
     288:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     28a:	92 2b       	or	r25, r18
     28c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     28e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     290:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     292:	42 9a       	sbi	0x08, 2	; 8
     294:	ef ef       	ldi	r30, 0xFF	; 255
     296:	f7 e4       	ldi	r31, 0x47	; 71
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_wr_command+0x1a>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_wr_command+0x20>
     29e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2a0:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     2a2:	98 b1       	in	r25, 0x08	; 8
     2a4:	9f 70       	andi	r25, 0x0F	; 15
     2a6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     2a8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     2aa:	82 95       	swap	r24
     2ac:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     2ae:	89 2b       	or	r24, r25
     2b0:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     2b2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2b4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2b6:	42 9a       	sbi	0x08, 2	; 8
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	97 e4       	ldi	r25, 0x47	; 71
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_wr_command+0x3e>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_wr_command+0x44>
     2c2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2c4:	42 98       	cbi	0x08, 2	; 8
}
     2c6:	08 95       	ret

000002c8 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     2c8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_set_4bit>
     2cc:	86 e6       	ldi	r24, 0x66	; 102
     2ce:	9e e0       	ldi	r25, 0x0E	; 14
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_init+0x8>
     2d4:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     2d6:	88 e2       	ldi	r24, 0x28	; 40
     2d8:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x01);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x06);
     2e2:	86 e0       	ldi	r24, 0x06	; 6
     2e4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x0E);
     2e8:	8e e0       	ldi	r24, 0x0E	; 14
     2ea:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
	lcd_wr_command(0x80);
     2ee:	80 e8       	ldi	r24, 0x80	; 128
     2f0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
		
}
     2f4:	08 95       	ret

000002f6 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2f6:	98 b1       	in	r25, 0x08	; 8
     2f8:	9f 70       	andi	r25, 0x0F	; 15
     2fa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2fc:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2fe:	28 2f       	mov	r18, r24
     300:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     302:	92 2b       	or	r25, r18
     304:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     306:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     308:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     30a:	42 9a       	sbi	0x08, 2	; 8
     30c:	ef ef       	ldi	r30, 0xFF	; 255
     30e:	f7 e4       	ldi	r31, 0x47	; 71
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <lcd_wr_char+0x1a>
     314:	00 c0       	rjmp	.+0      	; 0x316 <lcd_wr_char+0x20>
     316:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     318:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     31a:	98 b1       	in	r25, 0x08	; 8
     31c:	9f 70       	andi	r25, 0x0F	; 15
     31e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     320:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     322:	82 95       	swap	r24
     324:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     326:	89 2b       	or	r24, r25
     328:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     32a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     32c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     32e:	42 9a       	sbi	0x08, 2	; 8
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	97 e4       	ldi	r25, 0x47	; 71
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <lcd_wr_char+0x3e>
     338:	00 c0       	rjmp	.+0      	; 0x33a <lcd_wr_char+0x44>
     33a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     33c:	42 98       	cbi	0x08, 2	; 8
}
     33e:	08 95       	ret

00000340 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     340:	80 e8       	ldi	r24, 0x80	; 128
     342:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
}
     346:	08 95       	ret

00000348 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	ec 01       	movw	r28, r24
	while(*str != '\0')
     34e:	88 81       	ld	r24, Y
     350:	88 23       	and	r24, r24
     352:	31 f0       	breq	.+12     	; 0x360 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     354:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     356:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     35a:	89 91       	ld	r24, Y+
     35c:	88 23       	and	r24, r24
     35e:	d9 f7       	brne	.-10     	; 0x356 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	79 f0       	breq	.+30     	; 0x388 <lcd_cursor+0x22>
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	18 f4       	brcc	.+6      	; 0x374 <lcd_cursor+0xe>
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	c9 f4       	brne	.+50     	; 0x3a4 <lcd_cursor+0x3e>
     372:	05 c0       	rjmp	.+10     	; 0x37e <lcd_cursor+0x18>
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	69 f0       	breq	.+26     	; 0x392 <lcd_cursor+0x2c>
     378:	84 30       	cpi	r24, 0x04	; 4
     37a:	a1 f4       	brne	.+40     	; 0x3a4 <lcd_cursor+0x3e>
     37c:	0f c0       	rjmp	.+30     	; 0x39c <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     37e:	86 2f       	mov	r24, r22
     380:	81 58       	subi	r24, 0x81	; 129
     382:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     386:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     388:	86 2f       	mov	r24, r22
     38a:	81 54       	subi	r24, 0x41	; 65
     38c:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     390:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     392:	86 2f       	mov	r24, r22
     394:	8d 56       	subi	r24, 0x6D	; 109
     396:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     39a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     39c:	86 2f       	mov	r24, r22
     39e:	8d 52       	subi	r24, 0x2D	; 45
     3a0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_wr_command>
     3a4:	08 95       	ret

000003a6 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	8a 01       	movw	r16, r20
     3b0:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     3b2:	88 23       	and	r24, r24
     3b4:	11 f0       	breq	.+4      	; 0x3ba <lcd_print+0x14>
     3b6:	66 23       	and	r22, r22
     3b8:	19 f4       	brne	.+6      	; 0x3c0 <lcd_print+0x1a>
	{
		lcd_home();
     3ba:	0e 94 a0 01 	call	0x340	; 0x340 <lcd_home>
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     3c0:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     3c4:	c5 30       	cpi	r28, 0x05	; 5
     3c6:	d1 05       	cpc	r29, r1
     3c8:	71 f4       	brne	.+28     	; 0x3e6 <lcd_print+0x40>
	{
		million=value/10000+48;
     3ca:	c8 01       	movw	r24, r16
     3cc:	60 e1       	ldi	r22, 0x10	; 16
     3ce:	77 e2       	ldi	r23, 0x27	; 39
     3d0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     3d4:	cb 01       	movw	r24, r22
     3d6:	c0 96       	adiw	r24, 0x30	; 48
     3d8:	90 93 21 02 	sts	0x0221, r25
     3dc:	80 93 20 02 	sts	0x0220, r24
		lcd_wr_char(million);
     3e0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     3e6:	c4 30       	cpi	r28, 0x04	; 4
     3e8:	d1 05       	cpc	r29, r1
     3ea:	b9 f4       	brne	.+46     	; 0x41a <lcd_print+0x74>
	{
		temp = value/1000;
     3ec:	c8 01       	movw	r24, r16
     3ee:	68 ee       	ldi	r22, 0xE8	; 232
     3f0:	73 e0       	ldi	r23, 0x03	; 3
     3f2:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     3f6:	cb 01       	movw	r24, r22
     3f8:	70 93 23 02 	sts	0x0223, r23
     3fc:	60 93 22 02 	sts	0x0222, r22
		thousand = temp%10 + 48;
     400:	6a e0       	ldi	r22, 0x0A	; 10
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     408:	c0 96       	adiw	r24, 0x30	; 48
     40a:	90 93 2c 02 	sts	0x022C, r25
     40e:	80 93 2b 02 	sts	0x022B, r24
		lcd_wr_char(thousand);
     412:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
		flag=1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	01 c0       	rjmp	.+2      	; 0x41c <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     41a:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     41c:	c3 30       	cpi	r28, 0x03	; 3
     41e:	d1 05       	cpc	r29, r1
     420:	11 f0       	breq	.+4      	; 0x426 <lcd_print+0x80>
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	b1 f4       	brne	.+44     	; 0x452 <lcd_print+0xac>
	{
		temp = value/100;
     426:	c8 01       	movw	r24, r16
     428:	64 e6       	ldi	r22, 0x64	; 100
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     430:	cb 01       	movw	r24, r22
     432:	70 93 23 02 	sts	0x0223, r23
     436:	60 93 22 02 	sts	0x0222, r22
		hundred = temp%10 + 48;
     43a:	6a e0       	ldi	r22, 0x0A	; 10
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     442:	c0 96       	adiw	r24, 0x30	; 48
     444:	90 93 28 02 	sts	0x0228, r25
     448:	80 93 27 02 	sts	0x0227, r24
		lcd_wr_char(hundred);
     44c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
		flag=1;
     450:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     452:	c2 30       	cpi	r28, 0x02	; 2
     454:	d1 05       	cpc	r29, r1
     456:	11 f0       	breq	.+4      	; 0x45c <lcd_print+0xb6>
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	b1 f4       	brne	.+44     	; 0x488 <lcd_print+0xe2>
	{
		temp = value/10;
     45c:	2a e0       	ldi	r18, 0x0A	; 10
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	c8 01       	movw	r24, r16
     462:	b9 01       	movw	r22, r18
     464:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     468:	cb 01       	movw	r24, r22
     46a:	70 93 23 02 	sts	0x0223, r23
     46e:	60 93 22 02 	sts	0x0222, r22
		tens = temp%10 + 48;
     472:	b9 01       	movw	r22, r18
     474:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     478:	c0 96       	adiw	r24, 0x30	; 48
     47a:	90 93 25 02 	sts	0x0225, r25
     47e:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(tens);
     482:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
		flag=1;
     486:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     488:	c1 30       	cpi	r28, 0x01	; 1
     48a:	d1 05       	cpc	r29, r1
     48c:	11 f0       	breq	.+4      	; 0x492 <lcd_print+0xec>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	61 f4       	brne	.+24     	; 0x4aa <lcd_print+0x104>
	{
		unit = value%10 + 48;
     492:	c8 01       	movw	r24, r16
     494:	6a e0       	ldi	r22, 0x0A	; 10
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__udivmodhi4>
     49c:	c0 96       	adiw	r24, 0x30	; 48
     49e:	90 93 2a 02 	sts	0x022A, r25
     4a2:	80 93 29 02 	sts	0x0229, r24
		lcd_wr_char(unit);
     4a6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
	}
	if(digits>5)
     4aa:	c6 30       	cpi	r28, 0x06	; 6
     4ac:	d1 05       	cpc	r29, r1
     4ae:	1c f0       	brlt	.+6      	; 0x4b6 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     4b0:	85 e4       	ldi	r24, 0x45	; 69
     4b2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_wr_char>
	}
	
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <Left_Encoder_Pin_Configuration>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
//------------------------------------------------------------------------------------
void Left_Encoder_Pin_Configuration(void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     4c0:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     4c2:	74 9a       	sbi	0x0e, 4	; 14
}
     4c4:	08 95       	ret

000004c6 <Right_Encoder_Pin_Configuration>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
//------------------------------------------------------------------------------------
void Right_Encoder_Pin_Configuration(void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     4c6:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     4c8:	75 9a       	sbi	0x0e, 5	; 14
}
     4ca:	08 95       	ret

000004cc <Left_Wheel_Interrupt_Pin>:
//------------------------------------------------------------------------------------


void Left_Wheel_Interrupt_Pin(void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     4cc:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     4ce:	ea e6       	ldi	r30, 0x6A	; 106
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     4d8:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     4da:	78 94       	sei
}
     4dc:	08 95       	ret

000004de <Right_Wheel_Interrupt_Pin>:


void Right_Wheel_Interrupt_Pin(void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     4de:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     4e0:	ea e6       	ldi	r30, 0x6A	; 106
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	88 60       	ori	r24, 0x08	; 8
     4e8:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     4ea:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     4ec:	78 94       	sei
}
     4ee:	08 95       	ret

000004f0 <__vector_5>:

//Functions for incrementing the Shaft Encoder Values
//--------------------------------------------------------
ISR(INT4_vect)
{
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
    Shaft_Counter_Left_Wheel ++;
     4fe:	80 91 1c 02 	lds	r24, 0x021C
     502:	90 91 1d 02 	lds	r25, 0x021D
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 1d 02 	sts	0x021D, r25
     50c:	80 93 1c 02 	sts	0x021C, r24
}
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <__vector_6>:

ISR(INT5_vect)
{
     51e:	1f 92       	push	r1
     520:	0f 92       	push	r0
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	0f 92       	push	r0
     526:	11 24       	eor	r1, r1
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
    Shaft_Counter_Right_Wheel ++;
     52c:	80 91 1e 02 	lds	r24, 0x021E
     530:	90 91 1f 02 	lds	r25, 0x021F
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	90 93 1f 02 	sts	0x021F, r25
     53a:	80 93 1e 02 	sts	0x021E, r24
}
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <Motion_Configurations>:

//Function to configure the motion pins and to enable the Motion ICs.
//---------------------------------------------------------------------------
void Motion_Configurations()
{
    DDRA = 0x0F;
     54c:	8f e0       	ldi	r24, 0x0F	; 15
     54e:	81 b9       	out	0x01, r24	; 1
    PORTA = 0x00;
     550:	12 b8       	out	0x02, r1	; 2
    DDRL = 0x18;
     552:	88 e1       	ldi	r24, 0x18	; 24
     554:	80 93 0a 01 	sts	0x010A, r24
    PORTL = 0x18;
     558:	80 93 0b 01 	sts	0x010B, r24

}
     55c:	08 95       	ret

0000055e <ADC_enable>:

void ADC_enable()
{
    // Function to enable the ADC and initialize the required registers

    DDRF = 0x00;
     55e:	10 ba       	out	0x10, r1	; 16
    DDRK = 0x00;
     560:	10 92 07 01 	sts	0x0107, r1
    ADCSRA = 0x86;
     564:	86 e8       	ldi	r24, 0x86	; 134
     566:	80 93 7a 00 	sts	0x007A, r24
    ADCSRB = 0x00;
     56a:	10 92 7b 00 	sts	0x007B, r1
    ADMUX = 0x20;
     56e:	80 e2       	ldi	r24, 0x20	; 32
     570:	80 93 7c 00 	sts	0x007C, r24
    ACSR = 0x80;
     574:	80 e8       	ldi	r24, 0x80	; 128
     576:	80 bf       	out	0x30, r24	; 48
}
     578:	08 95       	ret

0000057a <init_devices>:

//Function to set up the LCD
//-----------------------------------------
void init_devices()
{
    DDRC = 0xF7;
     57a:	87 ef       	ldi	r24, 0xF7	; 247
     57c:	87 b9       	out	0x07, r24	; 7
    PORTC = 0x28;
     57e:	88 e2       	ldi	r24, 0x28	; 40
     580:	88 b9       	out	0x08, r24	; 8
}
     582:	08 95       	ret

00000584 <uart0_init>:
   char size: 8 bit
   parity: Disabled  */

void uart0_init(void)
{
    UCSR0B = 0x00; //disable while setting baud rate
     584:	e1 ec       	ldi	r30, 0xC1	; 193
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	10 82       	st	Z, r1
    UCSR0A = 0x00;
     58a:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0C = 0x06;
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	80 93 c2 00 	sts	0x00C2, r24
    UBRR0L = 0x5F; //set baud rate low
     594:	8f e5       	ldi	r24, 0x5F	; 95
     596:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = 0x00; //set baud rate high
     59a:	10 92 c5 00 	sts	0x00C5, r1
    UCSR0B = 0x98;
     59e:	88 e9       	ldi	r24, 0x98	; 152
     5a0:	80 83       	st	Z, r24
}
     5a2:	08 95       	ret

000005a4 <initialize>:

void initialize()
{
    // Function to call all the functions initializing the ports

    Motion_Configurations();
     5a4:	0e 94 a6 02 	call	0x54c	; 0x54c <Motion_Configurations>
    ADC_enable();
     5a8:	0e 94 af 02 	call	0x55e	; 0x55e <ADC_enable>
    init_devices();
     5ac:	0e 94 bd 02 	call	0x57a	; 0x57a <init_devices>

    cli();       // Clears the global interrupts
     5b0:	f8 94       	cli

    Left_Encoder_Pin_Configuration();
     5b2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Left_Encoder_Pin_Configuration>
    Right_Encoder_Pin_Configuration();
     5b6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <Right_Encoder_Pin_Configuration>
    Right_Wheel_Interrupt_Pin();
     5ba:	0e 94 6f 02 	call	0x4de	; 0x4de <Right_Wheel_Interrupt_Pin>
    Left_Wheel_Interrupt_Pin();
     5be:	0e 94 66 02 	call	0x4cc	; 0x4cc <Left_Wheel_Interrupt_Pin>

    sei();       // Enables the global interrupts
     5c2:	78 94       	sei

}
     5c4:	08 95       	ret

000005c6 <init_xbee>:

void init_xbee()
{
    // Calling the function to initialize serial communication via XBee

    cli();
     5c6:	f8 94       	cli
    uart0_init(); //Initialize UART1 for serial communication
     5c8:	0e 94 c2 02 	call	0x584	; 0x584 <uart0_init>
    sei();
     5cc:	78 94       	sei
}
     5ce:	08 95       	ret

000005d0 <Read_Sensor>:
unsigned char Read_Sensor(unsigned char channel)
{

    unsigned char reading;

    if(channel>7) // The Appropriate Channel is the sensor from which the valur is to be taken
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	18 f0       	brcs	.+6      	; 0x5da <Read_Sensor+0xa>
    {
        ADCSRB = 0x08;
     5d4:	98 e0       	ldi	r25, 0x08	; 8
     5d6:	90 93 7b 00 	sts	0x007B, r25
    }

    channel = channel & 0x07;
     5da:	87 70       	andi	r24, 0x07	; 7
    ADMUX= 0x20 | channel;
     5dc:	80 62       	ori	r24, 0x20	; 32
     5de:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = ADCSRA | 0x40;     //Set start conversion bit
     5e2:	ea e7       	ldi	r30, 0x7A	; 122
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	80 83       	st	Z, r24

    while((ADCSRA&0x10)==0);  //Wait for ADC conversion to complete
     5ec:	80 81       	ld	r24, Z
     5ee:	84 ff       	sbrs	r24, 4
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <Read_Sensor+0x1c>

    reading=ADCH;
     5f2:	80 91 79 00 	lds	r24, 0x0079
    ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     5f6:	ea e7       	ldi	r30, 0x7A	; 122
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	90 81       	ld	r25, Z
     5fc:	90 61       	ori	r25, 0x10	; 16
     5fe:	90 83       	st	Z, r25
    ADCSRB = 0x00;
     600:	10 92 7b 00 	sts	0x007B, r1

    return reading;

}
     604:	08 95       	ret

00000606 <forward_motion>:

// Motion functions: moving the bot forward, reverse, left and right
//------------------------------------------------------------------------------------
void forward_motion()
{
    PORTA = 0x06;
     606:	86 e0       	ldi	r24, 0x06	; 6
     608:	82 b9       	out	0x02, r24	; 2
}
     60a:	08 95       	ret

0000060c <backward_motion>:

void backward_motion()
{
    PORTA = 0x09;
     60c:	89 e0       	ldi	r24, 0x09	; 9
     60e:	82 b9       	out	0x02, r24	; 2
}
     610:	08 95       	ret

00000612 <left_motion>:

void left_motion()
{
    PORTA = 0x05;
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	82 b9       	out	0x02, r24	; 2
}
     616:	08 95       	ret

00000618 <right_motion>:

void right_motion()
{
    PORTA = 0x0A;
     618:	8a e0       	ldi	r24, 0x0A	; 10
     61a:	82 b9       	out	0x02, r24	; 2
}
     61c:	08 95       	ret

0000061e <stop_motion>:

void stop_motion()
{
    PORTA = 0x00;
     61e:	12 b8       	out	0x02, r1	; 2
}
     620:	08 95       	ret

00000622 <velocity>:
// Function to initialize the registers for motion control using PWM
//-----------------------------------------------------------------------

void velocity (unsigned char left_motor, unsigned char right_motor)
{
    OCR5AL = (unsigned char)left_motor;
     622:	80 93 28 01 	sts	0x0128, r24
    OCR5BL = (unsigned char)right_motor;
     626:	60 93 2a 01 	sts	0x012A, r22
}
     62a:	08 95       	ret

0000062c <get_angle>:
    88 pulses for 360 degrees ==> 4.090 degrees per count
    The angle rotated is calculated by measuring the number of counts
    and multiplying it by 4.090 which is the resolution to get the degrees
    *************************/

    double angle = 4.090*(Shaft_Counter_Right_Wheel + Shaft_Counter_Left_Wheel)/2;
     62c:	60 91 1e 02 	lds	r22, 0x021E
     630:	70 91 1f 02 	lds	r23, 0x021F
     634:	80 91 1c 02 	lds	r24, 0x021C
     638:	90 91 1d 02 	lds	r25, 0x021D
     63c:	68 0f       	add	r22, r24
     63e:	79 1f       	adc	r23, r25
     640:	88 27       	eor	r24, r24
     642:	77 fd       	sbrc	r23, 7
     644:	80 95       	com	r24
     646:	98 2f       	mov	r25, r24
     648:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     64c:	28 e4       	ldi	r18, 0x48	; 72
     64e:	31 ee       	ldi	r19, 0xE1	; 225
     650:	42 e8       	ldi	r20, 0x82	; 130
     652:	50 e4       	ldi	r21, 0x40	; 64
     654:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	5f e3       	ldi	r21, 0x3F	; 63
     660:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    return angle;
}
     664:	46 2f       	mov	r20, r22
     666:	57 2f       	mov	r21, r23
     668:	68 2f       	mov	r22, r24
     66a:	79 2f       	mov	r23, r25
     66c:	cb 01       	movw	r24, r22
     66e:	ba 01       	movw	r22, r20
     670:	08 95       	ret

00000672 <Left_Rotation_Degrees>:
A node is formed at which the bot rotates.
This node is then used to calculate any further motions.
*/
//-----------------------------------------------------------------------
void Left_Rotation_Degrees(int Degrees)
{
     672:	6f 92       	push	r6
     674:	7f 92       	push	r7
     676:	8f 92       	push	r8
     678:	9f 92       	push	r9
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	8c 01       	movw	r16, r24


    init_x = current_x;
     690:	80 91 18 02 	lds	r24, 0x0218
     694:	90 91 19 02 	lds	r25, 0x0219
     698:	a0 91 1a 02 	lds	r26, 0x021A
     69c:	b0 91 1b 02 	lds	r27, 0x021B
     6a0:	80 93 0c 02 	sts	0x020C, r24
     6a4:	90 93 0d 02 	sts	0x020D, r25
     6a8:	a0 93 0e 02 	sts	0x020E, r26
     6ac:	b0 93 0f 02 	sts	0x020F, r27
    init_y = current_y;
     6b0:	80 91 14 02 	lds	r24, 0x0214
     6b4:	90 91 15 02 	lds	r25, 0x0215
     6b8:	a0 91 16 02 	lds	r26, 0x0216
     6bc:	b0 91 17 02 	lds	r27, 0x0217
     6c0:	80 93 08 02 	sts	0x0208, r24
     6c4:	90 93 09 02 	sts	0x0209, r25
     6c8:	a0 93 0a 02 	sts	0x020A, r26
     6cc:	b0 93 0b 02 	sts	0x020B, r27

    left_motion(); //Turn left
     6d0:	0e 94 09 03 	call	0x612	; 0x612 <left_motion>

    float Reqd_Shaft_Counter = (float) Degrees/ 4.090;                // division by resolution to get shaft count
     6d4:	b8 01       	movw	r22, r16
     6d6:	88 27       	eor	r24, r24
     6d8:	77 fd       	sbrc	r23, 7
     6da:	80 95       	com	r24
     6dc:	98 2f       	mov	r25, r24
     6de:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     6e2:	28 e4       	ldi	r18, 0x48	; 72
     6e4:	31 ee       	ldi	r19, 0xE1	; 225
     6e6:	42 e8       	ldi	r20, 0x82	; 130
     6e8:	50 e4       	ldi	r21, 0x40	; 64
     6ea:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__divsf3>
    Reqd_Shaft_Counter = (unsigned int) Reqd_Shaft_Counter;
     6ee:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
     6fa:	c6 2f       	mov	r28, r22
     6fc:	d7 2f       	mov	r29, r23
     6fe:	b8 2e       	mov	r11, r24
     700:	a9 2e       	mov	r10, r25
    Shaft_Counter_Left_Wheel = 0;
     702:	10 92 1d 02 	sts	0x021D, r1
     706:	10 92 1c 02 	sts	0x021C, r1
    Shaft_Counter_Right_Wheel = 0;
     70a:	10 92 1f 02 	sts	0x021F, r1
     70e:	10 92 1e 02 	sts	0x021E, r1
    double initial_theta = current_theta;
     712:	c0 90 10 02 	lds	r12, 0x0210
     716:	d0 90 11 02 	lds	r13, 0x0211
     71a:	e0 90 12 02 	lds	r14, 0x0212
     71e:	f0 90 13 02 	lds	r15, 0x0213
            lcd_print(1,3,(-1 * current_theta),4);
        }
        else
        {
            lcd_cursor(1,2);
            lcd_string("+");
     722:	0f 2e       	mov	r0, r31
     724:	f2 e0       	ldi	r31, 0x02	; 2
     726:	8f 2e       	mov	r8, r31
     728:	f2 e0       	ldi	r31, 0x02	; 2
     72a:	9f 2e       	mov	r9, r31
     72c:	f0 2d       	mov	r31, r0
    {
        current_theta = initial_theta - get_angle();
        if(current_theta<0)
        {
            lcd_cursor(1,2);
            lcd_string("-");
     72e:	0f 2e       	mov	r0, r31
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	6f 2e       	mov	r6, r31
     734:	f2 e0       	ldi	r31, 0x02	; 2
     736:	7f 2e       	mov	r7, r31
     738:	f0 2d       	mov	r31, r0
    Shaft_Counter_Right_Wheel = 0;
    double initial_theta = current_theta;

    while (1)
    {
        current_theta = initial_theta - get_angle();
     73a:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__subsf3>
     74a:	26 2f       	mov	r18, r22
     74c:	37 2f       	mov	r19, r23
     74e:	f8 2f       	mov	r31, r24
     750:	e9 2f       	mov	r30, r25
     752:	46 2f       	mov	r20, r22
     754:	57 2f       	mov	r21, r23
     756:	68 2f       	mov	r22, r24
     758:	79 2f       	mov	r23, r25
     75a:	40 93 10 02 	sts	0x0210, r20
     75e:	50 93 11 02 	sts	0x0211, r21
     762:	60 93 12 02 	sts	0x0212, r22
     766:	70 93 13 02 	sts	0x0213, r23
        if(current_theta<0)
     76a:	82 2f       	mov	r24, r18
     76c:	93 2f       	mov	r25, r19
     76e:	af 2f       	mov	r26, r31
     770:	be 2f       	mov	r27, r30
     772:	bc 01       	movw	r22, r24
     774:	cd 01       	movw	r24, r26
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	a9 01       	movw	r20, r18
     77c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
     780:	88 23       	and	r24, r24
     782:	f4 f4       	brge	.+60     	; 0x7c0 <Left_Rotation_Degrees+0x14e>
        {
            lcd_cursor(1,2);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	62 e0       	ldi	r22, 0x02	; 2
     788:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
     78c:	c3 01       	movw	r24, r6
     78e:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,(-1 * current_theta),4);
     792:	80 91 10 02 	lds	r24, 0x0210
     796:	90 91 11 02 	lds	r25, 0x0211
     79a:	a0 91 12 02 	lds	r26, 0x0212
     79e:	b0 91 13 02 	lds	r27, 0x0213
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	90 58       	subi	r25, 0x80	; 128
     7a8:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     7ac:	8b 01       	movw	r16, r22
     7ae:	9c 01       	movw	r18, r24
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	63 e0       	ldi	r22, 0x03	; 3
     7b4:	a8 01       	movw	r20, r16
     7b6:	24 e0       	ldi	r18, 0x04	; 4
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
     7be:	1a c0       	rjmp	.+52     	; 0x7f4 <Left_Rotation_Degrees+0x182>
        }
        else
        {
            lcd_cursor(1,2);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
     7c8:	c4 01       	movw	r24, r8
     7ca:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,current_theta,4);
     7ce:	60 91 10 02 	lds	r22, 0x0210
     7d2:	70 91 11 02 	lds	r23, 0x0211
     7d6:	80 91 12 02 	lds	r24, 0x0212
     7da:	90 91 13 02 	lds	r25, 0x0213
     7de:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     7e2:	8b 01       	movw	r16, r22
     7e4:	9c 01       	movw	r18, r24
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	a8 01       	movw	r20, r16
     7ec:	24 e0       	ldi	r18, 0x04	; 4
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
        if((Shaft_Counter_Right_Wheel+Shaft_Counter_Left_Wheel)/2 >= Reqd_Shaft_Counter)
     7f4:	60 91 1e 02 	lds	r22, 0x021E
     7f8:	70 91 1f 02 	lds	r23, 0x021F
     7fc:	80 91 1c 02 	lds	r24, 0x021C
     800:	90 91 1d 02 	lds	r25, 0x021D
     804:	68 0f       	add	r22, r24
     806:	79 1f       	adc	r23, r25
     808:	77 23       	and	r23, r23
     80a:	14 f4       	brge	.+4      	; 0x810 <Left_Rotation_Degrees+0x19e>
     80c:	6f 5f       	subi	r22, 0xFF	; 255
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	75 95       	asr	r23
     812:	67 95       	ror	r22
     814:	88 27       	eor	r24, r24
     816:	77 fd       	sbrc	r23, 7
     818:	80 95       	com	r24
     81a:	98 2f       	mov	r25, r24
     81c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     820:	0c 2f       	mov	r16, r28
     822:	1d 2f       	mov	r17, r29
     824:	2b 2d       	mov	r18, r11
     826:	3a 2d       	mov	r19, r10
     828:	a9 01       	movw	r20, r18
     82a:	98 01       	movw	r18, r16
     82c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
     830:	88 23       	and	r24, r24
     832:	0c f4       	brge	.+2      	; 0x836 <Left_Rotation_Degrees+0x1c4>
     834:	82 cf       	rjmp	.-252    	; 0x73a <Left_Rotation_Degrees+0xc8>
            break;
    }
    stop_motion();
     836:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	7f 90       	pop	r7
     854:	6f 90       	pop	r6
     856:	08 95       	ret

00000858 <Right_Rotation_Degrees>:



void Right_Rotation_Degrees(int Degrees)
{
     858:	6f 92       	push	r6
     85a:	7f 92       	push	r7
     85c:	8f 92       	push	r8
     85e:	9f 92       	push	r9
     860:	af 92       	push	r10
     862:	bf 92       	push	r11
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	8c 01       	movw	r16, r24
    init_x = current_x;
     876:	80 91 18 02 	lds	r24, 0x0218
     87a:	90 91 19 02 	lds	r25, 0x0219
     87e:	a0 91 1a 02 	lds	r26, 0x021A
     882:	b0 91 1b 02 	lds	r27, 0x021B
     886:	80 93 0c 02 	sts	0x020C, r24
     88a:	90 93 0d 02 	sts	0x020D, r25
     88e:	a0 93 0e 02 	sts	0x020E, r26
     892:	b0 93 0f 02 	sts	0x020F, r27
    init_y = current_y;
     896:	80 91 14 02 	lds	r24, 0x0214
     89a:	90 91 15 02 	lds	r25, 0x0215
     89e:	a0 91 16 02 	lds	r26, 0x0216
     8a2:	b0 91 17 02 	lds	r27, 0x0217
     8a6:	80 93 08 02 	sts	0x0208, r24
     8aa:	90 93 09 02 	sts	0x0209, r25
     8ae:	a0 93 0a 02 	sts	0x020A, r26
     8b2:	b0 93 0b 02 	sts	0x020B, r27

    right_motion(); //Turn right
     8b6:	0e 94 0c 03 	call	0x618	; 0x618 <right_motion>

    float Reqd_Shaft_Counter = (float) Degrees/ 4.090; // division by resolution to get shaft count
     8ba:	b8 01       	movw	r22, r16
     8bc:	88 27       	eor	r24, r24
     8be:	77 fd       	sbrc	r23, 7
     8c0:	80 95       	com	r24
     8c2:	98 2f       	mov	r25, r24
     8c4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     8c8:	28 e4       	ldi	r18, 0x48	; 72
     8ca:	31 ee       	ldi	r19, 0xE1	; 225
     8cc:	42 e8       	ldi	r20, 0x82	; 130
     8ce:	50 e4       	ldi	r21, 0x40	; 64
     8d0:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__divsf3>
    Reqd_Shaft_Counter = (unsigned int) Reqd_Shaft_Counter;
     8d4:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
     8e0:	c6 2f       	mov	r28, r22
     8e2:	d7 2f       	mov	r29, r23
     8e4:	b8 2e       	mov	r11, r24
     8e6:	a9 2e       	mov	r10, r25
    Shaft_Counter_Left_Wheel = 0;
     8e8:	10 92 1d 02 	sts	0x021D, r1
     8ec:	10 92 1c 02 	sts	0x021C, r1
    Shaft_Counter_Right_Wheel = 0;
     8f0:	10 92 1f 02 	sts	0x021F, r1
     8f4:	10 92 1e 02 	sts	0x021E, r1
    double initial_theta = current_theta;
     8f8:	c0 90 10 02 	lds	r12, 0x0210
     8fc:	d0 90 11 02 	lds	r13, 0x0211
     900:	e0 90 12 02 	lds	r14, 0x0212
     904:	f0 90 13 02 	lds	r15, 0x0213
            lcd_print(1,3,(-1 * current_theta),4);
        }
        else
        {
            lcd_cursor(1,2);
            lcd_string("+");
     908:	0f 2e       	mov	r0, r31
     90a:	f2 e0       	ldi	r31, 0x02	; 2
     90c:	8f 2e       	mov	r8, r31
     90e:	f2 e0       	ldi	r31, 0x02	; 2
     910:	9f 2e       	mov	r9, r31
     912:	f0 2d       	mov	r31, r0
    {
        current_theta = initial_theta + get_angle();
        if(current_theta<0)
        {
            lcd_cursor(1,2);
            lcd_string("-");
     914:	0f 2e       	mov	r0, r31
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	6f 2e       	mov	r6, r31
     91a:	f2 e0       	ldi	r31, 0x02	; 2
     91c:	7f 2e       	mov	r7, r31
     91e:	f0 2d       	mov	r31, r0
    Shaft_Counter_Right_Wheel = 0;
    double initial_theta = current_theta;

    while (1)
    {
        current_theta = initial_theta + get_angle();
     920:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
     92c:	26 2f       	mov	r18, r22
     92e:	37 2f       	mov	r19, r23
     930:	f8 2f       	mov	r31, r24
     932:	e9 2f       	mov	r30, r25
     934:	46 2f       	mov	r20, r22
     936:	57 2f       	mov	r21, r23
     938:	68 2f       	mov	r22, r24
     93a:	79 2f       	mov	r23, r25
     93c:	40 93 10 02 	sts	0x0210, r20
     940:	50 93 11 02 	sts	0x0211, r21
     944:	60 93 12 02 	sts	0x0212, r22
     948:	70 93 13 02 	sts	0x0213, r23
        if(current_theta<0)
     94c:	82 2f       	mov	r24, r18
     94e:	93 2f       	mov	r25, r19
     950:	af 2f       	mov	r26, r31
     952:	be 2f       	mov	r27, r30
     954:	bc 01       	movw	r22, r24
     956:	cd 01       	movw	r24, r26
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	a9 01       	movw	r20, r18
     95e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
     962:	88 23       	and	r24, r24
     964:	f4 f4       	brge	.+60     	; 0x9a2 <Right_Rotation_Degrees+0x14a>
        {
            lcd_cursor(1,2);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	62 e0       	ldi	r22, 0x02	; 2
     96a:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
     96e:	c3 01       	movw	r24, r6
     970:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,(-1 * current_theta),4);
     974:	80 91 10 02 	lds	r24, 0x0210
     978:	90 91 11 02 	lds	r25, 0x0211
     97c:	a0 91 12 02 	lds	r26, 0x0212
     980:	b0 91 13 02 	lds	r27, 0x0213
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	90 58       	subi	r25, 0x80	; 128
     98a:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     98e:	8b 01       	movw	r16, r22
     990:	9c 01       	movw	r18, r24
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	63 e0       	ldi	r22, 0x03	; 3
     996:	a8 01       	movw	r20, r16
     998:	24 e0       	ldi	r18, 0x04	; 4
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
     9a0:	1a c0       	rjmp	.+52     	; 0x9d6 <Right_Rotation_Degrees+0x17e>
        }
        else
        {
            lcd_cursor(1,2);
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	62 e0       	ldi	r22, 0x02	; 2
     9a6:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
     9aa:	c4 01       	movw	r24, r8
     9ac:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,current_theta,4);
     9b0:	60 91 10 02 	lds	r22, 0x0210
     9b4:	70 91 11 02 	lds	r23, 0x0211
     9b8:	80 91 12 02 	lds	r24, 0x0212
     9bc:	90 91 13 02 	lds	r25, 0x0213
     9c0:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     9c4:	8b 01       	movw	r16, r22
     9c6:	9c 01       	movw	r18, r24
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	63 e0       	ldi	r22, 0x03	; 3
     9cc:	a8 01       	movw	r20, r16
     9ce:	24 e0       	ldi	r18, 0x04	; 4
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
        if((Shaft_Counter_Right_Wheel+Shaft_Counter_Left_Wheel)/2 >= Reqd_Shaft_Counter)
     9d6:	60 91 1e 02 	lds	r22, 0x021E
     9da:	70 91 1f 02 	lds	r23, 0x021F
     9de:	80 91 1c 02 	lds	r24, 0x021C
     9e2:	90 91 1d 02 	lds	r25, 0x021D
     9e6:	68 0f       	add	r22, r24
     9e8:	79 1f       	adc	r23, r25
     9ea:	77 23       	and	r23, r23
     9ec:	14 f4       	brge	.+4      	; 0x9f2 <Right_Rotation_Degrees+0x19a>
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	75 95       	asr	r23
     9f4:	67 95       	ror	r22
     9f6:	88 27       	eor	r24, r24
     9f8:	77 fd       	sbrc	r23, 7
     9fa:	80 95       	com	r24
     9fc:	98 2f       	mov	r25, r24
     9fe:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     a02:	0c 2f       	mov	r16, r28
     a04:	1d 2f       	mov	r17, r29
     a06:	2b 2d       	mov	r18, r11
     a08:	3a 2d       	mov	r19, r10
     a0a:	a9 01       	movw	r20, r18
     a0c:	98 01       	movw	r18, r16
     a0e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
     a12:	88 23       	and	r24, r24
     a14:	0c f4       	brge	.+2      	; 0xa18 <Right_Rotation_Degrees+0x1c0>
     a16:	84 cf       	rjmp	.-248    	; 0x920 <Right_Rotation_Degrees+0xc8>
            break;
    }
    stop_motion();
     a18:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>

}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	9f 90       	pop	r9
     a32:	8f 90       	pop	r8
     a34:	7f 90       	pop	r7
     a36:	6f 90       	pop	r6
     a38:	08 95       	ret

00000a3a <convert>:
//-----------------------------------------------------------------------

// Function to convert the character reading from the ADC to the calibrated integer value
//-----------------------------------------------------------------------
unsigned int convert(unsigned char reading)
{
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
    // Function to convert the character reading from the ADC to the calibrated integer value

    int dist;
    dist = (int)(10.00*(2799.6*(1.00/(pow(reading,1.1546)))));
     a3e:	68 2f       	mov	r22, r24
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
     a4a:	2f ee       	ldi	r18, 0xEF	; 239
     a4c:	39 ec       	ldi	r19, 0xC9	; 201
     a4e:	43 e9       	ldi	r20, 0x93	; 147
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <pow>
     a56:	b6 2f       	mov	r27, r22
     a58:	a7 2f       	mov	r26, r23
     a5a:	38 2f       	mov	r19, r24
     a5c:	29 2f       	mov	r18, r25
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e8       	ldi	r24, 0x80	; 128
     a64:	9f e3       	ldi	r25, 0x3F	; 63
     a66:	42 2f       	mov	r20, r18
     a68:	0b 2f       	mov	r16, r27
     a6a:	1a 2f       	mov	r17, r26
     a6c:	23 2f       	mov	r18, r19
     a6e:	34 2f       	mov	r19, r20
     a70:	a9 01       	movw	r20, r18
     a72:	98 01       	movw	r18, r16
     a74:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__divsf3>
     a78:	2a e9       	ldi	r18, 0x9A	; 154
     a7a:	39 ef       	ldi	r19, 0xF9	; 249
     a7c:	4e e2       	ldi	r20, 0x2E	; 46
     a7e:	55 e4       	ldi	r21, 0x45	; 69
     a80:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e2       	ldi	r20, 0x20	; 32
     a8a:	51 e4       	ldi	r21, 0x41	; 65
     a8c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     a90:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__fixsfsi>
    return dist;

}
     a94:	86 2f       	mov	r24, r22
     a96:	97 2f       	mov	r25, r23
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <coordinate_calculation>:
using the distance travelled(r) and current angle(current_theta)
The Global variables current_x and current_y are then updated.
*/
//-----------------------------------------------------------------------
void coordinate_calculation(double r)
{
     a9e:	8f 92       	push	r8
     aa0:	9f 92       	push	r9
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24

    current_x =  init_x + r*sin(current_theta*pi/180.0);
     aba:	60 91 10 02 	lds	r22, 0x0210
     abe:	70 91 11 02 	lds	r23, 0x0211
     ac2:	80 91 12 02 	lds	r24, 0x0212
     ac6:	90 91 13 02 	lds	r25, 0x0213
     aca:	2c e7       	ldi	r18, 0x7C	; 124
     acc:	3f e0       	ldi	r19, 0x0F	; 15
     ace:	49 e4       	ldi	r20, 0x49	; 73
     ad0:	50 e4       	ldi	r21, 0x40	; 64
     ad2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	44 e3       	ldi	r20, 0x34	; 52
     adc:	53 e4       	ldi	r21, 0x43	; 67
     ade:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__divsf3>
     ae2:	d6 2f       	mov	r29, r22
     ae4:	c7 2f       	mov	r28, r23
     ae6:	18 2f       	mov	r17, r24
     ae8:	09 2f       	mov	r16, r25
     aea:	86 2f       	mov	r24, r22
     aec:	9c 2f       	mov	r25, r28
     aee:	a1 2f       	mov	r26, r17
     af0:	b0 2f       	mov	r27, r16
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <sin>
     afa:	a7 01       	movw	r20, r14
     afc:	96 01       	movw	r18, r12
     afe:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     b02:	20 91 0c 02 	lds	r18, 0x020C
     b06:	30 91 0d 02 	lds	r19, 0x020D
     b0a:	40 91 0e 02 	lds	r20, 0x020E
     b0e:	50 91 0f 02 	lds	r21, 0x020F
     b12:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
     b16:	b6 2e       	mov	r11, r22
     b18:	a7 2e       	mov	r10, r23
     b1a:	98 2e       	mov	r9, r24
     b1c:	89 2e       	mov	r8, r25
     b1e:	86 2f       	mov	r24, r22
     b20:	9a 2d       	mov	r25, r10
     b22:	a9 2d       	mov	r26, r9
     b24:	b8 2d       	mov	r27, r8
     b26:	80 93 18 02 	sts	0x0218, r24
     b2a:	90 93 19 02 	sts	0x0219, r25
     b2e:	a0 93 1a 02 	sts	0x021A, r26
     b32:	b0 93 1b 02 	sts	0x021B, r27
    current_y =  init_y + r*cos(current_theta*pi/180.0);
     b36:	8d 2f       	mov	r24, r29
     b38:	9c 2f       	mov	r25, r28
     b3a:	a1 2f       	mov	r26, r17
     b3c:	b0 2f       	mov	r27, r16
     b3e:	bc 01       	movw	r22, r24
     b40:	cd 01       	movw	r24, r26
     b42:	0e 94 bf 0b 	call	0x177e	; 0x177e <cos>
     b46:	a7 01       	movw	r20, r14
     b48:	96 01       	movw	r18, r12
     b4a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     b4e:	20 91 08 02 	lds	r18, 0x0208
     b52:	30 91 09 02 	lds	r19, 0x0209
     b56:	40 91 0a 02 	lds	r20, 0x020A
     b5a:	50 91 0b 02 	lds	r21, 0x020B
     b5e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	80 93 14 02 	sts	0x0214, r24
     b6a:	90 93 15 02 	sts	0x0215, r25
     b6e:	a0 93 16 02 	sts	0x0216, r26
     b72:	b0 93 17 02 	sts	0x0217, r27

    /*
    There are separate conditions for positive and negative coordinates as LCD cannot directly print negative nos.
    */

    if(current_x >= 0)
     b76:	8b 2d       	mov	r24, r11
     b78:	9a 2d       	mov	r25, r10
     b7a:	a9 2d       	mov	r26, r9
     b7c:	b8 2d       	mov	r27, r8
     b7e:	bc 01       	movw	r22, r24
     b80:	cd 01       	movw	r24, r26
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	a9 01       	movw	r20, r18
     b88:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
     b8c:	88 23       	and	r24, r24
     b8e:	dc f0       	brlt	.+54     	; 0xbc6 <coordinate_calculation+0x128>
    {
        lcd_cursor(1,13);											 //Printing the x-coordinate on the LCD
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	6d e0       	ldi	r22, 0x0D	; 13
     b94:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("+");
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(1,13,current_x,4);
     ba0:	60 91 18 02 	lds	r22, 0x0218
     ba4:	70 91 19 02 	lds	r23, 0x0219
     ba8:	80 91 1a 02 	lds	r24, 0x021A
     bac:	90 91 1b 02 	lds	r25, 0x021B
     bb0:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     bb4:	8b 01       	movw	r16, r22
     bb6:	9c 01       	movw	r18, r24
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	6d e0       	ldi	r22, 0x0D	; 13
     bbc:	a8 01       	movw	r20, r16
     bbe:	24 e0       	ldi	r18, 0x04	; 4
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }
    if(current_x < 0)
     bc6:	60 91 18 02 	lds	r22, 0x0218
     bca:	70 91 19 02 	lds	r23, 0x0219
     bce:	80 91 1a 02 	lds	r24, 0x021A
     bd2:	90 91 1b 02 	lds	r25, 0x021B
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	a9 01       	movw	r20, r18
     bdc:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
     be0:	88 23       	and	r24, r24
     be2:	f4 f4       	brge	.+60     	; 0xc20 <coordinate_calculation+0x182>
    {
        lcd_cursor(1,13);
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	6d e0       	ldi	r22, 0x0D	; 13
     be8:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("-");
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(1,13,(-1 * current_x),4);
     bf4:	80 91 18 02 	lds	r24, 0x0218
     bf8:	90 91 19 02 	lds	r25, 0x0219
     bfc:	a0 91 1a 02 	lds	r26, 0x021A
     c00:	b0 91 1b 02 	lds	r27, 0x021B
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	90 58       	subi	r25, 0x80	; 128
     c0a:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     c0e:	8b 01       	movw	r16, r22
     c10:	9c 01       	movw	r18, r24
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	6d e0       	ldi	r22, 0x0D	; 13
     c16:	a8 01       	movw	r20, r16
     c18:	24 e0       	ldi	r18, 0x04	; 4
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }
    if(current_y >= 0)												 //Printing the y-coordinate on the LCD
     c20:	60 91 14 02 	lds	r22, 0x0214
     c24:	70 91 15 02 	lds	r23, 0x0215
     c28:	80 91 16 02 	lds	r24, 0x0216
     c2c:	90 91 17 02 	lds	r25, 0x0217
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	a9 01       	movw	r20, r18
     c36:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
     c3a:	88 23       	and	r24, r24
     c3c:	dc f0       	brlt	.+54     	; 0xc74 <coordinate_calculation+0x1d6>
    {
        lcd_cursor(2,13);
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	6d e0       	ldi	r22, 0x0D	; 13
     c42:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("+");
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(2,13,current_y,4);
     c4e:	60 91 14 02 	lds	r22, 0x0214
     c52:	70 91 15 02 	lds	r23, 0x0215
     c56:	80 91 16 02 	lds	r24, 0x0216
     c5a:	90 91 17 02 	lds	r25, 0x0217
     c5e:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     c62:	8b 01       	movw	r16, r22
     c64:	9c 01       	movw	r18, r24
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	6d e0       	ldi	r22, 0x0D	; 13
     c6a:	a8 01       	movw	r20, r16
     c6c:	24 e0       	ldi	r18, 0x04	; 4
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }
    if(current_y < 0)
     c74:	60 91 14 02 	lds	r22, 0x0214
     c78:	70 91 15 02 	lds	r23, 0x0215
     c7c:	80 91 16 02 	lds	r24, 0x0216
     c80:	90 91 17 02 	lds	r25, 0x0217
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	a9 01       	movw	r20, r18
     c8a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
     c8e:	88 23       	and	r24, r24
     c90:	f4 f4       	brge	.+60     	; 0xcce <coordinate_calculation+0x230>
    {
        lcd_cursor(2,13);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	6d e0       	ldi	r22, 0x0D	; 13
     c96:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
        lcd_string("-");
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
        lcd_print(2,13,(-1 * current_y),4);
     ca2:	80 91 14 02 	lds	r24, 0x0214
     ca6:	90 91 15 02 	lds	r25, 0x0215
     caa:	a0 91 16 02 	lds	r26, 0x0216
     cae:	b0 91 17 02 	lds	r27, 0x0217
     cb2:	bc 01       	movw	r22, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	90 58       	subi	r25, 0x80	; 128
     cb8:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     cbc:	8b 01       	movw	r16, r22
     cbe:	9c 01       	movw	r18, r24
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	6d e0       	ldi	r22, 0x0D	; 13
     cc4:	a8 01       	movw	r20, r16
     cc6:	24 e0       	ldi	r18, 0x04	; 4
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    }

}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	08 95       	ret

00000ce8 <get_dist>:
Function to return the distance travelled by the bot from the previous node
Distance is calculated by measuring the counts of the shaft encoder
*/
//-----------------------------------------------------------------------
double get_dist()
{
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
      88 pulses for 360 degree rotation  =>  88 pulses for 2*pi*7.6 = 47.8 cm
    Thus, 0.54 cm per count

    *********************************************/

    double distance_travelled_till_yet = 0.54*(Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)/2;
     cf0:	60 91 1c 02 	lds	r22, 0x021C
     cf4:	70 91 1d 02 	lds	r23, 0x021D
     cf8:	80 91 1e 02 	lds	r24, 0x021E
     cfc:	90 91 1f 02 	lds	r25, 0x021F
     d00:	68 0f       	add	r22, r24
     d02:	79 1f       	adc	r23, r25
     d04:	88 27       	eor	r24, r24
     d06:	77 fd       	sbrc	r23, 7
     d08:	80 95       	com	r24
     d0a:	98 2f       	mov	r25, r24
     d0c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
     d10:	21 e7       	ldi	r18, 0x71	; 113
     d12:	3d e3       	ldi	r19, 0x3D	; 61
     d14:	4a e0       	ldi	r20, 0x0A	; 10
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     d28:	06 2f       	mov	r16, r22
     d2a:	17 2f       	mov	r17, r23
     d2c:	d8 2f       	mov	r29, r24
     d2e:	c9 2f       	mov	r28, r25

    // Also update coordinates of the bot
    coordinate_calculation(distance_travelled_till_yet);
     d30:	86 2f       	mov	r24, r22
     d32:	91 2f       	mov	r25, r17
     d34:	ad 2f       	mov	r26, r29
     d36:	bc 2f       	mov	r27, r28
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <coordinate_calculation>

    return distance_travelled_till_yet;
}
     d40:	80 2f       	mov	r24, r16
     d42:	91 2f       	mov	r25, r17
     d44:	ad 2f       	mov	r26, r29
     d46:	bc 2f       	mov	r27, r28
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <check_dist_travelled>:
Also the distance travelled from the previous node is returned continuously to check
if the required distance has been transversed yet or net.
*/
//-----------------------------------------------------------------------
void check_dist_travelled(unsigned int dist)
{
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
    Shaft_Counter_Left_Wheel = 0;
     d6c:	10 92 1d 02 	sts	0x021D, r1
     d70:	10 92 1c 02 	sts	0x021C, r1

    Shaft_Counter_Right_Wheel = 0;
     d74:	10 92 1f 02 	sts	0x021F, r1
     d78:	10 92 1e 02 	sts	0x021E, r1
        if (distance<reference_distance)
        {
            avoiding_obstacle(distance);
        }

        if (get_dist()>dist)
     d7c:	4c 01       	movw	r8, r24
     d7e:	aa 24       	eor	r10, r10
     d80:	bb 24       	eor	r11, r11
       If this value is less than the set reference distance, BCAS is activated.
       */

    while (1)
    {
        unsigned char reading=Read_Sensor(11);
     d82:	8b e0       	ldi	r24, 0x0B	; 11
     d84:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Read_Sensor>
        double distance =convert(reading);
     d88:	0e 94 1d 05 	call	0xa3a	; 0xa3a <convert>
     d8c:	bc 01       	movw	r22, r24
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
     d96:	16 2f       	mov	r17, r22
     d98:	d7 2f       	mov	r29, r23
     d9a:	c8 2f       	mov	r28, r24
     d9c:	c9 2e       	mov	r12, r25
        if (distance<reference_distance)
     d9e:	86 2f       	mov	r24, r22
     da0:	9d 2f       	mov	r25, r29
     da2:	ac 2f       	mov	r26, r28
     da4:	bc 2d       	mov	r27, r12
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	20 91 04 02 	lds	r18, 0x0204
     dae:	30 91 05 02 	lds	r19, 0x0205
     db2:	40 91 06 02 	lds	r20, 0x0206
     db6:	50 91 07 02 	lds	r21, 0x0207
     dba:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
     dbe:	88 23       	and	r24, r24
     dc0:	44 f4       	brge	.+16     	; 0xdd2 <check_dist_travelled+0x7c>
        {
            avoiding_obstacle(distance);
     dc2:	81 2f       	mov	r24, r17
     dc4:	9d 2f       	mov	r25, r29
     dc6:	ac 2f       	mov	r26, r28
     dc8:	bc 2d       	mov	r27, r12
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 1a 08 	call	0x1034	; 0x1034 <avoiding_obstacle>
        }

        if (get_dist()>dist)
     dd2:	0e 94 74 06 	call	0xce8	; 0xce8 <get_dist>
     dd6:	6b 01       	movw	r12, r22
     dd8:	7c 01       	movw	r14, r24
     dda:	c5 01       	movw	r24, r10
     ddc:	b4 01       	movw	r22, r8
     dde:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
     de2:	9b 01       	movw	r18, r22
     de4:	ac 01       	movw	r20, r24
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
     dee:	18 16       	cp	r1, r24
     df0:	44 f6       	brge	.-112    	; 0xd82 <check_dist_travelled+0x2c>
            break;

    }

    stop_motion();
     df2:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	08 95       	ret

00000e0e <move_forward>:


//Function to move forward a certain distance
//-----------------------------------------------------------------------
void move_forward(unsigned int dist)
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	ec 01       	movw	r28, r24
    forward_motion();                     // Move the bot forward till it covers the specified distance
     e14:	0e 94 03 03 	call	0x606	; 0x606 <forward_motion>
    check_dist_travelled(dist);
     e18:	ce 01       	movw	r24, r28
     e1a:	0e 94 ab 06 	call	0xd56	; 0xd56 <check_dist_travelled>
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <line_move>:


//Function to rotate to a specific angel and then move a certain distance
//-----------------------------------------------------------------------
void line_move(double dist, double angle)               // Move the bot along the line previously calculated
{
     e24:	4f 92       	push	r4
     e26:	5f 92       	push	r5
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	2b 01       	movw	r4, r22
     e46:	3c 01       	movw	r6, r24
     e48:	49 01       	movw	r8, r18
     e4a:	5a 01       	movw	r10, r20
    if((angle - current_theta)>0)                      //if rotation angle is positive it starts right rotation.
     e4c:	c0 90 10 02 	lds	r12, 0x0210
     e50:	d0 90 11 02 	lds	r13, 0x0211
     e54:	e0 90 12 02 	lds	r14, 0x0212
     e58:	f0 90 13 02 	lds	r15, 0x0213
     e5c:	ca 01       	movw	r24, r20
     e5e:	b9 01       	movw	r22, r18
     e60:	a7 01       	movw	r20, r14
     e62:	96 01       	movw	r18, r12
     e64:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__subsf3>
     e68:	06 2f       	mov	r16, r22
     e6a:	17 2f       	mov	r17, r23
     e6c:	d8 2f       	mov	r29, r24
     e6e:	c9 2f       	mov	r28, r25
     e70:	86 2f       	mov	r24, r22
     e72:	91 2f       	mov	r25, r17
     e74:	ad 2f       	mov	r26, r29
     e76:	bc 2f       	mov	r27, r28
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	a9 01       	movw	r20, r18
     e82:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
     e86:	18 16       	cp	r1, r24
     e88:	6c f4       	brge	.+26     	; 0xea4 <line_move+0x80>
        Right_Rotation_Degrees(angle - current_theta);  //aligns the bot such that it face towards the final point.
     e8a:	80 2f       	mov	r24, r16
     e8c:	91 2f       	mov	r25, r17
     e8e:	ad 2f       	mov	r26, r29
     e90:	bc 2f       	mov	r27, r28
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__fixsfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	0e 94 2c 04 	call	0x858	; 0x858 <Right_Rotation_Degrees>
     ea2:	19 c0       	rjmp	.+50     	; 0xed6 <line_move+0xb2>

    else if((angle - current_theta)<0)                  //if rotation angle is negative it starts left rotation.
     ea4:	80 2f       	mov	r24, r16
     ea6:	91 2f       	mov	r25, r17
     ea8:	ad 2f       	mov	r26, r29
     eaa:	bc 2f       	mov	r27, r28
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	a9 01       	movw	r20, r18
     eb6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
     eba:	88 23       	and	r24, r24
     ebc:	64 f4       	brge	.+24     	; 0xed6 <line_move+0xb2>
        Left_Rotation_Degrees(current_theta-angle);     //aligns the bot such that it face towards the final point.
     ebe:	c7 01       	movw	r24, r14
     ec0:	b6 01       	movw	r22, r12
     ec2:	a5 01       	movw	r20, r10
     ec4:	94 01       	movw	r18, r8
     ec6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__subsf3>
     eca:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__fixsfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	0e 94 39 03 	call	0x672	; 0x672 <Left_Rotation_Degrees>

    move_forward((unsigned int)dist);                   //bot starts moving forward towards the final point.
     ed6:	c3 01       	movw	r24, r6
     ed8:	b2 01       	movw	r22, r4
     eda:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	0e 94 07 07 	call	0xe0e	; 0xe0e <move_forward>

}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	9f 90       	pop	r9
     efc:	8f 90       	pop	r8
     efe:	7f 90       	pop	r7
     f00:	6f 90       	pop	r6
     f02:	5f 90       	pop	r5
     f04:	4f 90       	pop	r4
     f06:	08 95       	ret

00000f08 <line_calc>:
to be moved to reach the required final point.
The line_move is then called to start moving.
*/
//-----------------------------------------------------------------------
void line_calc(double xfinal,double yfinal)
{
     f08:	4f 92       	push	r4
     f0a:	5f 92       	push	r5
     f0c:	6f 92       	push	r6
     f0e:	7f 92       	push	r7
     f10:	af 92       	push	r10
     f12:	bf 92       	push	r11
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	29 01       	movw	r4, r18
     f26:	3a 01       	movw	r6, r20
    double slopeangle, dist;

    slopeangle = atan2(xfinal - current_x , yfinal - current_y) * (180/pi);  // Calculate the slope of line between the current position of the bot and the final point.
     f28:	20 91 18 02 	lds	r18, 0x0218
     f2c:	30 91 19 02 	lds	r19, 0x0219
     f30:	40 91 1a 02 	lds	r20, 0x021A
     f34:	50 91 1b 02 	lds	r21, 0x021B
     f38:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__subsf3>
     f3c:	d6 2e       	mov	r13, r22
     f3e:	c7 2e       	mov	r12, r23
     f40:	b8 2e       	mov	r11, r24
     f42:	a9 2e       	mov	r10, r25
     f44:	c3 01       	movw	r24, r6
     f46:	b2 01       	movw	r22, r4
     f48:	20 91 14 02 	lds	r18, 0x0214
     f4c:	30 91 15 02 	lds	r19, 0x0215
     f50:	40 91 16 02 	lds	r20, 0x0216
     f54:	50 91 17 02 	lds	r21, 0x0217
     f58:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__subsf3>
     f5c:	d6 2f       	mov	r29, r22
     f5e:	c7 2f       	mov	r28, r23
     f60:	f8 2e       	mov	r15, r24
     f62:	e9 2e       	mov	r14, r25
     f64:	8d 2d       	mov	r24, r13
     f66:	9c 2d       	mov	r25, r12
     f68:	ab 2d       	mov	r26, r11
     f6a:	ba 2d       	mov	r27, r10
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0d 2f       	mov	r16, r29
     f72:	1c 2f       	mov	r17, r28
     f74:	2f 2d       	mov	r18, r15
     f76:	3e 2d       	mov	r19, r14
     f78:	a9 01       	movw	r20, r18
     f7a:	98 01       	movw	r18, r16
     f7c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <atan2>
     f80:	2b 01       	movw	r4, r22
     f82:	3c 01       	movw	r6, r24
    dist = sqrt(pow(yfinal-current_y,2) + pow(xfinal-current_x,2));          //Calculates distance to be moved along the line calculated above.
     f84:	3f 2d       	mov	r19, r15
     f86:	8d 2f       	mov	r24, r29
     f88:	9c 2f       	mov	r25, r28
     f8a:	af 2d       	mov	r26, r15
     f8c:	be 2d       	mov	r27, r14
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	23 2f       	mov	r18, r19
     f94:	3b 2f       	mov	r19, r27
     f96:	a9 01       	movw	r20, r18
     f98:	98 01       	movw	r18, r16
     f9a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     f9e:	d6 2f       	mov	r29, r22
     fa0:	c7 2f       	mov	r28, r23
     fa2:	f8 2e       	mov	r15, r24
     fa4:	e9 2e       	mov	r14, r25
     fa6:	3b 2d       	mov	r19, r11
     fa8:	8d 2d       	mov	r24, r13
     faa:	9c 2d       	mov	r25, r12
     fac:	ab 2d       	mov	r26, r11
     fae:	ba 2d       	mov	r27, r10
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0d 2d       	mov	r16, r13
     fb6:	1c 2d       	mov	r17, r12
     fb8:	23 2f       	mov	r18, r19
     fba:	3b 2f       	mov	r19, r27
     fbc:	a9 01       	movw	r20, r18
     fbe:	98 01       	movw	r18, r16
     fc0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
     fc4:	b6 2f       	mov	r27, r22
     fc6:	a7 2f       	mov	r26, r23
     fc8:	38 2f       	mov	r19, r24
     fca:	29 2f       	mov	r18, r25
     fcc:	4d 2f       	mov	r20, r29
     fce:	5c 2f       	mov	r21, r28
     fd0:	6f 2d       	mov	r22, r15
     fd2:	7e 2d       	mov	r23, r14
     fd4:	cb 01       	movw	r24, r22
     fd6:	ba 01       	movw	r22, r20
     fd8:	42 2f       	mov	r20, r18
     fda:	0b 2f       	mov	r16, r27
     fdc:	1a 2f       	mov	r17, r26
     fde:	23 2f       	mov	r18, r19
     fe0:	34 2f       	mov	r19, r20
     fe2:	a9 01       	movw	r20, r18
     fe4:	98 01       	movw	r18, r16
     fe6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
     fea:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <sqrt>
     fee:	6b 01       	movw	r12, r22
     ff0:	7c 01       	movw	r14, r24
    significantly.
    So we reduced the Pulse Width Modulation(PWM) of the motor which very much increased the accuracy of the bot.
    Thus we reduced the speed of the bot and set it to (100,100)
    **************************************************************************************************************************************************/

    velocity (80,80);
     ff2:	80 e5       	ldi	r24, 0x50	; 80
     ff4:	60 e5       	ldi	r22, 0x50	; 80
     ff6:	0e 94 11 03 	call	0x622	; 0x622 <velocity>
//-----------------------------------------------------------------------
void line_calc(double xfinal,double yfinal)
{
    double slopeangle, dist;

    slopeangle = atan2(xfinal - current_x , yfinal - current_y) * (180/pi);  // Calculate the slope of line between the current position of the bot and the final point.
     ffa:	c3 01       	movw	r24, r6
     ffc:	b2 01       	movw	r22, r4
     ffe:	2d e4       	ldi	r18, 0x4D	; 77
    1000:	3f e2       	ldi	r19, 0x2F	; 47
    1002:	45 e6       	ldi	r20, 0x65	; 101
    1004:	52 e4       	ldi	r21, 0x42	; 66
    1006:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    Thus we reduced the speed of the bot and set it to (100,100)
    **************************************************************************************************************************************************/

    velocity (80,80);

    line_move(dist, slopeangle);                                                    //bot starts moving along the calculated line.
    100e:	c7 01       	movw	r24, r14
    1010:	b6 01       	movw	r22, r12
    1012:	0e 94 12 07 	call	0xe24	; 0xe24 <line_move>

}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	7f 90       	pop	r7
    102c:	6f 90       	pop	r6
    102e:	5f 90       	pop	r5
    1030:	4f 90       	pop	r4
    1032:	08 95       	ret

00001034 <avoiding_obstacle>:
If the obstacle is there the BCAS
is activated.
*/
//-----------------------------------------------------------------------
void avoiding_obstacle(double distance)
{
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    init_x = current_x;         //sets the initial co-ordinates to the the co-ordinates where the bot detected the obstacle.
    1044:	00 91 18 02 	lds	r16, 0x0218
    1048:	10 91 19 02 	lds	r17, 0x0219
    104c:	20 91 1a 02 	lds	r18, 0x021A
    1050:	30 91 1b 02 	lds	r19, 0x021B
    1054:	00 93 0c 02 	sts	0x020C, r16
    1058:	10 93 0d 02 	sts	0x020D, r17
    105c:	20 93 0e 02 	sts	0x020E, r18
    1060:	30 93 0f 02 	sts	0x020F, r19
    init_y = current_y;         // new initial co-ordinated are the new node.distance travelled will now be measured from this point.
    1064:	00 91 14 02 	lds	r16, 0x0214
    1068:	10 91 15 02 	lds	r17, 0x0215
    106c:	20 91 16 02 	lds	r18, 0x0216
    1070:	30 91 17 02 	lds	r19, 0x0217
    1074:	00 93 08 02 	sts	0x0208, r16
    1078:	10 93 09 02 	sts	0x0209, r17
    107c:	20 93 0a 02 	sts	0x020A, r18
    1080:	30 93 0b 02 	sts	0x020B, r19
    To implement this we defined a counter which measures how many times bot have to turn to get clear from obstacle.Now the bot is
    moved proportional to the counter thus clearing the obstacle and also reducing the path length at the same time.
    *********************************************************************************************************************************/
    int counter=0;                                         //initializing the counter value to zero.

    while((unsigned int)distance<reference_distance+30)
    1084:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
    1090:	6b 01       	movw	r12, r22
    1092:	7c 01       	movw	r14, r24
    1094:	60 91 04 02 	lds	r22, 0x0204
    1098:	70 91 05 02 	lds	r23, 0x0205
    109c:	80 91 06 02 	lds	r24, 0x0206
    10a0:	90 91 07 02 	lds	r25, 0x0207
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 ef       	ldi	r20, 0xF0	; 240
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
    10b0:	9b 01       	movw	r18, r22
    10b2:	ac 01       	movw	r20, r24
    10b4:	c7 01       	movw	r24, r14
    10b6:	b6 01       	movw	r22, r12
    10b8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
    10bc:	88 23       	and	r24, r24
    10be:	84 f5       	brge	.+96     	; 0x1120 <avoiding_obstacle+0xec>
    /*********************************************************************************************************************************
    To minimize the returning path of the bot it was necessary that bot clears the obstacle proportional to the size of the obstacle.
    To implement this we defined a counter which measures how many times bot have to turn to get clear from obstacle.Now the bot is
    moved proportional to the counter thus clearing the obstacle and also reducing the path length at the same time.
    *********************************************************************************************************************************/
    int counter=0;                                         //initializing the counter value to zero.
    10c0:	c0 e0       	ldi	r28, 0x00	; 0
    10c2:	d0 e0       	ldi	r29, 0x00	; 0

    while((unsigned int)distance<reference_distance+30)
    {
        Left_Rotation_Degrees(25);                           // Turn the bot 25 degrees repeatedly till line of motion gets clear
    10c4:	89 e1       	ldi	r24, 0x19	; 25
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 39 03 	call	0x672	; 0x672 <Left_Rotation_Degrees>
        unsigned char reading=Read_Sensor(11);
    10cc:	8b e0       	ldi	r24, 0x0B	; 11
    10ce:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Read_Sensor>
        distance =convert(reading);
    10d2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <convert>

        counter++;                                           //updating the counter.
    10d6:	21 96       	adiw	r28, 0x01	; 1

    while((unsigned int)distance<reference_distance+30)
    {
        Left_Rotation_Degrees(25);                           // Turn the bot 25 degrees repeatedly till line of motion gets clear
        unsigned char reading=Read_Sensor(11);
        distance =convert(reading);
    10d8:	bc 01       	movw	r22, r24
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
    To implement this we defined a counter which measures how many times bot have to turn to get clear from obstacle.Now the bot is
    moved proportional to the counter thus clearing the obstacle and also reducing the path length at the same time.
    *********************************************************************************************************************************/
    int counter=0;                                         //initializing the counter value to zero.

    while((unsigned int)distance<reference_distance+30)
    10e2:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
    10ee:	6b 01       	movw	r12, r22
    10f0:	7c 01       	movw	r14, r24
    10f2:	60 91 04 02 	lds	r22, 0x0204
    10f6:	70 91 05 02 	lds	r23, 0x0205
    10fa:	80 91 06 02 	lds	r24, 0x0206
    10fe:	90 91 07 02 	lds	r25, 0x0207
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 ef       	ldi	r20, 0xF0	; 240
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	c7 01       	movw	r24, r14
    1114:	b6 01       	movw	r22, r12
    1116:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__cmpsf2>
    111a:	88 23       	and	r24, r24
    111c:	9c f2       	brlt	.-90     	; 0x10c4 <avoiding_obstacle+0x90>
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <avoiding_obstacle+0xf0>
    /*********************************************************************************************************************************
    To minimize the returning path of the bot it was necessary that bot clears the obstacle proportional to the size of the obstacle.
    To implement this we defined a counter which measures how many times bot have to turn to get clear from obstacle.Now the bot is
    moved proportional to the counter thus clearing the obstacle and also reducing the path length at the same time.
    *********************************************************************************************************************************/
    int counter=0;                                         //initializing the counter value to zero.
    1120:	c0 e0       	ldi	r28, 0x00	; 0
    1122:	d0 e0       	ldi	r29, 0x00	; 0
        distance =convert(reading);

        counter++;                                           //updating the counter.
    }

    double move_dist = 10/cos(25*pi*counter/180) + 5;        //moving the distance proportional to the counter.
    1124:	be 01       	movw	r22, r28
    1126:	88 27       	eor	r24, r24
    1128:	77 fd       	sbrc	r23, 7
    112a:	80 95       	com	r24
    112c:	98 2f       	mov	r25, r24
    112e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
    1132:	29 e1       	ldi	r18, 0x19	; 25
    1134:	34 e1       	ldi	r19, 0x14	; 20
    1136:	4d e9       	ldi	r20, 0x9D	; 157
    1138:	52 e4       	ldi	r21, 0x42	; 66
    113a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	44 e3       	ldi	r20, 0x34	; 52
    1144:	53 e4       	ldi	r21, 0x43	; 67
    1146:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__divsf3>
    114a:	0e 94 bf 0b 	call	0x177e	; 0x177e <cos>
    114e:	9b 01       	movw	r18, r22
    1150:	ac 01       	movw	r20, r24
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	91 e4       	ldi	r25, 0x41	; 65
    115a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__divsf3>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 ea       	ldi	r20, 0xA0	; 160
    1164:	50 e4       	ldi	r21, 0x40	; 64
    1166:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>

    line_move(move_dist,current_theta);                 // Move the bot forward till obstacle is cleared
    116a:	20 91 10 02 	lds	r18, 0x0210
    116e:	30 91 11 02 	lds	r19, 0x0211
    1172:	40 91 12 02 	lds	r20, 0x0212
    1176:	50 91 13 02 	lds	r21, 0x0213
    117a:	0e 94 12 07 	call	0xe24	; 0xe24 <line_move>

    line_calc(0,0);                                   // Recalculate the line to be traversed
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	cb 01       	movw	r24, r22
    1184:	9b 01       	movw	r18, r22
    1186:	ac 01       	movw	r20, r24
    1188:	0e 94 84 07 	call	0xf08	; 0xf08 <line_calc>
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	08 95       	ret

0000119e <backtracking>:
in that direction.
*************************************************/
//-----------------------------------------------------------------------
void backtracking()
{
    sei();
    119e:	78 94       	sei
    line_calc(0,0);
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	cb 01       	movw	r24, r22
    11a6:	9b 01       	movw	r18, r22
    11a8:	ac 01       	movw	r20, r24
    11aa:	0e 94 84 07 	call	0xf08	; 0xf08 <line_calc>
    cli();
    11ae:	f8 94       	cli
}
    11b0:	08 95       	ret

000011b2 <__vector_25>:
using it to move the Bot manually.
*/
//-----------------------------------------------------------------------

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	0b b6       	in	r0, 0x3b	; 59
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	cf 92       	push	r12
    11c2:	df 92       	push	r13
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31

    data = UDR0; 				//making copy of data from UDR0 in 'data' variable
    11e4:	e6 ec       	ldi	r30, 0xC6	; 198
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	80 93 26 02 	sts	0x0226, r24

    UDR0 = data; 				//echo data back to PC so that we get to know that the data is recieved at the bot
    11ee:	80 83       	st	Z, r24

    Shaft_Counter_Left_Wheel = 0;
    11f0:	10 92 1d 02 	sts	0x021D, r1
    11f4:	10 92 1c 02 	sts	0x021C, r1

    Shaft_Counter_Right_Wheel = 0;
    11f8:	10 92 1f 02 	sts	0x021F, r1
    11fc:	10 92 1e 02 	sts	0x021E, r1

    unsigned char reading=Read_Sensor(11);
    1200:	8b e0       	ldi	r24, 0x0B	; 11
    1202:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Read_Sensor>
    double distance =convert(reading);
    1206:	0e 94 1d 05 	call	0xa3a	; 0xa3a <convert>
    Then the new coordinates are calculated using the coordinate_calculation function in which distance travelled from the previous
    node is mentioned
    A new node is formed after that which is further used for any further motions.
    */

    if(data == 0x38 && distance>reference_distance) //ASCII value of 8
    120a:	20 91 26 02 	lds	r18, 0x0226
    120e:	28 33       	cpi	r18, 0x38	; 56
    1210:	09 f0       	breq	.+2      	; 0x1214 <__vector_25+0x62>
    1212:	5f c0       	rjmp	.+190    	; 0x12d2 <__vector_25+0x120>
    Shaft_Counter_Left_Wheel = 0;

    Shaft_Counter_Right_Wheel = 0;

    unsigned char reading=Read_Sensor(11);
    double distance =convert(reading);
    1214:	bc 01       	movw	r22, r24
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__floatunsisf>
    Then the new coordinates are calculated using the coordinate_calculation function in which distance travelled from the previous
    node is mentioned
    A new node is formed after that which is further used for any further motions.
    */

    if(data == 0x38 && distance>reference_distance) //ASCII value of 8
    121e:	20 91 04 02 	lds	r18, 0x0204
    1222:	30 91 05 02 	lds	r19, 0x0205
    1226:	40 91 06 02 	lds	r20, 0x0206
    122a:	50 91 07 02 	lds	r21, 0x0207
    122e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
    1232:	18 16       	cp	r1, r24
    1234:	0c f0       	brlt	.+2      	; 0x1238 <__vector_25+0x86>
    1236:	4d c0       	rjmp	.+154    	; 0x12d2 <__vector_25+0x120>
    {
        forward_motion(); // Forward motion starts.
    1238:	0e 94 03 03 	call	0x606	; 0x606 <forward_motion>

        init_x = current_x;
    123c:	80 91 18 02 	lds	r24, 0x0218
    1240:	90 91 19 02 	lds	r25, 0x0219
    1244:	a0 91 1a 02 	lds	r26, 0x021A
    1248:	b0 91 1b 02 	lds	r27, 0x021B
    124c:	80 93 0c 02 	sts	0x020C, r24
    1250:	90 93 0d 02 	sts	0x020D, r25
    1254:	a0 93 0e 02 	sts	0x020E, r26
    1258:	b0 93 0f 02 	sts	0x020F, r27
        init_y = current_y;
    125c:	80 91 14 02 	lds	r24, 0x0214
    1260:	90 91 15 02 	lds	r25, 0x0215
    1264:	a0 91 16 02 	lds	r26, 0x0216
    1268:	b0 91 17 02 	lds	r27, 0x0217
    126c:	80 93 08 02 	sts	0x0208, r24
    1270:	90 93 09 02 	sts	0x0209, r25
    1274:	a0 93 0a 02 	sts	0x020A, r26
    1278:	b0 93 0b 02 	sts	0x020B, r27

        sei();
    127c:	78 94       	sei
    127e:	87 e4       	ldi	r24, 0x47	; 71
    1280:	91 ee       	ldi	r25, 0xE1	; 225
    1282:	a2 e0       	ldi	r26, 0x02	; 2
    1284:	81 50       	subi	r24, 0x01	; 1
    1286:	90 40       	sbci	r25, 0x00	; 0
    1288:	a0 40       	sbci	r26, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <__vector_25+0xd2>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <__vector_25+0xdc>
        _delay_ms(64);
        stop_motion();
    128e:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    1292:	86 e6       	ldi	r24, 0x66	; 102
    1294:	96 ee       	ldi	r25, 0xE6	; 230
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	81 50       	subi	r24, 0x01	; 1
    129a:	90 40       	sbci	r25, 0x00	; 0
    129c:	a0 40       	sbci	r26, 0x00	; 0
    129e:	e1 f7       	brne	.-8      	; 0x1298 <__vector_25+0xe6>
        _delay_ms(20);
        double dist_travelled = (Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)*0.54;
    12a0:	60 91 1c 02 	lds	r22, 0x021C
    12a4:	70 91 1d 02 	lds	r23, 0x021D
    12a8:	80 91 1e 02 	lds	r24, 0x021E
    12ac:	90 91 1f 02 	lds	r25, 0x021F
        cli();
    12b0:	f8 94       	cli

        sei();
        _delay_ms(64);
        stop_motion();
        _delay_ms(20);
        double dist_travelled = (Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)*0.54;
    12b2:	68 0f       	add	r22, r24
    12b4:	79 1f       	adc	r23, r25
    12b6:	88 27       	eor	r24, r24
    12b8:	77 fd       	sbrc	r23, 7
    12ba:	80 95       	com	r24
    12bc:	98 2f       	mov	r25, r24
    12be:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
    12c2:	21 e7       	ldi	r18, 0x71	; 113
    12c4:	3d e3       	ldi	r19, 0x3D	; 61
    12c6:	4a e0       	ldi	r20, 0x0A	; 10
    12c8:	5f e3       	ldi	r21, 0x3F	; 63
    12ca:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
        cli();

        coordinate_calculation(dist_travelled);
    12ce:	0e 94 4f 05 	call	0xa9e	; 0xa9e <coordinate_calculation>
    }


    if(data == 0x32) //ASCII value of 2
    12d2:	80 91 26 02 	lds	r24, 0x0226
    12d6:	82 33       	cpi	r24, 0x32	; 50
    12d8:	09 f0       	breq	.+2      	; 0x12dc <__vector_25+0x12a>
    12da:	58 c0       	rjmp	.+176    	; 0x138c <__vector_25+0x1da>
    {
        backward_motion(); //Backward Motion starts
    12dc:	0e 94 06 03 	call	0x60c	; 0x60c <backward_motion>

        sei();
    12e0:	78 94       	sei
    12e2:	87 e4       	ldi	r24, 0x47	; 71
    12e4:	91 ee       	ldi	r25, 0xE1	; 225
    12e6:	a2 e0       	ldi	r26, 0x02	; 2
    12e8:	81 50       	subi	r24, 0x01	; 1
    12ea:	90 40       	sbci	r25, 0x00	; 0
    12ec:	a0 40       	sbci	r26, 0x00	; 0
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <__vector_25+0x136>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <__vector_25+0x140>
        _delay_ms(64);

        stop_motion();
    12f2:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    12f6:	86 e6       	ldi	r24, 0x66	; 102
    12f8:	96 ee       	ldi	r25, 0xE6	; 230
    12fa:	a0 e0       	ldi	r26, 0x00	; 0
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	90 40       	sbci	r25, 0x00	; 0
    1300:	a0 40       	sbci	r26, 0x00	; 0
    1302:	e1 f7       	brne	.-8      	; 0x12fc <__vector_25+0x14a>

        _delay_ms(20);

        double dist_travelled = ((Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)/2)*0.54*2;
    1304:	60 91 1c 02 	lds	r22, 0x021C
    1308:	70 91 1d 02 	lds	r23, 0x021D
    130c:	80 91 1e 02 	lds	r24, 0x021E
    1310:	90 91 1f 02 	lds	r25, 0x021F
        cli();
    1314:	f8 94       	cli

        stop_motion();

        _delay_ms(20);

        double dist_travelled = ((Shaft_Counter_Left_Wheel+Shaft_Counter_Right_Wheel)/2)*0.54*2;
    1316:	68 0f       	add	r22, r24
    1318:	79 1f       	adc	r23, r25
    131a:	77 23       	and	r23, r23
    131c:	14 f4       	brge	.+4      	; 0x1322 <__vector_25+0x170>
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	75 95       	asr	r23
    1324:	67 95       	ror	r22
    1326:	88 27       	eor	r24, r24
    1328:	77 fd       	sbrc	r23, 7
    132a:	80 95       	com	r24
    132c:	98 2f       	mov	r25, r24
    132e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__floatsisf>
    1332:	21 e7       	ldi	r18, 0x71	; 113
    1334:	3d e3       	ldi	r19, 0x3D	; 61
    1336:	4a e0       	ldi	r20, 0x0A	; 10
    1338:	5f e3       	ldi	r21, 0x3F	; 63
    133a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
        cli();

        coordinate_calculation(-dist_travelled);
    1346:	90 58       	subi	r25, 0x80	; 128
    1348:	0e 94 4f 05 	call	0xa9e	; 0xa9e <coordinate_calculation>

        init_x = current_x;
    134c:	80 91 18 02 	lds	r24, 0x0218
    1350:	90 91 19 02 	lds	r25, 0x0219
    1354:	a0 91 1a 02 	lds	r26, 0x021A
    1358:	b0 91 1b 02 	lds	r27, 0x021B
    135c:	80 93 0c 02 	sts	0x020C, r24
    1360:	90 93 0d 02 	sts	0x020D, r25
    1364:	a0 93 0e 02 	sts	0x020E, r26
    1368:	b0 93 0f 02 	sts	0x020F, r27
        init_y = current_y;
    136c:	80 91 14 02 	lds	r24, 0x0214
    1370:	90 91 15 02 	lds	r25, 0x0215
    1374:	a0 91 16 02 	lds	r26, 0x0216
    1378:	b0 91 17 02 	lds	r27, 0x0217
    137c:	80 93 08 02 	sts	0x0208, r24
    1380:	90 93 09 02 	sts	0x0209, r25
    1384:	a0 93 0a 02 	sts	0x020A, r26
    1388:	b0 93 0b 02 	sts	0x020B, r27
    After 50 ms the motor is stopped but still a delay of 10 ms is provided to let the motor die down completely.
    The required turned angle is called on from the get_angle function and the calibrated value is subtracted/added to the current theta.
    Thus the value of the global variable current_theta is updated.
    */

    if(data == 0x34) //ASCII value of 4
    138c:	80 91 26 02 	lds	r24, 0x0226
    1390:	84 33       	cpi	r24, 0x34	; 52
    1392:	09 f0       	breq	.+2      	; 0x1396 <__vector_25+0x1e4>
    1394:	81 c0       	rjmp	.+258    	; 0x1498 <__vector_25+0x2e6>
    {
        left_motion();  // Left Motion starts.
    1396:	0e 94 09 03 	call	0x612	; 0x612 <left_motion>
        sei();
    139a:	78 94       	sei
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	9f e3       	ldi	r25, 0x3F	; 63
    13a0:	a2 e0       	ldi	r26, 0x02	; 2
    13a2:	81 50       	subi	r24, 0x01	; 1
    13a4:	90 40       	sbci	r25, 0x00	; 0
    13a6:	a0 40       	sbci	r26, 0x00	; 0
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <__vector_25+0x1f0>
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <__vector_25+0x1fa>
    13ac:	00 00       	nop
        _delay_ms(50);
        stop_motion();
    13ae:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    13b2:	af ef       	ldi	r26, 0xFF	; 255
    13b4:	bf e8       	ldi	r27, 0x8F	; 143
    13b6:	11 97       	sbiw	r26, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <__vector_25+0x204>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <__vector_25+0x20a>
    13bc:	00 00       	nop
        _delay_ms(10);
        current_theta-=(get_angle()*3);
    13be:	c0 90 10 02 	lds	r12, 0x0210
    13c2:	d0 90 11 02 	lds	r13, 0x0211
    13c6:	e0 90 12 02 	lds	r14, 0x0212
    13ca:	f0 90 13 02 	lds	r15, 0x0213
    13ce:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e4       	ldi	r20, 0x40	; 64
    13d8:	50 e4       	ldi	r21, 0x40	; 64
    13da:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    13de:	9b 01       	movw	r18, r22
    13e0:	ac 01       	movw	r20, r24
    13e2:	c7 01       	movw	r24, r14
    13e4:	b6 01       	movw	r22, r12
    13e6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__subsf3>
    13ea:	26 2f       	mov	r18, r22
    13ec:	37 2f       	mov	r19, r23
    13ee:	f8 2f       	mov	r31, r24
    13f0:	e9 2f       	mov	r30, r25
    13f2:	46 2f       	mov	r20, r22
    13f4:	57 2f       	mov	r21, r23
    13f6:	68 2f       	mov	r22, r24
    13f8:	79 2f       	mov	r23, r25
    13fa:	40 93 10 02 	sts	0x0210, r20
    13fe:	50 93 11 02 	sts	0x0211, r21
    1402:	60 93 12 02 	sts	0x0212, r22
    1406:	70 93 13 02 	sts	0x0213, r23
        //cli();
        if(current_theta>=0)
    140a:	82 2f       	mov	r24, r18
    140c:	93 2f       	mov	r25, r19
    140e:	af 2f       	mov	r26, r31
    1410:	be 2f       	mov	r27, r30
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	a9 01       	movw	r20, r18
    141c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
    1420:	88 23       	and	r24, r24
    1422:	e4 f0       	brlt	.+56     	; 0x145c <__vector_25+0x2aa>
        {
            lcd_cursor(1,2);
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	62 e0       	ldi	r22, 0x02	; 2
    1428:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,current_theta,4);
    1434:	60 91 10 02 	lds	r22, 0x0210
    1438:	70 91 11 02 	lds	r23, 0x0211
    143c:	80 91 12 02 	lds	r24, 0x0212
    1440:	90 91 13 02 	lds	r25, 0x0213
    1444:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
    1448:	8b 01       	movw	r16, r22
    144a:	9c 01       	movw	r18, r24
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	63 e0       	ldi	r22, 0x03	; 3
    1450:	a8 01       	movw	r20, r16
    1452:	24 e0       	ldi	r18, 0x04	; 4
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    145a:	1e c0       	rjmp	.+60     	; 0x1498 <__vector_25+0x2e6>
        }
        else
        {
            lcd_cursor(1,2);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3, (-1 * current_theta),4);
    146c:	80 91 10 02 	lds	r24, 0x0210
    1470:	90 91 11 02 	lds	r25, 0x0211
    1474:	a0 91 12 02 	lds	r26, 0x0212
    1478:	b0 91 13 02 	lds	r27, 0x0213
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	90 58       	subi	r25, 0x80	; 128
    1482:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
    1486:	8b 01       	movw	r16, r22
    1488:	9c 01       	movw	r18, r24
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	63 e0       	ldi	r22, 0x03	; 3
    148e:	a8 01       	movw	r20, r16
    1490:	24 e0       	ldi	r18, 0x04	; 4
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
    }


    if(data == 0x36) //ASCII value of 6
    1498:	80 91 26 02 	lds	r24, 0x0226
    149c:	86 33       	cpi	r24, 0x36	; 54
    149e:	09 f0       	breq	.+2      	; 0x14a2 <__vector_25+0x2f0>
    14a0:	7d c0       	rjmp	.+250    	; 0x159c <__vector_25+0x3ea>
    {

        right_motion();  // Right motion starts.
    14a2:	0e 94 0c 03 	call	0x618	; 0x618 <right_motion>
        sei();
    14a6:	78 94       	sei
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	9f e3       	ldi	r25, 0x3F	; 63
    14ac:	a2 e0       	ldi	r26, 0x02	; 2
    14ae:	81 50       	subi	r24, 0x01	; 1
    14b0:	90 40       	sbci	r25, 0x00	; 0
    14b2:	a0 40       	sbci	r26, 0x00	; 0
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <__vector_25+0x2fc>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <__vector_25+0x306>
    14b8:	00 00       	nop
        _delay_ms(50);
        stop_motion();
    14ba:	0e 94 0f 03 	call	0x61e	; 0x61e <stop_motion>
    14be:	af ef       	ldi	r26, 0xFF	; 255
    14c0:	bf e8       	ldi	r27, 0x8F	; 143
    14c2:	11 97       	sbiw	r26, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <__vector_25+0x310>
    14c6:	00 c0       	rjmp	.+0      	; 0x14c8 <__vector_25+0x316>
    14c8:	00 00       	nop
        _delay_ms(10);
        current_theta+=(get_angle()*3);
    14ca:	0e 94 16 03 	call	0x62c	; 0x62c <get_angle>
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e4       	ldi	r20, 0x40	; 64
    14d4:	50 e4       	ldi	r21, 0x40	; 64
    14d6:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__mulsf3>
    14da:	20 91 10 02 	lds	r18, 0x0210
    14de:	30 91 11 02 	lds	r19, 0x0211
    14e2:	40 91 12 02 	lds	r20, 0x0212
    14e6:	50 91 13 02 	lds	r21, 0x0213
    14ea:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3>
    14ee:	26 2f       	mov	r18, r22
    14f0:	37 2f       	mov	r19, r23
    14f2:	f8 2f       	mov	r31, r24
    14f4:	e9 2f       	mov	r30, r25
    14f6:	46 2f       	mov	r20, r22
    14f8:	57 2f       	mov	r21, r23
    14fa:	68 2f       	mov	r22, r24
    14fc:	79 2f       	mov	r23, r25
    14fe:	40 93 10 02 	sts	0x0210, r20
    1502:	50 93 11 02 	sts	0x0211, r21
    1506:	60 93 12 02 	sts	0x0212, r22
    150a:	70 93 13 02 	sts	0x0213, r23
        The LCD cannot print negative values so that is taken care of
        by the positive and negative signs that are displayed on the LCD
        in case of the respective positive and negative values.
        */

        if(current_theta>=0)
    150e:	82 2f       	mov	r24, r18
    1510:	93 2f       	mov	r25, r19
    1512:	af 2f       	mov	r26, r31
    1514:	be 2f       	mov	r27, r30
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__gesf2>
    1524:	88 23       	and	r24, r24
    1526:	e4 f0       	brlt	.+56     	; 0x1560 <__vector_25+0x3ae>
        {
            lcd_cursor(1,2);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	62 e0       	ldi	r22, 0x02	; 2
    152c:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("+");
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3,current_theta,4);
    1538:	60 91 10 02 	lds	r22, 0x0210
    153c:	70 91 11 02 	lds	r23, 0x0211
    1540:	80 91 12 02 	lds	r24, 0x0212
    1544:	90 91 13 02 	lds	r25, 0x0213
    1548:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
    154c:	8b 01       	movw	r16, r22
    154e:	9c 01       	movw	r18, r24
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	63 e0       	ldi	r22, 0x03	; 3
    1554:	a8 01       	movw	r20, r16
    1556:	24 e0       	ldi	r18, 0x04	; 4
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
    155e:	1e c0       	rjmp	.+60     	; 0x159c <__vector_25+0x3ea>
        }
        else
        {
            lcd_cursor(1,2);
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_cursor>
            lcd_string("-");
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_string>
            lcd_print(1,3, (-1 * current_theta),4);
    1570:	80 91 10 02 	lds	r24, 0x0210
    1574:	90 91 11 02 	lds	r25, 0x0211
    1578:	a0 91 12 02 	lds	r26, 0x0212
    157c:	b0 91 13 02 	lds	r27, 0x0213
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	90 58       	subi	r25, 0x80	; 128
    1586:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fixunssfsi>
    158a:	8b 01       	movw	r16, r22
    158c:	9c 01       	movw	r18, r24
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	63 e0       	ldi	r22, 0x03	; 3
    1592:	a8 01       	movw	r20, r16
    1594:	24 e0       	ldi	r18, 0x04	; 4
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_print>
        }
    }


    if(data == 0x37) //ASCII value of 7
    159c:	80 91 26 02 	lds	r24, 0x0226
    15a0:	87 33       	cpi	r24, 0x37	; 55
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <__vector_25+0x3f6>
    {
        backtracking();		//The Backtracking function is called which tells the bot to return to (0,0) coordinates in real space.
    15a4:	0e 94 cf 08 	call	0x119e	; 0x119e <backtracking>
    }


}
    15a8:	ff 91       	pop	r31
    15aa:	ef 91       	pop	r30
    15ac:	bf 91       	pop	r27
    15ae:	af 91       	pop	r26
    15b0:	9f 91       	pop	r25
    15b2:	8f 91       	pop	r24
    15b4:	7f 91       	pop	r23
    15b6:	6f 91       	pop	r22
    15b8:	5f 91       	pop	r21
    15ba:	4f 91       	pop	r20
    15bc:	3f 91       	pop	r19
    15be:	2f 91       	pop	r18
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	0f 90       	pop	r0
    15ce:	0b be       	out	0x3b, r0	; 59
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <main>:



int main()
{
    initialize();              // Initializes all the ports
    15da:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <initialize>
    lcd_init();				   // Initializes the LCD
    15de:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_init>
    init_xbee();			   // Initializes the X-Bee
    15e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <init_xbee>
    15e6:	ff cf       	rjmp	.-2      	; 0x15e6 <main+0xc>

000015e8 <__subsf3>:
    15e8:	50 58       	subi	r21, 0x80	; 128

000015ea <__addsf3>:
    15ea:	bb 27       	eor	r27, r27
    15ec:	aa 27       	eor	r26, r26
    15ee:	0e d0       	rcall	.+28     	; 0x160c <__addsf3x>
    15f0:	27 c2       	rjmp	.+1102   	; 0x1a40 <__fp_round>
    15f2:	f0 d1       	rcall	.+992    	; 0x19d4 <__fp_pscA>
    15f4:	30 f0       	brcs	.+12     	; 0x1602 <__addsf3+0x18>
    15f6:	f5 d1       	rcall	.+1002   	; 0x19e2 <__fp_pscB>
    15f8:	20 f0       	brcs	.+8      	; 0x1602 <__addsf3+0x18>
    15fa:	31 f4       	brne	.+12     	; 0x1608 <__addsf3+0x1e>
    15fc:	9f 3f       	cpi	r25, 0xFF	; 255
    15fe:	11 f4       	brne	.+4      	; 0x1604 <__addsf3+0x1a>
    1600:	1e f4       	brtc	.+6      	; 0x1608 <__addsf3+0x1e>
    1602:	c0 c1       	rjmp	.+896    	; 0x1984 <__fp_nan>
    1604:	0e f4       	brtc	.+2      	; 0x1608 <__addsf3+0x1e>
    1606:	e0 95       	com	r30
    1608:	e7 fb       	bst	r30, 7
    160a:	b6 c1       	rjmp	.+876    	; 0x1978 <__fp_inf>

0000160c <__addsf3x>:
    160c:	e9 2f       	mov	r30, r25
    160e:	3a d2       	rcall	.+1140   	; 0x1a84 <__fp_split3>
    1610:	80 f3       	brcs	.-32     	; 0x15f2 <__addsf3+0x8>
    1612:	ba 17       	cp	r27, r26
    1614:	62 07       	cpc	r22, r18
    1616:	73 07       	cpc	r23, r19
    1618:	84 07       	cpc	r24, r20
    161a:	95 07       	cpc	r25, r21
    161c:	18 f0       	brcs	.+6      	; 0x1624 <__addsf3x+0x18>
    161e:	71 f4       	brne	.+28     	; 0x163c <__addsf3x+0x30>
    1620:	9e f5       	brtc	.+102    	; 0x1688 <__addsf3x+0x7c>
    1622:	52 c2       	rjmp	.+1188   	; 0x1ac8 <__fp_zero>
    1624:	0e f4       	brtc	.+2      	; 0x1628 <__addsf3x+0x1c>
    1626:	e0 95       	com	r30
    1628:	0b 2e       	mov	r0, r27
    162a:	ba 2f       	mov	r27, r26
    162c:	a0 2d       	mov	r26, r0
    162e:	0b 01       	movw	r0, r22
    1630:	b9 01       	movw	r22, r18
    1632:	90 01       	movw	r18, r0
    1634:	0c 01       	movw	r0, r24
    1636:	ca 01       	movw	r24, r20
    1638:	a0 01       	movw	r20, r0
    163a:	11 24       	eor	r1, r1
    163c:	ff 27       	eor	r31, r31
    163e:	59 1b       	sub	r21, r25
    1640:	99 f0       	breq	.+38     	; 0x1668 <__addsf3x+0x5c>
    1642:	59 3f       	cpi	r21, 0xF9	; 249
    1644:	50 f4       	brcc	.+20     	; 0x165a <__addsf3x+0x4e>
    1646:	50 3e       	cpi	r21, 0xE0	; 224
    1648:	68 f1       	brcs	.+90     	; 0x16a4 <__addsf3x+0x98>
    164a:	1a 16       	cp	r1, r26
    164c:	f0 40       	sbci	r31, 0x00	; 0
    164e:	a2 2f       	mov	r26, r18
    1650:	23 2f       	mov	r18, r19
    1652:	34 2f       	mov	r19, r20
    1654:	44 27       	eor	r20, r20
    1656:	58 5f       	subi	r21, 0xF8	; 248
    1658:	f3 cf       	rjmp	.-26     	; 0x1640 <__addsf3x+0x34>
    165a:	46 95       	lsr	r20
    165c:	37 95       	ror	r19
    165e:	27 95       	ror	r18
    1660:	a7 95       	ror	r26
    1662:	f0 40       	sbci	r31, 0x00	; 0
    1664:	53 95       	inc	r21
    1666:	c9 f7       	brne	.-14     	; 0x165a <__addsf3x+0x4e>
    1668:	7e f4       	brtc	.+30     	; 0x1688 <__addsf3x+0x7c>
    166a:	1f 16       	cp	r1, r31
    166c:	ba 0b       	sbc	r27, r26
    166e:	62 0b       	sbc	r22, r18
    1670:	73 0b       	sbc	r23, r19
    1672:	84 0b       	sbc	r24, r20
    1674:	ba f0       	brmi	.+46     	; 0x16a4 <__addsf3x+0x98>
    1676:	91 50       	subi	r25, 0x01	; 1
    1678:	a1 f0       	breq	.+40     	; 0x16a2 <__addsf3x+0x96>
    167a:	ff 0f       	add	r31, r31
    167c:	bb 1f       	adc	r27, r27
    167e:	66 1f       	adc	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	c2 f7       	brpl	.-16     	; 0x1676 <__addsf3x+0x6a>
    1686:	0e c0       	rjmp	.+28     	; 0x16a4 <__addsf3x+0x98>
    1688:	ba 0f       	add	r27, r26
    168a:	62 1f       	adc	r22, r18
    168c:	73 1f       	adc	r23, r19
    168e:	84 1f       	adc	r24, r20
    1690:	48 f4       	brcc	.+18     	; 0x16a4 <__addsf3x+0x98>
    1692:	87 95       	ror	r24
    1694:	77 95       	ror	r23
    1696:	67 95       	ror	r22
    1698:	b7 95       	ror	r27
    169a:	f7 95       	ror	r31
    169c:	9e 3f       	cpi	r25, 0xFE	; 254
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <__addsf3x+0x96>
    16a0:	b3 cf       	rjmp	.-154    	; 0x1608 <__addsf3+0x1e>
    16a2:	93 95       	inc	r25
    16a4:	88 0f       	add	r24, r24
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <__addsf3x+0x9e>
    16a8:	99 27       	eor	r25, r25
    16aa:	ee 0f       	add	r30, r30
    16ac:	97 95       	ror	r25
    16ae:	87 95       	ror	r24
    16b0:	08 95       	ret
    16b2:	90 d1       	rcall	.+800    	; 0x19d4 <__fp_pscA>
    16b4:	58 f0       	brcs	.+22     	; 0x16cc <__addsf3x+0xc0>
    16b6:	80 e8       	ldi	r24, 0x80	; 128
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	09 f4       	brne	.+2      	; 0x16be <__addsf3x+0xb2>
    16bc:	9e ef       	ldi	r25, 0xFE	; 254
    16be:	91 d1       	rcall	.+802    	; 0x19e2 <__fp_pscB>
    16c0:	28 f0       	brcs	.+10     	; 0x16cc <__addsf3x+0xc0>
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	51 e0       	ldi	r21, 0x01	; 1
    16c6:	59 f4       	brne	.+22     	; 0x16de <atan2+0xe>
    16c8:	5e ef       	ldi	r21, 0xFE	; 254
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <atan2+0xe>
    16cc:	5b c1       	rjmp	.+694    	; 0x1984 <__fp_nan>
    16ce:	fc c1       	rjmp	.+1016   	; 0x1ac8 <__fp_zero>

000016d0 <atan2>:
    16d0:	e9 2f       	mov	r30, r25
    16d2:	e0 78       	andi	r30, 0x80	; 128
    16d4:	d7 d1       	rcall	.+942    	; 0x1a84 <__fp_split3>
    16d6:	68 f3       	brcs	.-38     	; 0x16b2 <__addsf3x+0xa6>
    16d8:	09 2e       	mov	r0, r25
    16da:	05 2a       	or	r0, r21
    16dc:	c1 f3       	breq	.-16     	; 0x16ce <__addsf3x+0xc2>
    16de:	26 17       	cp	r18, r22
    16e0:	37 07       	cpc	r19, r23
    16e2:	48 07       	cpc	r20, r24
    16e4:	59 07       	cpc	r21, r25
    16e6:	38 f0       	brcs	.+14     	; 0x16f6 <atan2+0x26>
    16e8:	0e 2e       	mov	r0, r30
    16ea:	07 f8       	bld	r0, 7
    16ec:	e0 25       	eor	r30, r0
    16ee:	69 f0       	breq	.+26     	; 0x170a <atan2+0x3a>
    16f0:	e0 25       	eor	r30, r0
    16f2:	e0 64       	ori	r30, 0x40	; 64
    16f4:	0a c0       	rjmp	.+20     	; 0x170a <atan2+0x3a>
    16f6:	ef 63       	ori	r30, 0x3F	; 63
    16f8:	07 f8       	bld	r0, 7
    16fa:	00 94       	com	r0
    16fc:	07 fa       	bst	r0, 7
    16fe:	db 01       	movw	r26, r22
    1700:	b9 01       	movw	r22, r18
    1702:	9d 01       	movw	r18, r26
    1704:	dc 01       	movw	r26, r24
    1706:	ca 01       	movw	r24, r20
    1708:	ad 01       	movw	r20, r26
    170a:	ef 93       	push	r30
    170c:	4a d0       	rcall	.+148    	; 0x17a2 <__divsf3_pse>
    170e:	98 d1       	rcall	.+816    	; 0x1a40 <__fp_round>
    1710:	0a d0       	rcall	.+20     	; 0x1726 <atan>
    1712:	5f 91       	pop	r21
    1714:	55 23       	and	r21, r21
    1716:	31 f0       	breq	.+12     	; 0x1724 <atan2+0x54>
    1718:	2b ed       	ldi	r18, 0xDB	; 219
    171a:	3f e0       	ldi	r19, 0x0F	; 15
    171c:	49 e4       	ldi	r20, 0x49	; 73
    171e:	50 fd       	sbrc	r21, 0
    1720:	49 ec       	ldi	r20, 0xC9	; 201
    1722:	63 cf       	rjmp	.-314    	; 0x15ea <__addsf3>
    1724:	08 95       	ret

00001726 <atan>:
    1726:	df 93       	push	r29
    1728:	dd 27       	eor	r29, r29
    172a:	b9 2f       	mov	r27, r25
    172c:	bf 77       	andi	r27, 0x7F	; 127
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	16 16       	cp	r1, r22
    1734:	17 06       	cpc	r1, r23
    1736:	48 07       	cpc	r20, r24
    1738:	5b 07       	cpc	r21, r27
    173a:	10 f4       	brcc	.+4      	; 0x1740 <atan+0x1a>
    173c:	d9 2f       	mov	r29, r25
    173e:	cf d1       	rcall	.+926    	; 0x1ade <inverse>
    1740:	9f 93       	push	r25
    1742:	8f 93       	push	r24
    1744:	7f 93       	push	r23
    1746:	6f 93       	push	r22
    1748:	c8 d2       	rcall	.+1424   	; 0x1cda <square>
    174a:	e4 ee       	ldi	r30, 0xE4	; 228
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	1d d1       	rcall	.+570    	; 0x198a <__fp_powser>
    1750:	77 d1       	rcall	.+750    	; 0x1a40 <__fp_round>
    1752:	2f 91       	pop	r18
    1754:	3f 91       	pop	r19
    1756:	4f 91       	pop	r20
    1758:	5f 91       	pop	r21
    175a:	d4 d1       	rcall	.+936    	; 0x1b04 <__mulsf3x>
    175c:	dd 23       	and	r29, r29
    175e:	49 f0       	breq	.+18     	; 0x1772 <atan+0x4c>
    1760:	90 58       	subi	r25, 0x80	; 128
    1762:	a2 ea       	ldi	r26, 0xA2	; 162
    1764:	2a ed       	ldi	r18, 0xDA	; 218
    1766:	3f e0       	ldi	r19, 0x0F	; 15
    1768:	49 ec       	ldi	r20, 0xC9	; 201
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	d0 78       	andi	r29, 0x80	; 128
    176e:	5d 27       	eor	r21, r29
    1770:	4d df       	rcall	.-358    	; 0x160c <__addsf3x>
    1772:	df 91       	pop	r29
    1774:	65 c1       	rjmp	.+714    	; 0x1a40 <__fp_round>

00001776 <__cmpsf2>:
    1776:	dc d0       	rcall	.+440    	; 0x1930 <__fp_cmp>
    1778:	08 f4       	brcc	.+2      	; 0x177c <__cmpsf2+0x6>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	08 95       	ret

0000177e <cos>:
    177e:	39 d1       	rcall	.+626    	; 0x19f2 <__fp_rempio2>
    1780:	e3 95       	inc	r30
    1782:	6f c1       	rjmp	.+734    	; 0x1a62 <__fp_sinus>

00001784 <__divsf3>:
    1784:	0c d0       	rcall	.+24     	; 0x179e <__divsf3x>
    1786:	5c c1       	rjmp	.+696    	; 0x1a40 <__fp_round>
    1788:	2c d1       	rcall	.+600    	; 0x19e2 <__fp_pscB>
    178a:	40 f0       	brcs	.+16     	; 0x179c <__divsf3+0x18>
    178c:	23 d1       	rcall	.+582    	; 0x19d4 <__fp_pscA>
    178e:	30 f0       	brcs	.+12     	; 0x179c <__divsf3+0x18>
    1790:	21 f4       	brne	.+8      	; 0x179a <__divsf3+0x16>
    1792:	5f 3f       	cpi	r21, 0xFF	; 255
    1794:	19 f0       	breq	.+6      	; 0x179c <__divsf3+0x18>
    1796:	f0 c0       	rjmp	.+480    	; 0x1978 <__fp_inf>
    1798:	51 11       	cpse	r21, r1
    179a:	97 c1       	rjmp	.+814    	; 0x1aca <__fp_szero>
    179c:	f3 c0       	rjmp	.+486    	; 0x1984 <__fp_nan>

0000179e <__divsf3x>:
    179e:	72 d1       	rcall	.+740    	; 0x1a84 <__fp_split3>
    17a0:	98 f3       	brcs	.-26     	; 0x1788 <__divsf3+0x4>

000017a2 <__divsf3_pse>:
    17a2:	99 23       	and	r25, r25
    17a4:	c9 f3       	breq	.-14     	; 0x1798 <__divsf3+0x14>
    17a6:	55 23       	and	r21, r21
    17a8:	b1 f3       	breq	.-20     	; 0x1796 <__divsf3+0x12>
    17aa:	95 1b       	sub	r25, r21
    17ac:	55 0b       	sbc	r21, r21
    17ae:	bb 27       	eor	r27, r27
    17b0:	aa 27       	eor	r26, r26
    17b2:	62 17       	cp	r22, r18
    17b4:	73 07       	cpc	r23, r19
    17b6:	84 07       	cpc	r24, r20
    17b8:	38 f0       	brcs	.+14     	; 0x17c8 <__divsf3_pse+0x26>
    17ba:	9f 5f       	subi	r25, 0xFF	; 255
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	22 0f       	add	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	44 1f       	adc	r20, r20
    17c4:	aa 1f       	adc	r26, r26
    17c6:	a9 f3       	breq	.-22     	; 0x17b2 <__divsf3_pse+0x10>
    17c8:	33 d0       	rcall	.+102    	; 0x1830 <__divsf3_pse+0x8e>
    17ca:	0e 2e       	mov	r0, r30
    17cc:	3a f0       	brmi	.+14     	; 0x17dc <__divsf3_pse+0x3a>
    17ce:	e0 e8       	ldi	r30, 0x80	; 128
    17d0:	30 d0       	rcall	.+96     	; 0x1832 <__divsf3_pse+0x90>
    17d2:	91 50       	subi	r25, 0x01	; 1
    17d4:	50 40       	sbci	r21, 0x00	; 0
    17d6:	e6 95       	lsr	r30
    17d8:	00 1c       	adc	r0, r0
    17da:	ca f7       	brpl	.-14     	; 0x17ce <__divsf3_pse+0x2c>
    17dc:	29 d0       	rcall	.+82     	; 0x1830 <__divsf3_pse+0x8e>
    17de:	fe 2f       	mov	r31, r30
    17e0:	27 d0       	rcall	.+78     	; 0x1830 <__divsf3_pse+0x8e>
    17e2:	66 0f       	add	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	bb 1f       	adc	r27, r27
    17ea:	26 17       	cp	r18, r22
    17ec:	37 07       	cpc	r19, r23
    17ee:	48 07       	cpc	r20, r24
    17f0:	ab 07       	cpc	r26, r27
    17f2:	b0 e8       	ldi	r27, 0x80	; 128
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <__divsf3_pse+0x56>
    17f6:	bb 0b       	sbc	r27, r27
    17f8:	80 2d       	mov	r24, r0
    17fa:	bf 01       	movw	r22, r30
    17fc:	ff 27       	eor	r31, r31
    17fe:	93 58       	subi	r25, 0x83	; 131
    1800:	5f 4f       	sbci	r21, 0xFF	; 255
    1802:	2a f0       	brmi	.+10     	; 0x180e <__divsf3_pse+0x6c>
    1804:	9e 3f       	cpi	r25, 0xFE	; 254
    1806:	51 05       	cpc	r21, r1
    1808:	68 f0       	brcs	.+26     	; 0x1824 <__divsf3_pse+0x82>
    180a:	b6 c0       	rjmp	.+364    	; 0x1978 <__fp_inf>
    180c:	5e c1       	rjmp	.+700    	; 0x1aca <__fp_szero>
    180e:	5f 3f       	cpi	r21, 0xFF	; 255
    1810:	ec f3       	brlt	.-6      	; 0x180c <__divsf3_pse+0x6a>
    1812:	98 3e       	cpi	r25, 0xE8	; 232
    1814:	dc f3       	brlt	.-10     	; 0x180c <__divsf3_pse+0x6a>
    1816:	86 95       	lsr	r24
    1818:	77 95       	ror	r23
    181a:	67 95       	ror	r22
    181c:	b7 95       	ror	r27
    181e:	f7 95       	ror	r31
    1820:	9f 5f       	subi	r25, 0xFF	; 255
    1822:	c9 f7       	brne	.-14     	; 0x1816 <__divsf3_pse+0x74>
    1824:	88 0f       	add	r24, r24
    1826:	91 1d       	adc	r25, r1
    1828:	96 95       	lsr	r25
    182a:	87 95       	ror	r24
    182c:	97 f9       	bld	r25, 7
    182e:	08 95       	ret
    1830:	e1 e0       	ldi	r30, 0x01	; 1
    1832:	66 0f       	add	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	bb 1f       	adc	r27, r27
    183a:	62 17       	cp	r22, r18
    183c:	73 07       	cpc	r23, r19
    183e:	84 07       	cpc	r24, r20
    1840:	ba 07       	cpc	r27, r26
    1842:	20 f0       	brcs	.+8      	; 0x184c <__divsf3_pse+0xaa>
    1844:	62 1b       	sub	r22, r18
    1846:	73 0b       	sbc	r23, r19
    1848:	84 0b       	sbc	r24, r20
    184a:	ba 0b       	sbc	r27, r26
    184c:	ee 1f       	adc	r30, r30
    184e:	88 f7       	brcc	.-30     	; 0x1832 <__divsf3_pse+0x90>
    1850:	e0 95       	com	r30
    1852:	08 95       	ret

00001854 <__fixsfsi>:
    1854:	04 d0       	rcall	.+8      	; 0x185e <__fixunssfsi>
    1856:	68 94       	set
    1858:	b1 11       	cpse	r27, r1
    185a:	37 c1       	rjmp	.+622    	; 0x1aca <__fp_szero>
    185c:	08 95       	ret

0000185e <__fixunssfsi>:
    185e:	1a d1       	rcall	.+564    	; 0x1a94 <__fp_splitA>
    1860:	88 f0       	brcs	.+34     	; 0x1884 <__fixunssfsi+0x26>
    1862:	9f 57       	subi	r25, 0x7F	; 127
    1864:	90 f0       	brcs	.+36     	; 0x188a <__fixunssfsi+0x2c>
    1866:	b9 2f       	mov	r27, r25
    1868:	99 27       	eor	r25, r25
    186a:	b7 51       	subi	r27, 0x17	; 23
    186c:	a0 f0       	brcs	.+40     	; 0x1896 <__fixunssfsi+0x38>
    186e:	d1 f0       	breq	.+52     	; 0x18a4 <__fixunssfsi+0x46>
    1870:	66 0f       	add	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	88 1f       	adc	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	1a f0       	brmi	.+6      	; 0x1880 <__fixunssfsi+0x22>
    187a:	ba 95       	dec	r27
    187c:	c9 f7       	brne	.-14     	; 0x1870 <__fixunssfsi+0x12>
    187e:	12 c0       	rjmp	.+36     	; 0x18a4 <__fixunssfsi+0x46>
    1880:	b1 30       	cpi	r27, 0x01	; 1
    1882:	81 f0       	breq	.+32     	; 0x18a4 <__fixunssfsi+0x46>
    1884:	21 d1       	rcall	.+578    	; 0x1ac8 <__fp_zero>
    1886:	b1 e0       	ldi	r27, 0x01	; 1
    1888:	08 95       	ret
    188a:	1e c1       	rjmp	.+572    	; 0x1ac8 <__fp_zero>
    188c:	67 2f       	mov	r22, r23
    188e:	78 2f       	mov	r23, r24
    1890:	88 27       	eor	r24, r24
    1892:	b8 5f       	subi	r27, 0xF8	; 248
    1894:	39 f0       	breq	.+14     	; 0x18a4 <__fixunssfsi+0x46>
    1896:	b9 3f       	cpi	r27, 0xF9	; 249
    1898:	cc f3       	brlt	.-14     	; 0x188c <__fixunssfsi+0x2e>
    189a:	86 95       	lsr	r24
    189c:	77 95       	ror	r23
    189e:	67 95       	ror	r22
    18a0:	b3 95       	inc	r27
    18a2:	d9 f7       	brne	.-10     	; 0x189a <__fixunssfsi+0x3c>
    18a4:	3e f4       	brtc	.+14     	; 0x18b4 <__fixunssfsi+0x56>
    18a6:	90 95       	com	r25
    18a8:	80 95       	com	r24
    18aa:	70 95       	com	r23
    18ac:	61 95       	neg	r22
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	08 95       	ret

000018b6 <__floatunsisf>:
    18b6:	e8 94       	clt
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <__floatsisf+0x12>

000018ba <__floatsisf>:
    18ba:	97 fb       	bst	r25, 7
    18bc:	3e f4       	brtc	.+14     	; 0x18cc <__floatsisf+0x12>
    18be:	90 95       	com	r25
    18c0:	80 95       	com	r24
    18c2:	70 95       	com	r23
    18c4:	61 95       	neg	r22
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	99 23       	and	r25, r25
    18ce:	a9 f0       	breq	.+42     	; 0x18fa <__floatsisf+0x40>
    18d0:	f9 2f       	mov	r31, r25
    18d2:	96 e9       	ldi	r25, 0x96	; 150
    18d4:	bb 27       	eor	r27, r27
    18d6:	93 95       	inc	r25
    18d8:	f6 95       	lsr	r31
    18da:	87 95       	ror	r24
    18dc:	77 95       	ror	r23
    18de:	67 95       	ror	r22
    18e0:	b7 95       	ror	r27
    18e2:	f1 11       	cpse	r31, r1
    18e4:	f8 cf       	rjmp	.-16     	; 0x18d6 <__floatsisf+0x1c>
    18e6:	fa f4       	brpl	.+62     	; 0x1926 <__floatsisf+0x6c>
    18e8:	bb 0f       	add	r27, r27
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <__floatsisf+0x36>
    18ec:	60 ff       	sbrs	r22, 0
    18ee:	1b c0       	rjmp	.+54     	; 0x1926 <__floatsisf+0x6c>
    18f0:	6f 5f       	subi	r22, 0xFF	; 255
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	8f 4f       	sbci	r24, 0xFF	; 255
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	16 c0       	rjmp	.+44     	; 0x1926 <__floatsisf+0x6c>
    18fa:	88 23       	and	r24, r24
    18fc:	11 f0       	breq	.+4      	; 0x1902 <__floatsisf+0x48>
    18fe:	96 e9       	ldi	r25, 0x96	; 150
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <__floatsisf+0x6a>
    1902:	77 23       	and	r23, r23
    1904:	21 f0       	breq	.+8      	; 0x190e <__floatsisf+0x54>
    1906:	9e e8       	ldi	r25, 0x8E	; 142
    1908:	87 2f       	mov	r24, r23
    190a:	76 2f       	mov	r23, r22
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <__floatsisf+0x5e>
    190e:	66 23       	and	r22, r22
    1910:	71 f0       	breq	.+28     	; 0x192e <__floatsisf+0x74>
    1912:	96 e8       	ldi	r25, 0x86	; 134
    1914:	86 2f       	mov	r24, r22
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	2a f0       	brmi	.+10     	; 0x1926 <__floatsisf+0x6c>
    191c:	9a 95       	dec	r25
    191e:	66 0f       	add	r22, r22
    1920:	77 1f       	adc	r23, r23
    1922:	88 1f       	adc	r24, r24
    1924:	da f7       	brpl	.-10     	; 0x191c <__floatsisf+0x62>
    1926:	88 0f       	add	r24, r24
    1928:	96 95       	lsr	r25
    192a:	87 95       	ror	r24
    192c:	97 f9       	bld	r25, 7
    192e:	08 95       	ret

00001930 <__fp_cmp>:
    1930:	99 0f       	add	r25, r25
    1932:	00 08       	sbc	r0, r0
    1934:	55 0f       	add	r21, r21
    1936:	aa 0b       	sbc	r26, r26
    1938:	e0 e8       	ldi	r30, 0x80	; 128
    193a:	fe ef       	ldi	r31, 0xFE	; 254
    193c:	16 16       	cp	r1, r22
    193e:	17 06       	cpc	r1, r23
    1940:	e8 07       	cpc	r30, r24
    1942:	f9 07       	cpc	r31, r25
    1944:	c0 f0       	brcs	.+48     	; 0x1976 <__fp_cmp+0x46>
    1946:	12 16       	cp	r1, r18
    1948:	13 06       	cpc	r1, r19
    194a:	e4 07       	cpc	r30, r20
    194c:	f5 07       	cpc	r31, r21
    194e:	98 f0       	brcs	.+38     	; 0x1976 <__fp_cmp+0x46>
    1950:	62 1b       	sub	r22, r18
    1952:	73 0b       	sbc	r23, r19
    1954:	84 0b       	sbc	r24, r20
    1956:	95 0b       	sbc	r25, r21
    1958:	39 f4       	brne	.+14     	; 0x1968 <__fp_cmp+0x38>
    195a:	0a 26       	eor	r0, r26
    195c:	61 f0       	breq	.+24     	; 0x1976 <__fp_cmp+0x46>
    195e:	23 2b       	or	r18, r19
    1960:	24 2b       	or	r18, r20
    1962:	25 2b       	or	r18, r21
    1964:	21 f4       	brne	.+8      	; 0x196e <__fp_cmp+0x3e>
    1966:	08 95       	ret
    1968:	0a 26       	eor	r0, r26
    196a:	09 f4       	brne	.+2      	; 0x196e <__fp_cmp+0x3e>
    196c:	a1 40       	sbci	r26, 0x01	; 1
    196e:	a6 95       	lsr	r26
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	81 1d       	adc	r24, r1
    1974:	81 1d       	adc	r24, r1
    1976:	08 95       	ret

00001978 <__fp_inf>:
    1978:	97 f9       	bld	r25, 7
    197a:	9f 67       	ori	r25, 0x7F	; 127
    197c:	80 e8       	ldi	r24, 0x80	; 128
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	08 95       	ret

00001984 <__fp_nan>:
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	80 ec       	ldi	r24, 0xC0	; 192
    1988:	08 95       	ret

0000198a <__fp_powser>:
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	1f 93       	push	r17
    1990:	0f 93       	push	r16
    1992:	ff 92       	push	r15
    1994:	ef 92       	push	r14
    1996:	df 92       	push	r13
    1998:	7b 01       	movw	r14, r22
    199a:	8c 01       	movw	r16, r24
    199c:	68 94       	set
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <__fp_powser+0x20>
    19a0:	da 2e       	mov	r13, r26
    19a2:	ef 01       	movw	r28, r30
    19a4:	af d0       	rcall	.+350    	; 0x1b04 <__mulsf3x>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e8 94       	clt
    19aa:	a5 91       	lpm	r26, Z+
    19ac:	25 91       	lpm	r18, Z+
    19ae:	35 91       	lpm	r19, Z+
    19b0:	45 91       	lpm	r20, Z+
    19b2:	55 91       	lpm	r21, Z+
    19b4:	ae f3       	brts	.-22     	; 0x19a0 <__fp_powser+0x16>
    19b6:	ef 01       	movw	r28, r30
    19b8:	29 de       	rcall	.-942    	; 0x160c <__addsf3x>
    19ba:	fe 01       	movw	r30, r28
    19bc:	97 01       	movw	r18, r14
    19be:	a8 01       	movw	r20, r16
    19c0:	da 94       	dec	r13
    19c2:	79 f7       	brne	.-34     	; 0x19a2 <__fp_powser+0x18>
    19c4:	df 90       	pop	r13
    19c6:	ef 90       	pop	r14
    19c8:	ff 90       	pop	r15
    19ca:	0f 91       	pop	r16
    19cc:	1f 91       	pop	r17
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <__fp_pscA>:
    19d4:	00 24       	eor	r0, r0
    19d6:	0a 94       	dec	r0
    19d8:	16 16       	cp	r1, r22
    19da:	17 06       	cpc	r1, r23
    19dc:	18 06       	cpc	r1, r24
    19de:	09 06       	cpc	r0, r25
    19e0:	08 95       	ret

000019e2 <__fp_pscB>:
    19e2:	00 24       	eor	r0, r0
    19e4:	0a 94       	dec	r0
    19e6:	12 16       	cp	r1, r18
    19e8:	13 06       	cpc	r1, r19
    19ea:	14 06       	cpc	r1, r20
    19ec:	05 06       	cpc	r0, r21
    19ee:	08 95       	ret
    19f0:	c9 cf       	rjmp	.-110    	; 0x1984 <__fp_nan>

000019f2 <__fp_rempio2>:
    19f2:	50 d0       	rcall	.+160    	; 0x1a94 <__fp_splitA>
    19f4:	e8 f3       	brcs	.-6      	; 0x19f0 <__fp_pscB+0xe>
    19f6:	e8 94       	clt
    19f8:	e0 e0       	ldi	r30, 0x00	; 0
    19fa:	bb 27       	eor	r27, r27
    19fc:	9f 57       	subi	r25, 0x7F	; 127
    19fe:	f0 f0       	brcs	.+60     	; 0x1a3c <__fp_rempio2+0x4a>
    1a00:	2a ed       	ldi	r18, 0xDA	; 218
    1a02:	3f e0       	ldi	r19, 0x0F	; 15
    1a04:	49 ec       	ldi	r20, 0xC9	; 201
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <__fp_rempio2+0x22>
    1a08:	ee 0f       	add	r30, r30
    1a0a:	bb 0f       	add	r27, r27
    1a0c:	66 1f       	adc	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	88 1f       	adc	r24, r24
    1a12:	28 f0       	brcs	.+10     	; 0x1a1e <__fp_rempio2+0x2c>
    1a14:	b2 3a       	cpi	r27, 0xA2	; 162
    1a16:	62 07       	cpc	r22, r18
    1a18:	73 07       	cpc	r23, r19
    1a1a:	84 07       	cpc	r24, r20
    1a1c:	28 f0       	brcs	.+10     	; 0x1a28 <__fp_rempio2+0x36>
    1a1e:	b2 5a       	subi	r27, 0xA2	; 162
    1a20:	62 0b       	sbc	r22, r18
    1a22:	73 0b       	sbc	r23, r19
    1a24:	84 0b       	sbc	r24, r20
    1a26:	e3 95       	inc	r30
    1a28:	9a 95       	dec	r25
    1a2a:	72 f7       	brpl	.-36     	; 0x1a08 <__fp_rempio2+0x16>
    1a2c:	80 38       	cpi	r24, 0x80	; 128
    1a2e:	30 f4       	brcc	.+12     	; 0x1a3c <__fp_rempio2+0x4a>
    1a30:	9a 95       	dec	r25
    1a32:	bb 0f       	add	r27, r27
    1a34:	66 1f       	adc	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	d2 f7       	brpl	.-12     	; 0x1a30 <__fp_rempio2+0x3e>
    1a3c:	90 48       	sbci	r25, 0x80	; 128
    1a3e:	83 c1       	rjmp	.+774    	; 0x1d46 <__fp_mpack_finite>

00001a40 <__fp_round>:
    1a40:	09 2e       	mov	r0, r25
    1a42:	03 94       	inc	r0
    1a44:	00 0c       	add	r0, r0
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <__fp_round+0xc>
    1a48:	88 23       	and	r24, r24
    1a4a:	52 f0       	brmi	.+20     	; 0x1a60 <__fp_round+0x20>
    1a4c:	bb 0f       	add	r27, r27
    1a4e:	40 f4       	brcc	.+16     	; 0x1a60 <__fp_round+0x20>
    1a50:	bf 2b       	or	r27, r31
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <__fp_round+0x18>
    1a54:	60 ff       	sbrs	r22, 0
    1a56:	04 c0       	rjmp	.+8      	; 0x1a60 <__fp_round+0x20>
    1a58:	6f 5f       	subi	r22, 0xFF	; 255
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	08 95       	ret

00001a62 <__fp_sinus>:
    1a62:	ef 93       	push	r30
    1a64:	e0 ff       	sbrs	r30, 0
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <__fp_sinus+0x12>
    1a68:	a2 ea       	ldi	r26, 0xA2	; 162
    1a6a:	2a ed       	ldi	r18, 0xDA	; 218
    1a6c:	3f e0       	ldi	r19, 0x0F	; 15
    1a6e:	49 ec       	ldi	r20, 0xC9	; 201
    1a70:	5f eb       	ldi	r21, 0xBF	; 191
    1a72:	cc dd       	rcall	.-1128   	; 0x160c <__addsf3x>
    1a74:	e5 df       	rcall	.-54     	; 0x1a40 <__fp_round>
    1a76:	0f 90       	pop	r0
    1a78:	03 94       	inc	r0
    1a7a:	01 fc       	sbrc	r0, 1
    1a7c:	90 58       	subi	r25, 0x80	; 128
    1a7e:	e1 e1       	ldi	r30, 0x11	; 17
    1a80:	f1 e0       	ldi	r31, 0x01	; 1
    1a82:	74 c1       	rjmp	.+744    	; 0x1d6c <__fp_powsodd>

00001a84 <__fp_split3>:
    1a84:	57 fd       	sbrc	r21, 7
    1a86:	90 58       	subi	r25, 0x80	; 128
    1a88:	44 0f       	add	r20, r20
    1a8a:	55 1f       	adc	r21, r21
    1a8c:	59 f0       	breq	.+22     	; 0x1aa4 <__fp_splitA+0x10>
    1a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a90:	71 f0       	breq	.+28     	; 0x1aae <__fp_splitA+0x1a>
    1a92:	47 95       	ror	r20

00001a94 <__fp_splitA>:
    1a94:	88 0f       	add	r24, r24
    1a96:	97 fb       	bst	r25, 7
    1a98:	99 1f       	adc	r25, r25
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <__fp_splitA+0x20>
    1a9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9e:	79 f0       	breq	.+30     	; 0x1abe <__fp_splitA+0x2a>
    1aa0:	87 95       	ror	r24
    1aa2:	08 95       	ret
    1aa4:	12 16       	cp	r1, r18
    1aa6:	13 06       	cpc	r1, r19
    1aa8:	14 06       	cpc	r1, r20
    1aaa:	55 1f       	adc	r21, r21
    1aac:	f2 cf       	rjmp	.-28     	; 0x1a92 <__fp_split3+0xe>
    1aae:	46 95       	lsr	r20
    1ab0:	f1 df       	rcall	.-30     	; 0x1a94 <__fp_splitA>
    1ab2:	08 c0       	rjmp	.+16     	; 0x1ac4 <__fp_splitA+0x30>
    1ab4:	16 16       	cp	r1, r22
    1ab6:	17 06       	cpc	r1, r23
    1ab8:	18 06       	cpc	r1, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	f1 cf       	rjmp	.-30     	; 0x1aa0 <__fp_splitA+0xc>
    1abe:	86 95       	lsr	r24
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	61 05       	cpc	r22, r1
    1ac4:	08 94       	sec
    1ac6:	08 95       	ret

00001ac8 <__fp_zero>:
    1ac8:	e8 94       	clt

00001aca <__fp_szero>:
    1aca:	bb 27       	eor	r27, r27
    1acc:	66 27       	eor	r22, r22
    1ace:	77 27       	eor	r23, r23
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	97 f9       	bld	r25, 7
    1ad4:	08 95       	ret

00001ad6 <__gesf2>:
    1ad6:	2c df       	rcall	.-424    	; 0x1930 <__fp_cmp>
    1ad8:	08 f4       	brcc	.+2      	; 0x1adc <__gesf2+0x6>
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	08 95       	ret

00001ade <inverse>:
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	80 e8       	ldi	r24, 0x80	; 128
    1ae8:	9f e3       	ldi	r25, 0x3F	; 63
    1aea:	4c ce       	rjmp	.-872    	; 0x1784 <__divsf3>

00001aec <__mulsf3>:
    1aec:	0b d0       	rcall	.+22     	; 0x1b04 <__mulsf3x>
    1aee:	a8 cf       	rjmp	.-176    	; 0x1a40 <__fp_round>
    1af0:	71 df       	rcall	.-286    	; 0x19d4 <__fp_pscA>
    1af2:	28 f0       	brcs	.+10     	; 0x1afe <__mulsf3+0x12>
    1af4:	76 df       	rcall	.-276    	; 0x19e2 <__fp_pscB>
    1af6:	18 f0       	brcs	.+6      	; 0x1afe <__mulsf3+0x12>
    1af8:	95 23       	and	r25, r21
    1afa:	09 f0       	breq	.+2      	; 0x1afe <__mulsf3+0x12>
    1afc:	3d cf       	rjmp	.-390    	; 0x1978 <__fp_inf>
    1afe:	42 cf       	rjmp	.-380    	; 0x1984 <__fp_nan>
    1b00:	11 24       	eor	r1, r1
    1b02:	e3 cf       	rjmp	.-58     	; 0x1aca <__fp_szero>

00001b04 <__mulsf3x>:
    1b04:	bf df       	rcall	.-130    	; 0x1a84 <__fp_split3>
    1b06:	a0 f3       	brcs	.-24     	; 0x1af0 <__mulsf3+0x4>

00001b08 <__mulsf3_pse>:
    1b08:	95 9f       	mul	r25, r21
    1b0a:	d1 f3       	breq	.-12     	; 0x1b00 <__mulsf3+0x14>
    1b0c:	95 0f       	add	r25, r21
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	55 1f       	adc	r21, r21
    1b12:	62 9f       	mul	r22, r18
    1b14:	f0 01       	movw	r30, r0
    1b16:	72 9f       	mul	r23, r18
    1b18:	bb 27       	eor	r27, r27
    1b1a:	f0 0d       	add	r31, r0
    1b1c:	b1 1d       	adc	r27, r1
    1b1e:	63 9f       	mul	r22, r19
    1b20:	aa 27       	eor	r26, r26
    1b22:	f0 0d       	add	r31, r0
    1b24:	b1 1d       	adc	r27, r1
    1b26:	aa 1f       	adc	r26, r26
    1b28:	64 9f       	mul	r22, r20
    1b2a:	66 27       	eor	r22, r22
    1b2c:	b0 0d       	add	r27, r0
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	66 1f       	adc	r22, r22
    1b32:	82 9f       	mul	r24, r18
    1b34:	22 27       	eor	r18, r18
    1b36:	b0 0d       	add	r27, r0
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	62 1f       	adc	r22, r18
    1b3c:	73 9f       	mul	r23, r19
    1b3e:	b0 0d       	add	r27, r0
    1b40:	a1 1d       	adc	r26, r1
    1b42:	62 1f       	adc	r22, r18
    1b44:	83 9f       	mul	r24, r19
    1b46:	a0 0d       	add	r26, r0
    1b48:	61 1d       	adc	r22, r1
    1b4a:	22 1f       	adc	r18, r18
    1b4c:	74 9f       	mul	r23, r20
    1b4e:	33 27       	eor	r19, r19
    1b50:	a0 0d       	add	r26, r0
    1b52:	61 1d       	adc	r22, r1
    1b54:	23 1f       	adc	r18, r19
    1b56:	84 9f       	mul	r24, r20
    1b58:	60 0d       	add	r22, r0
    1b5a:	21 1d       	adc	r18, r1
    1b5c:	82 2f       	mov	r24, r18
    1b5e:	76 2f       	mov	r23, r22
    1b60:	6a 2f       	mov	r22, r26
    1b62:	11 24       	eor	r1, r1
    1b64:	9f 57       	subi	r25, 0x7F	; 127
    1b66:	50 40       	sbci	r21, 0x00	; 0
    1b68:	8a f0       	brmi	.+34     	; 0x1b8c <__mulsf3_pse+0x84>
    1b6a:	e1 f0       	breq	.+56     	; 0x1ba4 <__mulsf3_pse+0x9c>
    1b6c:	88 23       	and	r24, r24
    1b6e:	4a f0       	brmi	.+18     	; 0x1b82 <__mulsf3_pse+0x7a>
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	bb 1f       	adc	r27, r27
    1b76:	66 1f       	adc	r22, r22
    1b78:	77 1f       	adc	r23, r23
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	91 50       	subi	r25, 0x01	; 1
    1b7e:	50 40       	sbci	r21, 0x00	; 0
    1b80:	a9 f7       	brne	.-22     	; 0x1b6c <__mulsf3_pse+0x64>
    1b82:	9e 3f       	cpi	r25, 0xFE	; 254
    1b84:	51 05       	cpc	r21, r1
    1b86:	70 f0       	brcs	.+28     	; 0x1ba4 <__mulsf3_pse+0x9c>
    1b88:	f7 ce       	rjmp	.-530    	; 0x1978 <__fp_inf>
    1b8a:	9f cf       	rjmp	.-194    	; 0x1aca <__fp_szero>
    1b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b8e:	ec f3       	brlt	.-6      	; 0x1b8a <__mulsf3_pse+0x82>
    1b90:	98 3e       	cpi	r25, 0xE8	; 232
    1b92:	dc f3       	brlt	.-10     	; 0x1b8a <__mulsf3_pse+0x82>
    1b94:	86 95       	lsr	r24
    1b96:	77 95       	ror	r23
    1b98:	67 95       	ror	r22
    1b9a:	b7 95       	ror	r27
    1b9c:	f7 95       	ror	r31
    1b9e:	e7 95       	ror	r30
    1ba0:	9f 5f       	subi	r25, 0xFF	; 255
    1ba2:	c1 f7       	brne	.-16     	; 0x1b94 <__mulsf3_pse+0x8c>
    1ba4:	fe 2b       	or	r31, r30
    1ba6:	88 0f       	add	r24, r24
    1ba8:	91 1d       	adc	r25, r1
    1baa:	96 95       	lsr	r25
    1bac:	87 95       	ror	r24
    1bae:	97 f9       	bld	r25, 7
    1bb0:	08 95       	ret

00001bb2 <pow>:
    1bb2:	fa 01       	movw	r30, r20
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	ff 1f       	adc	r31, r31
    1bb8:	30 96       	adiw	r30, 0x00	; 0
    1bba:	21 05       	cpc	r18, r1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	99 f1       	breq	.+102    	; 0x1c26 <pow+0x74>
    1bc0:	61 15       	cp	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	61 f4       	brne	.+24     	; 0x1bde <pow+0x2c>
    1bc6:	80 38       	cpi	r24, 0x80	; 128
    1bc8:	bf e3       	ldi	r27, 0x3F	; 63
    1bca:	9b 07       	cpc	r25, r27
    1bcc:	49 f1       	breq	.+82     	; 0x1c20 <pow+0x6e>
    1bce:	68 94       	set
    1bd0:	90 38       	cpi	r25, 0x80	; 128
    1bd2:	81 05       	cpc	r24, r1
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <pow+0x3c>
    1bd6:	80 38       	cpi	r24, 0x80	; 128
    1bd8:	bf ef       	ldi	r27, 0xFF	; 255
    1bda:	9b 07       	cpc	r25, r27
    1bdc:	41 f0       	breq	.+16     	; 0x1bee <pow+0x3c>
    1bde:	99 23       	and	r25, r25
    1be0:	42 f5       	brpl	.+80     	; 0x1c32 <pow+0x80>
    1be2:	ff 3f       	cpi	r31, 0xFF	; 255
    1be4:	e1 05       	cpc	r30, r1
    1be6:	31 05       	cpc	r19, r1
    1be8:	21 05       	cpc	r18, r1
    1bea:	11 f1       	breq	.+68     	; 0x1c30 <pow+0x7e>
    1bec:	e8 94       	clt
    1bee:	08 94       	sec
    1bf0:	e7 95       	ror	r30
    1bf2:	d9 01       	movw	r26, r18
    1bf4:	aa 23       	and	r26, r26
    1bf6:	29 f4       	brne	.+10     	; 0x1c02 <pow+0x50>
    1bf8:	ab 2f       	mov	r26, r27
    1bfa:	be 2f       	mov	r27, r30
    1bfc:	f8 5f       	subi	r31, 0xF8	; 248
    1bfe:	d0 f3       	brcs	.-12     	; 0x1bf4 <pow+0x42>
    1c00:	10 c0       	rjmp	.+32     	; 0x1c22 <pow+0x70>
    1c02:	ff 5f       	subi	r31, 0xFF	; 255
    1c04:	70 f4       	brcc	.+28     	; 0x1c22 <pow+0x70>
    1c06:	a6 95       	lsr	r26
    1c08:	e0 f7       	brcc	.-8      	; 0x1c02 <pow+0x50>
    1c0a:	f7 39       	cpi	r31, 0x97	; 151
    1c0c:	50 f0       	brcs	.+20     	; 0x1c22 <pow+0x70>
    1c0e:	19 f0       	breq	.+6      	; 0x1c16 <pow+0x64>
    1c10:	ff 3a       	cpi	r31, 0xAF	; 175
    1c12:	38 f4       	brcc	.+14     	; 0x1c22 <pow+0x70>
    1c14:	9f 77       	andi	r25, 0x7F	; 127
    1c16:	9f 93       	push	r25
    1c18:	0c d0       	rcall	.+24     	; 0x1c32 <pow+0x80>
    1c1a:	0f 90       	pop	r0
    1c1c:	07 fc       	sbrc	r0, 7
    1c1e:	90 58       	subi	r25, 0x80	; 128
    1c20:	08 95       	ret
    1c22:	3e f0       	brts	.+14     	; 0x1c32 <pow+0x80>
    1c24:	af ce       	rjmp	.-674    	; 0x1984 <__fp_nan>
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	80 e8       	ldi	r24, 0x80	; 128
    1c2c:	9f e3       	ldi	r25, 0x3F	; 63
    1c2e:	08 95       	ret
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	9f 77       	andi	r25, 0x7F	; 127
    1c34:	5f 93       	push	r21
    1c36:	4f 93       	push	r20
    1c38:	3f 93       	push	r19
    1c3a:	2f 93       	push	r18
    1c3c:	e3 d0       	rcall	.+454    	; 0x1e04 <log>
    1c3e:	2f 91       	pop	r18
    1c40:	3f 91       	pop	r19
    1c42:	4f 91       	pop	r20
    1c44:	5f 91       	pop	r21
    1c46:	52 df       	rcall	.-348    	; 0x1aec <__mulsf3>
    1c48:	50 c0       	rjmp	.+160    	; 0x1cea <exp>

00001c4a <sin>:
    1c4a:	9f 93       	push	r25
    1c4c:	d2 de       	rcall	.-604    	; 0x19f2 <__fp_rempio2>
    1c4e:	0f 90       	pop	r0
    1c50:	07 fc       	sbrc	r0, 7
    1c52:	ee 5f       	subi	r30, 0xFE	; 254
    1c54:	06 cf       	rjmp	.-500    	; 0x1a62 <__fp_sinus>
    1c56:	11 f4       	brne	.+4      	; 0x1c5c <sin+0x12>
    1c58:	0e f4       	brtc	.+2      	; 0x1c5c <sin+0x12>
    1c5a:	94 ce       	rjmp	.-728    	; 0x1984 <__fp_nan>
    1c5c:	72 c0       	rjmp	.+228    	; 0x1d42 <__fp_mpack>

00001c5e <sqrt>:
    1c5e:	1a df       	rcall	.-460    	; 0x1a94 <__fp_splitA>
    1c60:	d0 f3       	brcs	.-12     	; 0x1c56 <sin+0xc>
    1c62:	99 23       	and	r25, r25
    1c64:	d9 f3       	breq	.-10     	; 0x1c5c <sin+0x12>
    1c66:	ce f3       	brts	.-14     	; 0x1c5a <sin+0x10>
    1c68:	9f 57       	subi	r25, 0x7F	; 127
    1c6a:	55 0b       	sbc	r21, r21
    1c6c:	87 ff       	sbrs	r24, 7
    1c6e:	77 d0       	rcall	.+238    	; 0x1d5e <__fp_norm2>
    1c70:	00 24       	eor	r0, r0
    1c72:	a0 e6       	ldi	r26, 0x60	; 96
    1c74:	40 ea       	ldi	r20, 0xA0	; 160
    1c76:	90 01       	movw	r18, r0
    1c78:	80 58       	subi	r24, 0x80	; 128
    1c7a:	56 95       	lsr	r21
    1c7c:	97 95       	ror	r25
    1c7e:	28 f4       	brcc	.+10     	; 0x1c8a <sqrt+0x2c>
    1c80:	80 5c       	subi	r24, 0xC0	; 192
    1c82:	66 0f       	add	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	20 f0       	brcs	.+8      	; 0x1c92 <sqrt+0x34>
    1c8a:	26 17       	cp	r18, r22
    1c8c:	37 07       	cpc	r19, r23
    1c8e:	48 07       	cpc	r20, r24
    1c90:	30 f4       	brcc	.+12     	; 0x1c9e <sqrt+0x40>
    1c92:	62 1b       	sub	r22, r18
    1c94:	73 0b       	sbc	r23, r19
    1c96:	84 0b       	sbc	r24, r20
    1c98:	20 29       	or	r18, r0
    1c9a:	31 29       	or	r19, r1
    1c9c:	4a 2b       	or	r20, r26
    1c9e:	a6 95       	lsr	r26
    1ca0:	17 94       	ror	r1
    1ca2:	07 94       	ror	r0
    1ca4:	20 25       	eor	r18, r0
    1ca6:	31 25       	eor	r19, r1
    1ca8:	4a 27       	eor	r20, r26
    1caa:	58 f7       	brcc	.-42     	; 0x1c82 <sqrt+0x24>
    1cac:	66 0f       	add	r22, r22
    1cae:	77 1f       	adc	r23, r23
    1cb0:	88 1f       	adc	r24, r24
    1cb2:	20 f0       	brcs	.+8      	; 0x1cbc <sqrt+0x5e>
    1cb4:	26 17       	cp	r18, r22
    1cb6:	37 07       	cpc	r19, r23
    1cb8:	48 07       	cpc	r20, r24
    1cba:	30 f4       	brcc	.+12     	; 0x1cc8 <sqrt+0x6a>
    1cbc:	62 0b       	sbc	r22, r18
    1cbe:	73 0b       	sbc	r23, r19
    1cc0:	84 0b       	sbc	r24, r20
    1cc2:	20 0d       	add	r18, r0
    1cc4:	31 1d       	adc	r19, r1
    1cc6:	41 1d       	adc	r20, r1
    1cc8:	a0 95       	com	r26
    1cca:	81 f7       	brne	.-32     	; 0x1cac <sqrt+0x4e>
    1ccc:	b9 01       	movw	r22, r18
    1cce:	84 2f       	mov	r24, r20
    1cd0:	91 58       	subi	r25, 0x81	; 129
    1cd2:	88 0f       	add	r24, r24
    1cd4:	96 95       	lsr	r25
    1cd6:	87 95       	ror	r24
    1cd8:	08 95       	ret

00001cda <square>:
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
    1cde:	06 cf       	rjmp	.-500    	; 0x1aec <__mulsf3>
    1ce0:	19 f4       	brne	.+6      	; 0x1ce8 <square+0xe>
    1ce2:	0e f0       	brts	.+2      	; 0x1ce6 <square+0xc>
    1ce4:	49 ce       	rjmp	.-878    	; 0x1978 <__fp_inf>
    1ce6:	f0 ce       	rjmp	.-544    	; 0x1ac8 <__fp_zero>
    1ce8:	4d ce       	rjmp	.-870    	; 0x1984 <__fp_nan>

00001cea <exp>:
    1cea:	d4 de       	rcall	.-600    	; 0x1a94 <__fp_splitA>
    1cec:	c8 f3       	brcs	.-14     	; 0x1ce0 <square+0x6>
    1cee:	96 38       	cpi	r25, 0x86	; 134
    1cf0:	c0 f7       	brcc	.-16     	; 0x1ce2 <square+0x8>
    1cf2:	07 f8       	bld	r0, 7
    1cf4:	0f 92       	push	r0
    1cf6:	e8 94       	clt
    1cf8:	2b e3       	ldi	r18, 0x3B	; 59
    1cfa:	3a ea       	ldi	r19, 0xAA	; 170
    1cfc:	48 eb       	ldi	r20, 0xB8	; 184
    1cfe:	5f e7       	ldi	r21, 0x7F	; 127
    1d00:	03 df       	rcall	.-506    	; 0x1b08 <__mulsf3_pse>
    1d02:	0f 92       	push	r0
    1d04:	0f 92       	push	r0
    1d06:	0f 92       	push	r0
    1d08:	4d b7       	in	r20, 0x3d	; 61
    1d0a:	5e b7       	in	r21, 0x3e	; 62
    1d0c:	0f 92       	push	r0
    1d0e:	ba d0       	rcall	.+372    	; 0x1e84 <modf>
    1d10:	ef e2       	ldi	r30, 0x2F	; 47
    1d12:	f1 e0       	ldi	r31, 0x01	; 1
    1d14:	3a de       	rcall	.-908    	; 0x198a <__fp_powser>
    1d16:	4f 91       	pop	r20
    1d18:	5f 91       	pop	r21
    1d1a:	ef 91       	pop	r30
    1d1c:	ff 91       	pop	r31
    1d1e:	e5 95       	asr	r30
    1d20:	ee 1f       	adc	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	49 f0       	breq	.+18     	; 0x1d38 <exp+0x4e>
    1d26:	fe 57       	subi	r31, 0x7E	; 126
    1d28:	e0 68       	ori	r30, 0x80	; 128
    1d2a:	44 27       	eor	r20, r20
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	44 1f       	adc	r20, r20
    1d30:	fa 95       	dec	r31
    1d32:	e1 f7       	brne	.-8      	; 0x1d2c <exp+0x42>
    1d34:	41 95       	neg	r20
    1d36:	55 0b       	sbc	r21, r21
    1d38:	2c d0       	rcall	.+88     	; 0x1d92 <ldexp>
    1d3a:	0f 90       	pop	r0
    1d3c:	07 fe       	sbrs	r0, 7
    1d3e:	cf ce       	rjmp	.-610    	; 0x1ade <inverse>
    1d40:	08 95       	ret

00001d42 <__fp_mpack>:
    1d42:	9f 3f       	cpi	r25, 0xFF	; 255
    1d44:	31 f0       	breq	.+12     	; 0x1d52 <__fp_mpack_finite+0xc>

00001d46 <__fp_mpack_finite>:
    1d46:	91 50       	subi	r25, 0x01	; 1
    1d48:	20 f4       	brcc	.+8      	; 0x1d52 <__fp_mpack_finite+0xc>
    1d4a:	87 95       	ror	r24
    1d4c:	77 95       	ror	r23
    1d4e:	67 95       	ror	r22
    1d50:	b7 95       	ror	r27
    1d52:	88 0f       	add	r24, r24
    1d54:	91 1d       	adc	r25, r1
    1d56:	96 95       	lsr	r25
    1d58:	87 95       	ror	r24
    1d5a:	97 f9       	bld	r25, 7
    1d5c:	08 95       	ret

00001d5e <__fp_norm2>:
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	50 40       	sbci	r21, 0x00	; 0
    1d62:	66 0f       	add	r22, r22
    1d64:	77 1f       	adc	r23, r23
    1d66:	88 1f       	adc	r24, r24
    1d68:	d2 f7       	brpl	.-12     	; 0x1d5e <__fp_norm2>
    1d6a:	08 95       	ret

00001d6c <__fp_powsodd>:
    1d6c:	9f 93       	push	r25
    1d6e:	8f 93       	push	r24
    1d70:	7f 93       	push	r23
    1d72:	6f 93       	push	r22
    1d74:	ff 93       	push	r31
    1d76:	ef 93       	push	r30
    1d78:	9b 01       	movw	r18, r22
    1d7a:	ac 01       	movw	r20, r24
    1d7c:	b7 de       	rcall	.-658    	; 0x1aec <__mulsf3>
    1d7e:	ef 91       	pop	r30
    1d80:	ff 91       	pop	r31
    1d82:	03 de       	rcall	.-1018   	; 0x198a <__fp_powser>
    1d84:	2f 91       	pop	r18
    1d86:	3f 91       	pop	r19
    1d88:	4f 91       	pop	r20
    1d8a:	5f 91       	pop	r21
    1d8c:	af ce       	rjmp	.-674    	; 0x1aec <__mulsf3>
    1d8e:	f4 cd       	rjmp	.-1048   	; 0x1978 <__fp_inf>
    1d90:	d8 cf       	rjmp	.-80     	; 0x1d42 <__fp_mpack>

00001d92 <ldexp>:
    1d92:	80 de       	rcall	.-768    	; 0x1a94 <__fp_splitA>
    1d94:	e8 f3       	brcs	.-6      	; 0x1d90 <__fp_powsodd+0x24>
    1d96:	99 23       	and	r25, r25
    1d98:	d9 f3       	breq	.-10     	; 0x1d90 <__fp_powsodd+0x24>
    1d9a:	94 0f       	add	r25, r20
    1d9c:	51 1d       	adc	r21, r1
    1d9e:	bb f3       	brvs	.-18     	; 0x1d8e <__fp_powsodd+0x22>
    1da0:	91 50       	subi	r25, 0x01	; 1
    1da2:	50 40       	sbci	r21, 0x00	; 0
    1da4:	94 f0       	brlt	.+36     	; 0x1dca <ldexp+0x38>
    1da6:	59 f0       	breq	.+22     	; 0x1dbe <ldexp+0x2c>
    1da8:	88 23       	and	r24, r24
    1daa:	32 f0       	brmi	.+12     	; 0x1db8 <ldexp+0x26>
    1dac:	66 0f       	add	r22, r22
    1dae:	77 1f       	adc	r23, r23
    1db0:	88 1f       	adc	r24, r24
    1db2:	91 50       	subi	r25, 0x01	; 1
    1db4:	50 40       	sbci	r21, 0x00	; 0
    1db6:	c1 f7       	brne	.-16     	; 0x1da8 <ldexp+0x16>
    1db8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dba:	51 05       	cpc	r21, r1
    1dbc:	44 f7       	brge	.-48     	; 0x1d8e <__fp_powsodd+0x22>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	91 1d       	adc	r25, r1
    1dc2:	96 95       	lsr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	97 f9       	bld	r25, 7
    1dc8:	08 95       	ret
    1dca:	5f 3f       	cpi	r21, 0xFF	; 255
    1dcc:	ac f0       	brlt	.+42     	; 0x1df8 <ldexp+0x66>
    1dce:	98 3e       	cpi	r25, 0xE8	; 232
    1dd0:	9c f0       	brlt	.+38     	; 0x1df8 <ldexp+0x66>
    1dd2:	bb 27       	eor	r27, r27
    1dd4:	86 95       	lsr	r24
    1dd6:	77 95       	ror	r23
    1dd8:	67 95       	ror	r22
    1dda:	b7 95       	ror	r27
    1ddc:	08 f4       	brcc	.+2      	; 0x1de0 <ldexp+0x4e>
    1dde:	b1 60       	ori	r27, 0x01	; 1
    1de0:	93 95       	inc	r25
    1de2:	c1 f7       	brne	.-16     	; 0x1dd4 <ldexp+0x42>
    1de4:	bb 0f       	add	r27, r27
    1de6:	58 f7       	brcc	.-42     	; 0x1dbe <ldexp+0x2c>
    1de8:	11 f4       	brne	.+4      	; 0x1dee <ldexp+0x5c>
    1dea:	60 ff       	sbrs	r22, 0
    1dec:	e8 cf       	rjmp	.-48     	; 0x1dbe <ldexp+0x2c>
    1dee:	6f 5f       	subi	r22, 0xFF	; 255
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	8f 4f       	sbci	r24, 0xFF	; 255
    1df4:	9f 4f       	sbci	r25, 0xFF	; 255
    1df6:	e3 cf       	rjmp	.-58     	; 0x1dbe <ldexp+0x2c>
    1df8:	68 ce       	rjmp	.-816    	; 0x1aca <__fp_szero>
    1dfa:	0e f0       	brts	.+2      	; 0x1dfe <ldexp+0x6c>
    1dfc:	a2 cf       	rjmp	.-188    	; 0x1d42 <__fp_mpack>
    1dfe:	c2 cd       	rjmp	.-1148   	; 0x1984 <__fp_nan>
    1e00:	68 94       	set
    1e02:	ba cd       	rjmp	.-1164   	; 0x1978 <__fp_inf>

00001e04 <log>:
    1e04:	47 de       	rcall	.-882    	; 0x1a94 <__fp_splitA>
    1e06:	c8 f3       	brcs	.-14     	; 0x1dfa <ldexp+0x68>
    1e08:	99 23       	and	r25, r25
    1e0a:	d1 f3       	breq	.-12     	; 0x1e00 <ldexp+0x6e>
    1e0c:	c6 f3       	brts	.-16     	; 0x1dfe <ldexp+0x6c>
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	1f 93       	push	r17
    1e14:	0f 93       	push	r16
    1e16:	ff 92       	push	r15
    1e18:	c9 2f       	mov	r28, r25
    1e1a:	dd 27       	eor	r29, r29
    1e1c:	88 23       	and	r24, r24
    1e1e:	2a f0       	brmi	.+10     	; 0x1e2a <log+0x26>
    1e20:	21 97       	sbiw	r28, 0x01	; 1
    1e22:	66 0f       	add	r22, r22
    1e24:	77 1f       	adc	r23, r23
    1e26:	88 1f       	adc	r24, r24
    1e28:	da f7       	brpl	.-10     	; 0x1e20 <log+0x1c>
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f eb       	ldi	r21, 0xBF	; 191
    1e32:	9f e3       	ldi	r25, 0x3F	; 63
    1e34:	88 39       	cpi	r24, 0x98	; 152
    1e36:	20 f0       	brcs	.+8      	; 0x1e40 <log+0x3c>
    1e38:	80 3e       	cpi	r24, 0xE0	; 224
    1e3a:	30 f0       	brcs	.+12     	; 0x1e48 <log+0x44>
    1e3c:	21 96       	adiw	r28, 0x01	; 1
    1e3e:	8f 77       	andi	r24, 0x7F	; 127
    1e40:	d4 db       	rcall	.-2136   	; 0x15ea <__addsf3>
    1e42:	e7 e5       	ldi	r30, 0x57	; 87
    1e44:	f1 e0       	ldi	r31, 0x01	; 1
    1e46:	03 c0       	rjmp	.+6      	; 0x1e4e <log+0x4a>
    1e48:	d0 db       	rcall	.-2144   	; 0x15ea <__addsf3>
    1e4a:	e4 e8       	ldi	r30, 0x84	; 132
    1e4c:	f1 e0       	ldi	r31, 0x01	; 1
    1e4e:	9d dd       	rcall	.-1222   	; 0x198a <__fp_powser>
    1e50:	8b 01       	movw	r16, r22
    1e52:	be 01       	movw	r22, r28
    1e54:	ec 01       	movw	r28, r24
    1e56:	fb 2e       	mov	r15, r27
    1e58:	6f 57       	subi	r22, 0x7F	; 127
    1e5a:	71 09       	sbc	r23, r1
    1e5c:	75 95       	asr	r23
    1e5e:	77 1f       	adc	r23, r23
    1e60:	88 0b       	sbc	r24, r24
    1e62:	99 0b       	sbc	r25, r25
    1e64:	2a dd       	rcall	.-1452   	; 0x18ba <__floatsisf>
    1e66:	28 e1       	ldi	r18, 0x18	; 24
    1e68:	32 e7       	ldi	r19, 0x72	; 114
    1e6a:	41 e3       	ldi	r20, 0x31	; 49
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	4a de       	rcall	.-876    	; 0x1b04 <__mulsf3x>
    1e70:	af 2d       	mov	r26, r15
    1e72:	98 01       	movw	r18, r16
    1e74:	ae 01       	movw	r20, r28
    1e76:	ff 90       	pop	r15
    1e78:	0f 91       	pop	r16
    1e7a:	1f 91       	pop	r17
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	c5 db       	rcall	.-2166   	; 0x160c <__addsf3x>
    1e82:	de cd       	rjmp	.-1092   	; 0x1a40 <__fp_round>

00001e84 <modf>:
    1e84:	fa 01       	movw	r30, r20
    1e86:	dc 01       	movw	r26, r24
    1e88:	aa 0f       	add	r26, r26
    1e8a:	bb 1f       	adc	r27, r27
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	bf 57       	subi	r27, 0x7F	; 127
    1e92:	28 f4       	brcc	.+10     	; 0x1e9e <modf+0x1a>
    1e94:	22 27       	eor	r18, r18
    1e96:	33 27       	eor	r19, r19
    1e98:	44 27       	eor	r20, r20
    1e9a:	50 78       	andi	r21, 0x80	; 128
    1e9c:	1f c0       	rjmp	.+62     	; 0x1edc <modf+0x58>
    1e9e:	b7 51       	subi	r27, 0x17	; 23
    1ea0:	88 f4       	brcc	.+34     	; 0x1ec4 <modf+0x40>
    1ea2:	ab 2f       	mov	r26, r27
    1ea4:	00 24       	eor	r0, r0
    1ea6:	46 95       	lsr	r20
    1ea8:	37 95       	ror	r19
    1eaa:	27 95       	ror	r18
    1eac:	01 1c       	adc	r0, r1
    1eae:	a3 95       	inc	r26
    1eb0:	d2 f3       	brmi	.-12     	; 0x1ea6 <modf+0x22>
    1eb2:	00 20       	and	r0, r0
    1eb4:	69 f0       	breq	.+26     	; 0x1ed0 <modf+0x4c>
    1eb6:	22 0f       	add	r18, r18
    1eb8:	33 1f       	adc	r19, r19
    1eba:	44 1f       	adc	r20, r20
    1ebc:	b3 95       	inc	r27
    1ebe:	da f3       	brmi	.-10     	; 0x1eb6 <modf+0x32>
    1ec0:	0d d0       	rcall	.+26     	; 0x1edc <modf+0x58>
    1ec2:	92 cb       	rjmp	.-2268   	; 0x15e8 <__subsf3>
    1ec4:	61 30       	cpi	r22, 0x01	; 1
    1ec6:	71 05       	cpc	r23, r1
    1ec8:	a0 e8       	ldi	r26, 0x80	; 128
    1eca:	8a 07       	cpc	r24, r26
    1ecc:	b9 46       	sbci	r27, 0x69	; 105
    1ece:	30 f4       	brcc	.+12     	; 0x1edc <modf+0x58>
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	66 27       	eor	r22, r22
    1ed6:	77 27       	eor	r23, r23
    1ed8:	88 27       	eor	r24, r24
    1eda:	90 78       	andi	r25, 0x80	; 128
    1edc:	30 96       	adiw	r30, 0x00	; 0
    1ede:	21 f0       	breq	.+8      	; 0x1ee8 <modf+0x64>
    1ee0:	20 83       	st	Z, r18
    1ee2:	31 83       	std	Z+1, r19	; 0x01
    1ee4:	42 83       	std	Z+2, r20	; 0x02
    1ee6:	53 83       	std	Z+3, r21	; 0x03
    1ee8:	08 95       	ret

00001eea <__udivmodhi4>:
    1eea:	aa 1b       	sub	r26, r26
    1eec:	bb 1b       	sub	r27, r27
    1eee:	51 e1       	ldi	r21, 0x11	; 17
    1ef0:	07 c0       	rjmp	.+14     	; 0x1f00 <__udivmodhi4_ep>

00001ef2 <__udivmodhi4_loop>:
    1ef2:	aa 1f       	adc	r26, r26
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	a6 17       	cp	r26, r22
    1ef8:	b7 07       	cpc	r27, r23
    1efa:	10 f0       	brcs	.+4      	; 0x1f00 <__udivmodhi4_ep>
    1efc:	a6 1b       	sub	r26, r22
    1efe:	b7 0b       	sbc	r27, r23

00001f00 <__udivmodhi4_ep>:
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	5a 95       	dec	r21
    1f06:	a9 f7       	brne	.-22     	; 0x1ef2 <__udivmodhi4_loop>
    1f08:	80 95       	com	r24
    1f0a:	90 95       	com	r25
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	08 95       	ret

00001f12 <_exit>:
    1f12:	f8 94       	cli

00001f14 <__stop_program>:
    1f14:	ff cf       	rjmp	.-2      	; 0x1f14 <__stop_program>
